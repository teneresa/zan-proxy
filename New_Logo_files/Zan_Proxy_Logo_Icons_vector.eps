%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Zan_Proxy_Logo_Icons_vector.eps
%%Creator: Adobe Illustrator(R) 22.0
%%For: Teneresa
%%CreationDate: 7/13/2018
%%BoundingBox: 0 0 366 474
%%HiResBoundingBox: 0 0 365.3264 473.0228
%%CropBox: 0 0 365.3264 473.0228
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 22.0.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 22.0.1 x249 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=100 RasterRes=1200 GradRes=300 Text=0 Stroke=0 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c143 79.161210, 2017/08/11-10:28:36        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Stock Template</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2018-07-13T14:05:50-03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2018-07-13T14:05:50-03:00</xmp:ModifyDate>
         <xmp:CreateDate>2018-07-13T14:05:49-03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 22.0 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>200</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAADIAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXy3+eenXX5l/n9of5bR30ttpllZmW8KHmsU7RSXDSGOoXkYvTUV8ffFWLzv8Am3+Q&#xA;OpWt9b6m2veTJpVimtpC3o+PptE5f6vIVX4XQ08a/ZxV9c+WPMemeZfL2n69pbmSw1KFZ4CdmAYb&#xA;qwFaMpqrDxGKpnirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVfNX/ADjo&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:3b1b6da3-ac42-9840-90c9-f5ec7437fccb</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:3b1b6da3-ac42-9840-90c9-f5ec7437fccb</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:59865060-5b97-0348-ab52-256b2750a4b1</stRef:instanceID>
            <stRef:documentID>xmp.did:59865060-5b97-0348-ab52-256b2750a4b1</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:BFFB4AB5E22BE311A018E6D873A2A7EA</stEvt:instanceID>
                  <stEvt:when>2013-10-03T09:26:36+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:CE184AC00C5BE31183E791815EAA4C5E</stEvt:instanceID>
                  <stEvt:when>2013-12-02T08:46:47+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F011E2F5510EE4118538A88D102BAB8E</stEvt:instanceID>
                  <stEvt:when>2014-07-18T13:26:13+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:B7A671B7FB10E8119239DE749183B6E1</stEvt:instanceID>
                  <stEvt:when>2018-02-13T17:23:13-03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:B848859C3D13E811B4CCA01193625BB9</stEvt:instanceID>
                  <stEvt:when>2018-02-16T22:52:06-03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F58AFD07EB13E811946382ED91CD3737</stEvt:instanceID>
                  <stEvt:when>2018-02-17T11:01:41-03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:E39B45B30814E811946382ED91CD3737</stEvt:instanceID>
                  <stEvt:when>2018-02-17T14:35:09-03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:E69B45B30814E811946382ED91CD3737</stEvt:instanceID>
                  <stEvt:when>2018-02-17T14:47:31-03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:EB9B45B30814E811946382ED91CD3737</stEvt:instanceID>
                  <stEvt:when>2018-02-17T14:53:12-03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:D611007D0B14E811946382ED91CD3737</stEvt:instanceID>
                  <stEvt:when>2018-02-17T15:57:50-03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:D811007D0B14E811946382ED91CD3737</stEvt:instanceID>
                  <stEvt:when>2018-02-17T16:00:21-03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:822B69834514E811946382ED91CD3737</stEvt:instanceID>
                  <stEvt:when>2018-02-17T21:50:41-03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4A06FAA20B17E8119736D27784DB3468</stEvt:instanceID>
                  <stEvt:when>2018-02-21T10:32:18-03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:74fde70b-e1dc-004c-9a3c-bfc5384f141e</stEvt:instanceID>
                  <stEvt:when>2018-02-22T17:18:25-03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:3b1b6da3-ac42-9840-90c9-f5ec7437fccb</stEvt:instanceID>
                  <stEvt:when>2018-07-13T14:05:50-03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>202.000000</stDim:w>
            <stDim:h>202.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>tatiletters 1</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=39 G=170 B=203 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>39</xmpG:red>
                           <xmpG:green>170</xmpG:green>
                           <xmpG:blue>203</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=218 G=218 B=218 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>218</xmpG:red>
                           <xmpG:green>218</xmpG:green>
                           <xmpG:blue>218</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -473.023 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 473.023 li
365.326 473.023 li
365.326 0 li
cp
clp
365.326 369.692 mo
365.326 443.652 li
365.326 459.873 352.177 473.022 335.956 473.022 cv
261.996 473.022 li
245.776 473.022 232.626 459.873 232.626 443.652 cv
232.626 369.692 li
232.626 353.473 245.776 340.323 261.996 340.323 cv
335.956 340.323 li
352.177 340.323 365.326 353.473 365.326 369.692 cv
false sop
/0 
[/DeviceCMYK] /CSA add_res
.725795 .131594 .140139 0 cmyk
f
335.956 473.022 mo
274.286 473.022 li
251.276 442.713 li
251.456 442.784 251.648 442.821 251.841 442.821 cv
251.949 442.821 252.057 442.81 252.164 442.786 cv
252.218 442.776 254.637 442.28 257.952 442.28 cv
262.047 442.28 267.507 443.038 271.563 446.409 cv
276.49 450.503 282.676 451.364 287.005 451.364 cv
287.012 451.364 li
298.203 451.364 336.959 451.236 337.991 451.236 cv
338.005 451.236 li
341.885 451.236 345.046 448.296 345.046 444.686 cv
345.046 443.455 li
345.046 442.187 344.561 440.942 343.786 439.895 cv
346.349 439.198 348.235 436.862 348.235 434.086 cv
348.235 428.818 li
348.235 427.024 347.445 425.415 346.199 424.312 cv
347.445 423.209 348.235 421.6 348.235 419.806 cv
348.235 414.537 li
348.235 412.743 347.445 411.135 346.199 410.031 cv
347.445 408.928 348.235 407.319 348.235 405.525 cv
348.235 400.264 li
348.235 399.998 348.218 399.736 348.185 399.479 cv
365.326 423.803 li
365.326 443.652 li
365.326 459.873 352.177 473.022 335.956 473.022 cv
287.012 448.317 mo
287.005 448.317 li
283.182 448.317 277.743 447.577 273.507 444.067 cv
273.485 444.049 273.463 444.031 273.442 444.013 cv
273.463 444.031 273.485 444.049 273.507 444.067 cv
277.743 447.577 283.182 448.317 287.005 448.317 cv
287.012 448.317 li
292.65 448.317 305.301 448.281 316.591 448.253 cv
327.875 448.225 337.806 448.189 338.005 448.189 cv
338.02 448.189 li
339.469 448.184 340.741 447.499 341.437 446.477 cv
341.437 446.477 li
340.741 447.499 339.469 448.184 338.02 448.189 cv
338.005 448.189 li
337.806 448.189 327.875 448.225 316.591 448.253 cv
305.301 448.281 292.65 448.317 287.012 448.317 cv
273.35 443.938 mo
273.328 443.92 273.305 443.902 273.283 443.884 cv
273.305 443.902 273.328 443.92 273.35 443.938 cv
273.281 443.883 mo
273.265 443.87 273.249 443.856 273.232 443.843 cv
273.249 443.856 273.265 443.87 273.281 443.883 cv
256.854 439.235 mo
256.854 439.235 li
257.215 439.223 257.588 439.217 257.973 439.217 cv
257.588 439.217 257.215 439.223 256.854 439.235 cv
257.983 439.217 mo
257.98 439.217 257.977 439.217 257.974 439.217 cv
257.974 439.217 li
257.977 439.217 257.98 439.217 257.983 439.217 cv
282.942 425.033 mo
282.933 425.029 282.926 425.026 282.921 425.024 cv
282.926 425.026 282.933 425.029 282.942 425.033 cv
290.222 423.171 mo
290.221 423.171 290.22 423.171 290.219 423.171 cv
290.22 423.171 290.221 423.171 290.222 423.171 cv
290.222 423.171 li
290.226 423.171 mo
292.518 423.17 295.191 422.76 297.789 421.415 cv
295.19 422.761 292.518 423.17 290.226 423.171 cv
level3{
gsave
clp
[-37.1023 -70.0533 70.0533 -37.1023 335.619 484.837 ]ct
/0 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~bXt,$bXt,$bXt)#bXk#"bXk#"b=Oo!b=Fhub=Fetb==_sb==_sb==_sb!nMpb!nMpb!eGoa[J>na[J;m
a[A5la[A5la?r#ia?hrha?hoga?_ifa$D]da$;Wca$;Taa$2N``]c?^`]Z6\`B?-[`B6'Z`B6$Y`&fgV
`&fgV_`BUS_`9OR_`0FP_`0FP_Da4M_Da4M_DX+K_DO"I_)*hG_)!_E_)!_E^bRMB^bIGA^b@>?^Fq/=
^Fq,<^+Lr:^+Ci8^+:`6^+1Z5]dbH2]dYB1]dY?0]I50.]-es+]-\m*]-Sd(\g/R%\g/R%\KW:!\KW:!
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [1 0 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-37.1023 -70.0533 70.0533 -37.1023 335.619 484.837 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~\@B&Y\@K/\\[f8]\[oA`]"5Ja]"5Ja]">Sd]=beh]Y(ni]Y(ni]Y2"l]tM+m]tM+m]tM+m]tV4p^:q=q
^:q@s^V@Ou^V@Ou^V@S"^qdb$^qdb$^qde&_83t(_83t(_83t(_84"*_SX1,_SX1,_SX1,_SX4._o'C0
_o'C1`5KU4`5KU4`5KU5`Pog8`Pog9`l?$<`l?$<`l?$<`l?$=a2c6@a2c6@a2c6@a2c6AaN2HDaN2HD
aN2HDaN2HDaiVZHaiVZHaiVZHb0%lLb0%lLb0%lLb0%lLb0%lLb0%lLbKJ)PbKJ)PbKJ)PbKJ)PbKJ)P
~>
<~+X&!P+X/*T,9nEX,:"N[,UF`_,pjrc-7:/g-R^Ak-n$Jl-n-So.4Qes.P!#".kE5&/1iG*/M8Y./hSb/
/hSe10/#"50JG490ekF=1,:U?1,:XA1G^jE1c.'I2)R9M2E!HO2E!KQ2`EZS2`E]U3&ioY3B9,]3]];_
3]];`4$,Mc4$,Md4?P_g4?P_h4Ztql5!D.p5<h@s5<h@t5X7S"5X7S#5s[e&5s[e'6:+"+6UO4.6UO4/
6psF26psF26psF277BX677BX67Rfj:7Rfj:7Rfj:7n6'>7n6'>84Z9B84Z9B84Z9B8P)KF8P)KF8P)KF
~>
<~,9nEX,:"N[,U=W\,UF`_,pjrc-71&d-7:/g-RU8h-R^Ak-n$Jl-n-So.4H\p.4Qes.P!#".k<,#.kE5&
/1`>'/1`A)/M/P+/M/S-/hSb//hSe10/"t30/#"50JG490ekC;0ekF=1,:U?1,:XA1G^gC1G^jE1c.$G
1c.$H2)R6L2E!HO2E!HO2E!HP2`EZS2`EZS2`EZT3&ilW3&ilX3B9)[3B9)\3]];_3]];`4$,Mc4$,Mc
4$,Mc4?P_g4?P_g4?P_g4?P_g4Ztqk4Ztqk4Ztqk4Ztqk5!D.o5!D.o5!D.o5!D.o5!D.o5<h@s5<h@s
~>
0 ]
>>
0 0 1 0 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
345.189 428.818 mo
345.189 434.086 li
345.189 435.73 343.85 437.069 342.205 437.069 cv
338.709 437.069 li
338.704 438.741 li
338.703 440.123 li
340.426 440.251 341.999 442.053 341.999 443.455 cv
341.999 444.686 li
341.999 446.616 340.212 448.182 338.02 448.189 cv
338.005 448.189 li
337.806 448.189 327.875 448.225 316.591 448.253 cv
305.301 448.281 292.65 448.317 287.012 448.317 cv
287.005 448.317 li
283.182 448.317 277.743 447.577 273.507 444.067 cv
266.829 438.507 257.34 438.998 253.367 439.511 cv
253.367 422.56 li
253.367 413.091 258.97 406.472 267.314 404.934 cv
275.778 403.382 281.345 400.605 283.858 396.697 cv
285.581 394.007 287.873 390.895 290.087 387.884 cv
293.924 382.658 297.903 377.255 299.662 373.141 cv
299.727 372.963 li
300.651 369.724 302.274 363.146 302.937 360.447 cv
306.66 360.711 309.629 363.602 309.949 367.374 cv
310.419 372.842 310.376 377.426 309.828 380.637 cv
309.601 381.484 308.895 382.915 308.148 384.432 cv
307.016 386.717 305.728 389.314 305.193 391.636 cv
304.944 392.711 305.051 394.469 305.193 396.903 cv
305.643 404.386 306.383 416.915 297.847 421.386 cv
291.219 424.852 284.086 422.205 284.015 422.184 cv
283.231 421.877 282.349 422.268 282.05 423.052 cv
281.743 423.842 282.135 424.718 282.918 425.023 cv
283.26 425.152 291.383 428.206 299.264 424.084 cv
308.59 419.193 308.753 406.978 308.361 399.019 cv
312.775 399.011 li
313.302 399.011 313.765 398.74 314.043 398.327 cv
314.135 398.342 li
314.684 397.694 315.495 397.274 316.406 397.274 cv
342.205 397.274 li
343.85 397.274 345.189 398.612 345.189 400.264 cv
345.189 405.525 li
345.189 407.169 343.85 408.508 342.205 408.508 cv
342.162 408.508 li
342.434 409.54 342.611 410.572 342.725 411.604 cv
344.12 411.853 345.189 413.071 345.189 414.537 cv
345.189 419.806 li
345.189 421.393 343.23 422.682 341.664 422.774 cv
341.65 423.002 341.629 423.229 341.614 423.465 cv
341.565 424.241 342.22 425.038 342.155 425.835 cv
342.205 425.835 li
343.85 425.835 345.189 427.174 345.189 428.818 cv
.130831 .101167 .105867 0 cmyk
f
345.189 434.086 mo
345.189 428.818 li
345.189 427.174 343.85 425.835 342.205 425.835 cv
342.155 425.835 li
342.22 425.038 341.565 424.241 341.614 423.465 cv
341.629 423.229 341.65 423.002 341.664 422.774 cv
343.23 422.682 345.189 421.393 345.189 419.806 cv
345.189 414.537 li
345.189 413.071 344.12 411.853 342.725 411.604 cv
342.611 410.572 342.434 409.54 342.162 408.508 cv
342.205 408.508 li
343.85 408.508 345.189 407.169 345.189 405.525 cv
345.189 400.264 li
345.189 398.612 343.85 397.274 342.205 397.274 cv
316.406 397.274 li
315.495 397.274 314.684 397.694 314.135 398.342 cv
314.043 398.327 li
313.765 398.74 313.302 399.011 312.775 399.011 cv
308.361 399.019 li
308.753 406.978 308.59 419.193 299.264 424.084 cv
291.383 428.206 283.26 425.152 282.918 425.023 cv
282.135 424.718 281.743 423.842 282.05 423.052 cv
282.349 422.268 283.231 421.877 284.015 422.184 cv
284.086 422.205 291.219 424.852 297.847 421.386 cv
306.383 416.915 305.643 404.386 305.193 396.903 cv
305.051 394.469 304.944 392.711 305.193 391.636 cv
305.728 389.314 307.016 386.717 308.148 384.432 cv
308.895 382.915 309.601 381.484 309.828 380.637 cv
310.376 377.426 310.419 372.842 309.949 367.374 cv
309.629 363.602 306.66 360.711 302.937 360.447 cv
302.274 363.146 300.651 369.724 299.727 372.963 cv
299.662 373.141 li
297.903 377.255 293.924 382.658 290.087 387.884 cv
287.873 390.895 285.581 394.007 283.858 396.697 cv
281.345 400.605 275.778 403.382 267.314 404.934 cv
258.97 406.472 253.612 412.713 253.367 422.56 cv
253.367 439.511 li
257.34 438.998 266.829 438.507 273.507 444.067 cv
277.743 447.577 283.182 448.317 287.005 448.317 cv
287.012 448.317 li
292.65 448.317 305.301 448.281 316.591 448.253 cv
327.875 448.225 337.806 448.189 338.005 448.189 cv
338.02 448.189 li
340.212 448.182 341.999 446.616 341.999 444.686 cv
341.999 443.455 li
341.999 442.053 340.426 440.251 338.703 440.123 cv
338.704 438.741 li
338.709 437.069 li
342.205 437.069 li
343.85 437.069 345.189 435.73 345.189 434.086 cv
348.235 428.818 mo
348.235 434.086 li
348.235 436.862 346.349 439.198 343.786 439.895 cv
344.561 440.942 345.046 442.187 345.046 443.455 cv
345.046 444.686 li
345.046 448.296 341.885 451.236 338.005 451.236 cv
337.991 451.236 li
336.959 451.236 298.203 451.364 287.012 451.364 cv
287.005 451.364 li
282.676 451.364 276.49 450.503 271.563 446.409 cv
264.224 440.309 252.285 442.765 252.164 442.786 cv
251.716 442.886 251.246 442.771 250.89 442.486 cv
250.534 442.195 250.32 441.761 250.32 441.298 cv
250.32 422.56 li
250.32 412.202 257.083 403.724 266.758 401.944 cv
274.262 400.562 279.28 398.178 281.288 395.053 cv
283.075 392.283 285.389 389.13 287.631 386.083 cv
291.34 381.028 295.185 375.81 296.829 372.03 cv
297.975 367.993 300.239 358.646 300.268 358.547 cv
300.431 357.863 301.043 357.386 301.748 357.386 cv
302.396 357.386 li
307.963 357.386 312.512 361.565 312.989 367.118 cv
313.48 372.955 313.423 377.696 312.818 381.214 cv
312.797 381.327 li
312.505 382.48 311.75 384.012 310.875 385.776 cv
309.813 387.92 308.618 390.348 308.162 392.326 cv
308.034 392.882 308.099 394.334 308.19 395.972 cv
312.185 395.964 li
313.273 394.896 314.762 394.228 316.406 394.228 cv
342.205 394.228 li
345.53 394.228 348.235 396.933 348.235 400.264 cv
348.235 405.525 li
348.235 407.319 347.445 408.928 346.199 410.031 cv
347.445 411.135 348.235 412.743 348.235 414.537 cv
348.235 419.806 li
348.235 421.6 347.445 423.209 346.199 424.312 cv
347.445 425.415 348.235 427.024 348.235 428.818 cv
.749721 .679194 .670497 .901457 cmyk
f
266.875 409.025 mo
276.327 407.433 283.285 405.845 286.149 401.516 cv
288.114 398.535 290.007 394.383 292.523 391.053 cv
296.886 385.273 301.408 379.297 303.437 374.725 cv
303.511 374.526 li
304.454 371.392 304.406 360.555 302.886 360.447 cv
302.224 363.145 300.601 369.724 299.675 372.963 cv
299.61 373.141 li
297.853 377.255 293.873 382.658 290.036 387.884 cv
287.821 390.895 285.529 394.007 283.807 396.697 cv
281.294 400.605 275.727 403.382 267.262 404.934 cv
259.995 406.273 255.072 410.886 253.719 418.896 cv
255.755 411.373 260.999 410.02 266.875 409.025 cv
cp
0 0 0 0 cmyk
f
290.212 426.232 mo
290.211 426.232 290.21 426.232 290.209 426.232 cv
290.21 426.232 290.211 426.232 290.212 426.232 cv
290.212 426.232 li
290.216 426.232 mo
292.93 426.232 296.116 425.73 299.264 424.084 cv
299.264 424.084 li
296.116 425.73 292.93 426.232 290.216 426.232 cv
level3{
gsave
clp
[-37.1023 -70.0533 70.0533 -37.1023 335.619 484.837 ]ct
/1 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~em_D]em_D]em_D]emM>]emV>\emV>\emV>\em;/YemD2YemD2YeQkuWeQtuUeQtuUeQtuUeQblTeQblT
eQblTeQbiSeQbiSe6P`Pe6>WOe6GWNe6GWNe65KKe65KKdof9Hdof9HdT9'FdT9$DdT9$DdT9$Dd8igA
d8igAd8WX>d8WX>d8`X<d8`X<cr3C9cr3C9cr*:7cr3=6cV[+4cV[+4cV[+4c;-h0c;-b.c;$_.btUP,
btUP,bY(8(bY(2%bXt/&bXt,$bXt,$bXb##b=4f!b=4_tb!ePrb!eJpa[A>oa[A8ma[A5la?hrha?hrh
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [1 0 ]
>>
>>/Gradient add_res /1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-37.1023 -70.0533 70.0533 -37.1023 335.619 484.837 ]ct
clp
/1 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~a2c6@a2l?CaN2HDaN2HDaN;QGaiVZHai_cKb0%lLb0.uObKJ)PbKJ)PbKJ)PbKJ)PbKJ)PbKS2Sbfn;T
bfn>Vc-=MXc-=MXc-=PZcHa_\cHa_\cHab^cd0q`cd0q`cd0q`cd0tbd*U.dd*U.dd*U.dd*U.dd*U.d
d*U.edF$@hdF$@hdF$@hdF$@idaHRldaHRme'ldpe'ldpe'ldpe'ldpe'ldpe'ldqeC<!teC<!teC<!t
eC<!teC<!teC<!teC<!teC<!teC<!te^`4#e^`4#e^`4#e^`4#e^`4#e^`4#e^`4#e^`4#e^`4#e^`4#
~>
<~5s[e&5sdn*6UO4.6UO4.6UX=16psF26q'O577BX677Ka:7n?0B8P)KF8P)KF8P2TI8kM]J8kVfN9MA,R
9MA/T9heAX:/4PZ:/4S\:f'tb:f'tb:f("d;GpCj;GpCj;GpCj;GpFl<)cgr<)cgr<)cdp;c?Xp<E3%!
<E3%"<`W7%<`W7%<`W7%<`W7&='/R,=BJ[.=]nm1=]nm2>$G38>?b<9>?b<9>?kE<>[1N<>?b<9>?b<9
>?b<9>?b<9>[1Q??!U`A?!U`A?!U`A?!UcC?=$rE?=$rE?=.&I?smAM?smAM?smAM?smDO@:<SQ@:<SQ
~>
<~3]];_3]fDb4$5Vf4?Yhk5!D.o5!D.p5<h@s5<qJ"5s[e&5sR\#5X.It5<qJ!5X7S"5X7S#5sdn)6:+"*
6:+"*6:+"*6:+"*6UO706psF26psF26psF26psF26psI477BX677BX677BX677B[87n6'>7n6*@84Z9B
84Z9C8P)KF8P)KF8P)KG8kM]J8kM]I8P)KG8kM]J8kM]J8kM]J8kM]K92&#Q9MA,R9MJ5U9he>W:/4PZ
:/4PZ:/4PZ:/4PZ9he>V9he>V:/4S\:JXb^:/4PZ:JXb^:JXb^:/4PZ:/4PZ:JXe`:f'q`:/4PZ:/4PZ
~>
<~zzzzzzzzzzz!!**$!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E6'!WiE
)!WiE)!WiE)!WiE)!WiH+!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W."9\i1"9\i1"9\i1"9\i1"9\i
2"U,&5"U,&5"U,&5"U,&6"pP89"pP89"pP89"pP89"pP89"pP89"pP89"pP89#6tJ=#6tJ=#6tJ=#6tJ
=#RC\A#RC\A#RC\A#RC\A#RC\A#RC\A#RC\A~>
]
>>
0 0 1 0 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /1 /Gradient get_res exec grestore
}if
np
340.696 447.269 mo
341.19 445.452 340.653 442.99 338.342 442.99 cv
338.324 442.99 338.305 442.99 338.287 442.99 cv
313.276 442.984 li
309.951 442.984 307.246 440.279 307.246 436.954 cv
307.047 428.59 li
307.173 426.931 306.042 426.088 304.796 426.088 cv
304.42 426.088 304.033 426.165 303.667 426.319 cv
301.321 427.311 298.28 427.952 294.941 427.952 cv
291.164 427.952 287.006 427.131 283.052 425.072 cv
283.706 425.306 286.52 426.232 290.209 426.232 cv
290.21 426.232 290.211 426.232 290.212 426.232 cv
290.212 426.232 li
290.212 426.232 li
290.214 426.232 290.215 426.232 290.216 426.232 cv
292.93 426.232 296.116 425.73 299.264 424.084 cv
299.264 424.084 li
299.264 424.084 li
307.114 419.967 308.472 410.659 308.471 403.07 cv
308.471 401.643 308.423 400.278 308.361 399.019 cv
312.775 399.011 li
313.302 399.011 313.765 398.74 314.043 398.327 cv
314.135 398.342 li
314.684 397.694 315.495 397.274 316.406 397.274 cv
338.758 397.274 li
338.705 438.312 li
338.704 438.741 li
338.703 440.123 li
338.703 440.123 li
338.703 440.123 li
338.703 440.123 li
339.318 440.169 339.913 440.427 340.425 440.805 cv
340.863 441.14 341.246 441.561 341.513 441.974 cv
341.648 442.188 341.758 442.408 341.839 442.629 cv
341.895 442.806 li
341.895 442.806 341.957 443.085 341.999 443.508 cv
341.999 444.686 li
341.999 445.341 341.794 445.953 341.437 446.477 cv
341.203 446.787 340.924 447.058 340.696 447.269 cv
.252415 .199252 .203738 0 cmyk
f
341.437 446.477 mo
341.794 445.953 341.999 445.341 341.999 444.686 cv
341.999 443.508 li
342.056 444.077 342.077 444.907 341.862 445.671 cv
341.782 445.957 341.623 446.229 341.437 446.477 cv
341.839 442.629 mo
341.758 442.408 341.648 442.188 341.513 441.974 cv
341.657 442.195 341.767 442.415 341.836 442.618 cv
341.839 442.629 li
340.425 440.805 mo
339.913 440.427 339.318 440.169 338.703 440.123 cv
338.706 440.123 338.709 440.123 338.712 440.123 cv
339.296 440.123 339.901 440.403 340.425 440.805 cv
338.703 440.123 mo
338.703 440.123 li
338.704 438.741 li
338.705 438.312 li
338.703 440.123 li
290.212 426.232 mo
290.212 426.232 li
290.211 426.232 290.21 426.232 290.209 426.232 cv
286.52 426.232 283.706 425.306 283.052 425.072 cv
282.876 424.981 282.701 424.887 282.526 424.791 cv
283.944 425.196 287.098 425.973 290.713 425.972 cv
293.484 425.972 296.527 425.516 299.264 424.084 cv
296.116 425.73 292.93 426.232 290.216 426.232 cv
290.215 426.232 290.214 426.232 290.212 426.232 cv
299.264 424.084 mo
308.589 419.193 308.753 406.978 308.361 399.019 cv
308.361 399.019 li
308.423 400.278 308.471 401.643 308.471 403.07 cv
308.472 410.659 307.114 419.967 299.264 424.084 cv
.749721 .679194 .670497 .901457 cmyk
f
342.647 432.036 mo
342.647 431.53 li
342.647 430.897 342.134 430.385 341.508 430.385 cv
327.455 430.385 li
326.828 430.385 326.315 430.897 326.315 431.53 cv
326.315 432.036 li
326.315 432.662 326.828 433.175 327.455 433.175 cv
341.508 433.175 li
342.134 433.175 342.647 432.662 342.647 432.036 cv
cp
345.189 428.818 mo
345.189 434.086 li
345.189 435.73 343.85 437.069 342.205 437.069 cv
316.406 437.069 li
314.762 437.069 313.423 435.73 313.423 434.086 cv
313.423 428.818 li
313.423 427.174 314.762 425.835 316.406 425.835 cv
342.205 425.835 li
343.85 425.835 345.189 427.174 345.189 428.818 cv
cp
.725795 .131594 .140139 0 cmyk
f
342.291 417.428 mo
342.291 416.915 li
342.291 416.289 341.778 415.776 341.151 415.776 cv
327.099 415.776 li
326.473 415.776 325.96 416.289 325.96 416.915 cv
325.96 417.428 li
325.96 418.055 326.473 418.567 327.099 418.567 cv
341.151 418.567 li
341.778 418.567 342.291 418.055 342.291 417.428 cv
cp
345.189 414.537 mo
345.189 419.806 li
345.189 421.45 343.85 422.788 342.205 422.788 cv
316.406 422.788 li
314.762 422.788 313.423 421.45 313.423 419.806 cv
313.423 414.537 li
313.423 412.894 314.762 411.555 316.406 411.555 cv
342.205 411.555 li
343.85 411.555 345.189 412.894 345.189 414.537 cv
cp
f
342.291 402.877 mo
342.291 402.364 li
342.291 401.737 341.778 401.225 341.151 401.225 cv
327.099 401.225 li
326.473 401.225 325.96 401.737 325.96 402.364 cv
325.96 402.877 li
325.96 403.503 326.473 404.016 327.099 404.016 cv
341.151 404.016 li
341.778 404.016 342.291 403.503 342.291 402.877 cv
cp
345.189 400.264 mo
345.189 405.525 li
345.189 407.169 343.85 408.508 342.205 408.508 cv
316.406 408.508 li
314.762 408.508 313.423 407.169 313.423 405.525 cv
313.423 400.264 li
313.423 398.612 314.762 397.274 316.406 397.274 cv
342.205 397.274 li
343.85 397.274 345.189 398.612 345.189 400.264 cv
cp
f
314.854 406.749 mo
314.854 401.488 li
314.854 399.837 316.192 398.498 317.837 398.498 cv
343.636 398.498 li
344.028 398.498 344.402 398.579 344.746 398.718 cv
344.223 397.855 343.284 397.274 342.205 397.274 cv
316.406 397.274 li
314.762 397.274 313.423 398.612 313.423 400.264 cv
313.423 405.525 li
313.423 406.776 314.2 407.846 315.295 408.288 cv
315.021 407.837 314.854 407.314 314.854 406.749 cv
cp
0 0 0 0 cmyk
f
314.854 421.03 mo
314.854 415.77 li
314.854 414.117 316.192 412.779 317.837 412.779 cv
343.636 412.779 li
344.028 412.779 344.402 412.86 344.746 412.999 cv
344.223 412.137 343.284 411.555 342.205 411.555 cv
316.406 411.555 li
314.762 411.555 313.423 412.894 313.423 414.545 cv
313.423 419.806 li
313.423 421.057 314.2 422.127 315.295 422.568 cv
315.021 422.118 314.854 421.595 314.854 421.03 cv
cp
f
314.854 435.311 mo
314.854 430.05 li
314.854 428.398 316.192 427.06 317.837 427.06 cv
343.636 427.06 li
344.028 427.06 344.402 427.141 344.746 427.279 cv
344.223 426.417 343.284 425.835 342.205 425.835 cv
316.406 425.835 li
314.762 425.835 313.423 427.174 313.423 428.825 cv
313.423 434.086 li
313.423 435.338 314.2 436.407 315.295 436.85 cv
315.021 436.398 314.854 435.876 314.854 435.311 cv
cp
f
345.189 405.525 mo
345.189 400.264 li
345.189 398.612 343.85 397.274 342.205 397.274 cv
316.406 397.274 li
314.762 397.274 313.423 398.612 313.423 400.264 cv
313.423 405.525 li
313.423 407.169 314.762 408.508 316.406 408.508 cv
342.205 408.508 li
343.85 408.508 345.189 407.169 345.189 405.525 cv
cp
345.189 419.806 mo
345.189 414.537 li
345.189 412.894 343.85 411.555 342.205 411.555 cv
316.406 411.555 li
314.762 411.555 313.423 412.894 313.423 414.537 cv
313.423 419.806 li
313.423 421.45 314.762 422.788 316.406 422.788 cv
342.205 422.788 li
343.85 422.788 345.189 421.45 345.189 419.806 cv
cp
345.189 434.086 mo
345.189 428.818 li
345.189 427.174 343.85 425.835 342.205 425.835 cv
316.406 425.835 li
314.762 425.835 313.423 427.174 313.423 428.818 cv
313.423 434.086 li
313.423 435.73 314.762 437.069 316.153 437.069 cv
341.953 437.069 li
343.85 437.069 345.189 435.73 345.189 434.086 cv
cp
348.235 428.818 mo
348.235 434.086 li
348.235 437.411 345.53 440.116 342.205 440.116 cv
331.697 440.116 li
331.697 447.008 li
332.666 447.527 333.335 448.538 333.335 449.713 cv
333.335 451.421 331.954 452.802 330.245 452.802 cv
328.544 452.802 327.163 451.421 327.163 449.713 cv
327.163 448.595 327.761 447.627 328.65 447.086 cv
328.65 440.116 li
316.406 440.116 li
313.081 440.116 310.376 437.411 310.376 434.086 cv
310.376 428.818 li
310.376 427.024 311.166 425.415 312.412 424.311 cv
311.166 423.209 310.376 421.6 310.376 419.806 cv
310.376 414.537 li
310.376 412.743 311.166 411.135 312.412 410.031 cv
311.166 408.928 310.376 407.319 310.376 405.525 cv
310.376 400.264 li
310.376 396.933 313.081 394.228 316.406 394.228 cv
342.205 394.228 li
345.53 394.228 348.235 396.933 348.235 400.264 cv
348.235 405.525 li
348.235 407.319 347.445 408.928 346.199 410.031 cv
347.445 411.135 348.235 412.743 348.235 414.537 cv
348.235 419.806 li
348.235 421.6 347.445 423.209 346.199 424.311 cv
347.445 425.415 348.235 427.024 348.235 428.818 cv
cp
.749721 .679194 .670497 .901457 cmyk
f
343.181 432.091 mo
343.181 432.596 li
343.181 433.223 342.668 433.735 342.042 433.735 cv
327.988 433.735 li
327.362 433.735 326.85 433.223 326.85 432.596 cv
326.85 432.091 li
326.85 431.457 327.362 430.944 327.988 430.944 cv
342.042 430.944 li
342.668 430.944 343.181 431.457 343.181 432.091 cv
cp
0 0 0 0 cmyk
f
342.824 417.476 mo
342.824 417.988 li
342.824 418.614 342.313 419.127 341.686 419.127 cv
327.633 419.127 li
327.006 419.127 326.494 418.614 326.494 417.988 cv
326.494 417.476 li
326.494 416.849 327.006 416.336 327.633 416.336 cv
341.686 416.336 li
342.313 416.336 342.824 416.849 342.824 417.476 cv
cp
f
342.824 402.924 mo
342.824 403.436 li
342.824 404.063 342.313 404.576 341.686 404.576 cv
327.633 404.576 li
327.006 404.576 326.494 404.063 326.494 403.436 cv
326.494 402.924 li
326.494 402.298 327.006 401.785 327.633 401.785 cv
341.686 401.785 li
342.313 401.785 342.824 402.298 342.824 402.924 cv
cp
f
342.647 431.53 mo
342.647 432.036 li
342.647 432.662 342.134 433.175 341.508 433.175 cv
327.455 433.175 li
326.828 433.175 326.315 432.662 326.315 432.036 cv
326.315 431.53 li
326.315 430.897 326.828 430.385 327.455 430.385 cv
341.508 430.385 li
342.134 430.385 342.647 430.897 342.647 431.53 cv
cp
.749721 .679194 .670497 .901457 cmyk
f
342.291 416.915 mo
342.291 417.428 li
342.291 418.055 341.778 418.567 341.151 418.567 cv
327.099 418.567 li
326.473 418.567 325.96 418.055 325.96 417.428 cv
325.96 416.915 li
325.96 416.289 326.473 415.776 327.099 415.776 cv
341.151 415.776 li
341.778 415.776 342.291 416.289 342.291 416.915 cv
cp
f
342.291 402.364 mo
342.291 402.877 li
342.291 403.503 341.778 404.016 341.151 404.016 cv
327.099 404.016 li
326.473 404.016 325.96 403.503 325.96 402.877 cv
325.96 402.364 li
325.96 401.737 326.473 401.225 327.099 401.225 cv
341.151 401.225 li
341.778 401.225 342.291 401.737 342.291 402.364 cv
cp
f
322.795 401.543 mo
323.621 401.543 324.29 402.212 324.29 403.038 cv
324.29 403.864 323.621 404.533 322.795 404.533 cv
321.97 404.533 321.301 403.864 321.301 403.038 cv
321.301 402.212 321.97 401.543 322.795 401.543 cv
cp
0 0 0 0 cmyk
f
322.795 416.095 mo
323.621 416.095 324.29 416.764 324.29 417.589 cv
324.29 418.415 323.621 419.084 322.795 419.084 cv
321.97 419.084 321.301 418.415 321.301 417.589 cv
321.301 416.764 321.97 416.095 322.795 416.095 cv
cp
f
320.81 430.745 mo
321.635 430.745 322.304 431.414 322.304 432.24 cv
322.304 433.066 321.635 433.735 320.81 433.735 cv
319.983 433.735 319.314 433.066 319.314 432.24 cv
319.314 431.414 319.983 430.745 320.81 430.745 cv
cp
f
318.445 401.543 mo
319.272 401.543 319.94 402.212 319.94 403.038 cv
319.94 403.864 319.272 404.533 318.445 404.533 cv
317.62 404.533 316.95 403.864 316.95 403.038 cv
316.95 402.212 317.62 401.543 318.445 401.543 cv
cp
f
318.445 416.095 mo
319.272 416.095 319.94 416.764 319.94 417.589 cv
319.94 418.415 319.272 419.084 318.445 419.084 cv
317.62 419.084 316.95 418.415 316.95 417.589 cv
316.95 416.764 317.62 416.095 318.445 416.095 cv
cp
f
320.243 430.327 mo
321.069 430.327 321.738 430.997 321.738 431.822 cv
321.738 432.648 321.069 433.317 320.243 433.317 cv
319.417 433.317 318.748 432.648 318.748 431.822 cv
318.748 430.997 319.417 430.327 320.243 430.327 cv
cp
.749721 .679194 .670497 .901457 cmyk
f
322.23 401.125 mo
323.056 401.125 323.725 401.795 323.725 402.62 cv
323.725 403.446 323.056 404.115 322.23 404.115 cv
321.403 404.115 320.734 403.446 320.734 402.62 cv
320.734 401.795 321.403 401.125 322.23 401.125 cv
cp
f
322.23 415.677 mo
323.056 415.677 323.725 416.346 323.725 417.172 cv
323.725 417.997 323.056 418.667 322.23 418.667 cv
321.403 418.667 320.734 417.997 320.734 417.172 cv
320.734 416.346 321.403 415.677 322.23 415.677 cv
cp
f
317.88 401.125 mo
318.705 401.125 319.375 401.795 319.375 402.62 cv
319.375 403.446 318.705 404.115 317.88 404.115 cv
317.054 404.115 316.385 403.446 316.385 402.62 cv
316.385 401.795 317.054 401.125 317.88 401.125 cv
cp
f
317.88 415.677 mo
318.705 415.677 319.375 416.346 319.375 417.172 cv
319.375 417.997 318.705 418.667 317.88 418.667 cv
317.054 418.667 316.385 417.997 316.385 417.172 cv
316.385 416.346 317.054 415.677 317.88 415.677 cv
cp
f
132.7 369.692 mo
132.7 443.652 li
132.7 459.873 119.55 473.022 103.33 473.022 cv
29.3702 473.022 li
13.1499 473.022 0 459.873 0 443.652 cv
0 369.692 li
0 353.473 13.1499 340.323 29.3702 340.323 cv
103.33 340.323 li
119.55 340.323 132.7 353.473 132.7 369.692 cv
.725795 .131594 .140139 0 cmyk
f
37.9497 456.4 mo
37.9497 458.534 li
26.3726 458.534 li
26.3726 456.847 li
34.3623 447.093 li
26.5083 447.093 li
26.5083 444.959 li
37.6978 444.959 li
37.6978 446.646 li
29.708 456.4 li
37.9497 456.4 li
cp
0 0 0 0 cmyk
f
45.3853 454.817 mo
45.3853 453.57 li
45.3853 452.086 44.587 451.375 43.3897 451.375 cv
42.1797 451.375 41.3941 452.086 41.3941 453.57 cv
41.3941 454.817 li
45.3853 454.817 li
cp
47.4058 453.757 mo
47.4058 458.534 li
45.3853 458.534 li
45.3853 456.438 li
41.3941 456.438 li
41.3941 458.534 li
39.3985 458.534 li
39.3985 453.757 li
39.3985 451.101 41.0074 449.653 43.4019 449.653 cv
45.7969 449.653 47.4058 451.101 47.4058 453.757 cv
cp
f
57.3316 453.42 mo
57.3316 458.534 li
55.3111 458.534 li
55.3111 453.482 li
55.3111 452.049 54.5874 451.375 53.4527 451.375 cv
52.2803 451.375 51.4195 452.086 51.4195 453.62 cv
51.4195 458.534 li
49.399 458.534 li
49.399 449.803 li
51.357 449.803 li
51.357 450.863 li
51.9556 450.053 52.8789 449.653 54.0259 449.653 cv
56.0967 449.653 57.3316 450.988 57.3316 453.42 cv
cp
f
68.3785 452.971 mo
68.3785 452.011 67.7549 451.449 66.5205 451.449 cv
64.8736 451.449 li
64.8736 454.48 li
66.5205 454.48 li
67.7549 454.48 68.3785 453.919 68.3785 452.971 cv
cp
70.4239 452.971 mo
70.4239 454.917 68.9649 456.127 66.6324 456.127 cv
64.8736 456.127 li
64.8736 458.534 li
62.8531 458.534 li
62.8531 449.803 li
66.6324 449.803 li
68.9649 449.803 70.4239 451.013 70.4239 452.971 cv
cp
.749721 .679194 .670497 .901457 cmyk
f
75.5235 451.449 mo
73.877 451.449 li
73.877 454.493 li
75.5235 454.493 li
76.7583 454.493 77.3819 453.919 77.3819 452.971 cv
77.3819 452.011 76.7583 451.449 75.5235 451.449 cv
cp
77.4195 458.534 mo
75.7354 456.102 li
75.6358 456.102 li
73.877 456.102 li
73.877 458.534 li
71.8565 458.534 li
71.8565 449.803 li
75.6358 449.803 li
77.9678 449.803 79.4278 451.013 79.4278 452.971 cv
79.4278 454.281 78.7662 455.241 77.6314 455.728 cv
79.5894 458.534 li
77.4195 458.534 li
cp
f
87.9815 454.169 mo
87.9815 452.51 86.8091 451.375 85.2495 451.375 cv
83.691 451.375 82.5186 452.51 82.5186 454.169 cv
82.5186 455.827 83.691 456.962 85.2495 456.962 cv
86.8091 456.962 87.9815 455.827 87.9815 454.169 cv
cp
80.4732 454.169 mo
80.4732 451.574 82.4937 449.653 85.2495 449.653 cv
87.9937 449.653 90.0269 451.561 90.0269 454.169 cv
90.0269 456.775 87.9937 458.684 85.2495 458.684 cv
82.4937 458.684 80.4732 456.763 80.4732 454.169 cv
cp
f
96.7344 458.534 mo
94.6275 455.503 li
92.5562 458.534 li
90.2369 458.534 li
93.4668 454.094 li
90.399 449.803 li
92.6934 449.803 li
94.7022 452.635 li
96.6729 449.803 li
98.8555 449.803 li
95.812 454.019 li
99.0674 458.534 li
96.7344 458.534 li
cp
f
107.721 449.803 mo
107.721 455.803 li
107.721 458.459 106.137 459.881 103.592 459.881 cv
102.07 459.881 100.836 459.432 99.9883 458.709 cv
100.773 457.212 li
101.56 457.848 102.507 458.172 103.543 458.172 cv
104.99 458.172 105.7 457.462 105.7 455.902 cv
105.7 455.366 li
105.114 456.09 104.266 456.438 103.231 456.438 cv
101.035 456.438 99.7881 455.154 99.7881 452.784 cv
99.7881 449.803 li
101.809 449.803 li
101.809 452.659 li
101.809 454.044 102.507 454.729 103.667 454.729 cv
104.852 454.729 105.7 454.069 105.7 452.522 cv
105.7 449.803 li
107.721 449.803 li
cp
f
109.128 419.455 mo
109.128 424.38 li
109.128 425.918 107.876 427.169 106.339 427.169 cv
103.07 427.169 li
103.066 428.731 li
103.065 430.024 li
104.675 430.144 106.146 431.828 106.146 433.139 cv
106.146 434.29 li
106.146 436.094 104.476 437.559 102.426 437.564 cv
102.412 437.564 li
102.226 437.564 92.9415 437.599 82.3921 437.625 cv
71.8365 437.651 60.0093 437.685 54.7384 437.685 cv
54.7315 437.685 li
51.1577 437.685 46.0728 436.992 42.1128 433.711 cv
35.8697 428.514 26.9981 428.973 23.2842 429.452 cv
23.2842 413.604 li
23.2842 404.751 28.522 398.563 36.3223 397.126 cv
44.2359 395.675 49.4404 393.079 51.79 389.425 cv
53.4004 386.909 55.5435 384.001 57.6133 381.186 cv
61.2007 376.3 64.9215 371.249 66.5654 367.401 cv
66.625 367.235 li
67.4903 364.207 69.0079 358.058 69.627 355.535 cv
73.1079 355.781 75.8834 358.483 76.1826 362.011 cv
76.622 367.122 76.582 371.408 76.0694 374.41 cv
75.8565 375.202 75.1977 376.54 74.4986 377.957 cv
73.4404 380.094 72.2359 382.523 71.7369 384.693 cv
71.504 385.698 71.6036 387.342 71.7369 389.618 cv
72.1557 396.613 72.8481 408.327 64.8682 412.507 cv
58.6719 415.748 52.003 413.272 51.9365 413.252 cv
51.2041 412.966 50.379 413.332 50.0992 414.064 cv
49.813 414.803 50.1792 415.621 50.9112 415.907 cv
51.231 416.027 58.8248 418.883 66.1924 415.029 cv
74.9116 410.457 75.0645 399.036 74.6983 391.595 cv
78.8247 391.588 li
79.3174 391.588 79.75 391.335 80.0098 390.949 cv
80.0963 390.963 li
80.6084 390.356 81.3672 389.964 82.2192 389.964 cv
106.339 389.964 li
107.876 389.964 109.128 391.216 109.128 392.76 cv
109.128 397.678 li
109.128 399.216 107.876 400.467 106.339 400.467 cv
106.299 400.467 li
106.552 401.432 106.718 402.396 106.825 403.361 cv
108.129 403.595 109.128 404.732 109.128 406.103 cv
109.128 411.029 li
109.128 412.514 107.297 413.718 105.833 413.805 cv
105.82 414.017 105.8 414.23 105.787 414.45 cv
105.74 415.176 106.353 415.921 106.293 416.666 cv
106.339 416.666 li
107.876 416.666 109.128 417.918 109.128 419.455 cv
.130831 .101167 .105867 0 cmyk
f
109.128 424.38 mo
109.128 419.455 li
109.128 417.918 107.876 416.666 106.339 416.666 cv
106.293 416.666 li
106.353 415.921 105.74 415.176 105.787 414.45 cv
105.8 414.23 105.82 414.017 105.833 413.805 cv
107.297 413.718 109.128 412.514 109.128 411.029 cv
109.128 406.103 li
109.128 404.732 108.129 403.595 106.825 403.361 cv
106.718 402.396 106.552 401.432 106.299 400.467 cv
106.339 400.467 li
107.876 400.467 109.128 399.216 109.128 397.678 cv
109.128 392.76 li
109.128 391.216 107.876 389.964 106.339 389.964 cv
82.2192 389.964 li
81.3672 389.964 80.6084 390.356 80.0963 390.963 cv
80.0098 390.949 li
79.75 391.335 79.3174 391.588 78.8247 391.588 cv
74.6983 391.595 li
75.0645 399.036 74.9116 410.457 66.1924 415.029 cv
58.8248 418.883 51.231 416.027 50.9112 415.907 cv
50.1792 415.621 49.813 414.803 50.0992 414.064 cv
50.379 413.332 51.2041 412.966 51.9365 413.252 cv
52.003 413.272 58.6719 415.748 64.8682 412.507 cv
72.8481 408.327 72.1557 396.613 71.7369 389.618 cv
71.6036 387.342 71.504 385.698 71.7369 384.693 cv
72.2359 382.523 73.4404 380.094 74.4986 377.957 cv
75.1977 376.54 75.8565 375.202 76.0694 374.41 cv
76.582 371.408 76.622 367.122 76.1826 362.011 cv
75.8834 358.483 73.1079 355.781 69.627 355.535 cv
69.0079 358.058 67.4903 364.207 66.625 367.235 cv
66.5654 367.401 li
64.9215 371.249 61.2007 376.3 57.6133 381.186 cv
55.5435 384.001 53.4004 386.909 51.79 389.425 cv
49.4404 393.079 44.2359 395.675 36.3223 397.126 cv
28.522 398.563 23.5132 404.397 23.2842 413.604 cv
23.2842 429.452 li
26.9981 428.973 35.8697 428.514 42.1128 433.711 cv
46.0728 436.992 51.1577 437.685 54.7315 437.685 cv
54.7384 437.685 li
60.0093 437.685 71.8365 437.651 82.3921 437.625 cv
92.9415 437.599 102.226 437.564 102.412 437.564 cv
102.426 437.564 li
104.476 437.559 106.146 436.094 106.146 434.29 cv
106.146 433.139 li
106.146 431.828 104.675 430.144 103.065 430.024 cv
103.066 428.731 li
103.07 427.169 li
106.339 427.169 li
107.876 427.169 109.128 425.918 109.128 424.38 cv
111.977 419.455 mo
111.977 424.38 li
111.977 426.976 110.212 429.159 107.816 429.811 cv
108.542 430.789 108.995 431.954 108.995 433.139 cv
108.995 434.29 li
108.995 437.665 106.04 440.413 102.412 440.413 cv
102.399 440.413 li
101.434 440.413 65.2007 440.533 54.7384 440.533 cv
54.7315 440.533 li
50.6851 440.533 44.9014 439.728 40.296 435.901 cv
33.4336 430.197 22.2726 432.493 22.1592 432.514 cv
21.7398 432.606 21.3008 432.5 20.9678 432.233 cv
20.6353 431.961 20.4356 431.555 20.4356 431.122 cv
20.4356 413.604 li
20.4356 403.921 26.7584 395.994 35.8033 394.33 cv
42.8184 393.039 47.5103 390.81 49.3873 387.888 cv
51.0576 385.299 53.2208 382.35 55.3174 379.502 cv
58.7847 374.776 62.3789 369.897 63.9166 366.363 cv
64.9878 362.59 67.1046 353.851 67.1309 353.758 cv
67.2842 353.119 67.8565 352.673 68.5152 352.673 cv
69.1211 352.673 li
74.3257 352.673 78.5786 356.58 79.0245 361.771 cv
79.4839 367.229 79.4306 371.661 78.8647 374.949 cv
78.8447 375.056 li
78.5718 376.134 77.8667 377.564 77.0479 379.216 cv
76.0561 381.219 74.938 383.488 74.5122 385.339 cv
74.3922 385.857 74.4522 387.216 74.5386 388.746 cv
78.2725 388.739 li
79.2906 387.741 80.6817 387.115 82.2192 387.115 cv
106.339 387.115 li
109.447 387.115 111.977 389.644 111.977 392.76 cv
111.977 397.678 li
111.977 399.355 111.238 400.859 110.073 401.891 cv
111.238 402.923 111.977 404.427 111.977 406.103 cv
111.977 411.029 li
111.977 412.706 111.238 414.21 110.073 415.242 cv
111.238 416.273 111.977 417.777 111.977 419.455 cv
.749721 .679194 .670497 .901457 cmyk
f
35.9122 400.95 mo
44.7491 399.461 51.2544 397.977 53.9327 393.93 cv
55.7686 391.144 57.5391 387.262 59.8916 384.147 cv
63.9693 378.744 68.1978 373.157 70.0938 368.883 cv
70.1631 368.697 li
71.0454 365.767 71.0005 355.636 69.5787 355.535 cv
68.96 358.058 67.4424 364.207 66.5772 367.235 cv
66.5171 367.401 li
64.8731 371.249 61.1529 376.3 57.5655 381.186 cv
55.4956 384.001 53.3526 386.909 51.7417 389.425 cv
49.3926 393.079 44.188 395.675 36.2745 397.126 cv
29.48 398.378 24.878 402.689 23.6128 410.18 cv
25.5157 403.145 30.4185 401.881 35.9122 400.95 cv
cp
0 0 0 0 cmyk
f
57.7311 417.038 mo
57.7303 417.038 57.7291 417.038 57.7283 417.038 cv
57.7291 417.038 57.7303 417.038 57.7311 417.038 cv
57.7311 417.038 li
57.7354 417.038 mo
60.242 417.037 63.1809 416.579 66.0889 415.083 cv
63.1805 416.579 60.2423 417.037 57.7354 417.038 cv
66.0986 415.078 mo
66.1098 415.072 66.1203 415.067 66.1316 415.061 cv
66.1203 415.067 66.1098 415.072 66.0986 415.078 cv
.784695 .260197 .230961 .00268559 cmyk
f
104.929 436.704 mo
105.391 435.005 104.889 432.704 102.726 432.704 cv
102.71 432.704 102.693 432.704 102.676 432.704 cv
79.293 432.699 li
76.1846 432.699 73.6558 430.17 73.6558 427.061 cv
73.4692 419.241 li
73.587 417.69 72.5293 416.902 71.3648 416.902 cv
71.0132 416.902 70.6518 416.974 70.3101 417.118 cv
68.1164 418.046 65.2725 418.645 62.1507 418.645 cv
58.6199 418.645 54.7345 417.878 51.0379 415.953 cv
51.6536 416.173 54.2826 417.037 57.7283 417.038 cv
57.7291 417.038 57.7303 417.038 57.7311 417.038 cv
57.7311 417.038 li
57.7311 417.038 li
57.7327 417.038 57.7338 417.038 57.7354 417.038 cv
60.2423 417.037 63.1805 416.579 66.0889 415.083 cv
66.0921 415.081 66.0954 415.08 66.0986 415.078 cv
66.1098 415.072 66.1203 415.067 66.1316 415.061 cv
66.1518 415.05 66.1722 415.04 66.1924 415.029 cv
66.1924 415.029 li
66.1924 415.029 li
73.5322 411.18 74.8018 402.478 74.8012 395.382 cv
74.8012 394.049 74.7562 392.772 74.6983 391.595 cv
78.8247 391.588 li
79.3174 391.588 79.75 391.335 80.0098 390.949 cv
80.0963 390.963 li
80.6084 390.356 81.3672 389.964 82.2192 389.964 cv
103.116 389.964 li
103.065 430.024 li
103.065 430.024 li
103.065 430.024 li
103.065 430.024 li
103.642 430.067 104.201 430.311 104.681 430.666 cv
105.089 430.98 105.445 431.373 105.694 431.758 cv
105.818 431.955 105.919 432.158 105.995 432.361 cv
106.048 432.532 li
106.048 432.532 106.107 432.793 106.146 433.189 cv
106.146 434.29 li
106.146 434.905 105.952 435.48 105.615 435.971 cv
105.398 436.259 105.139 436.51 104.929 436.704 cv
.252415 .199252 .203738 0 cmyk
f
105.615 435.971 mo
105.952 435.48 106.146 434.905 106.146 434.29 cv
106.146 433.189 li
106.199 433.721 106.218 434.497 106.018 435.211 cv
105.942 435.481 105.792 435.738 105.615 435.971 cv
105.995 432.361 mo
105.919 432.158 105.818 431.955 105.694 431.758 cv
105.827 431.964 105.93 432.168 105.993 432.356 cv
105.995 432.361 li
104.681 430.666 mo
104.201 430.311 103.642 430.067 103.065 430.024 cv
103.068 430.024 103.071 430.024 103.074 430.024 cv
103.621 430.024 104.189 430.288 104.681 430.666 cv
103.065 430.024 mo
103.065 430.024 li
57.7311 417.038 mo
57.7311 417.038 li
57.7303 417.038 57.7291 417.038 57.7283 417.038 cv
54.2826 417.037 51.6536 416.173 51.0379 415.953 cv
50.8734 415.868 50.7087 415.78 50.545 415.689 cv
51.8706 416.068 54.8194 416.795 58.1993 416.795 cv
60.7898 416.795 63.6342 416.367 66.1924 415.029 cv
66.1722 415.04 66.1518 415.05 66.1316 415.061 cv
66.1203 415.067 66.1098 415.072 66.0986 415.078 cv
66.0954 415.08 66.0921 415.081 66.0889 415.083 cv
63.1809 416.579 60.242 417.037 57.7354 417.038 cv
57.7338 417.038 57.7327 417.038 57.7311 417.038 cv
66.1924 415.029 mo
74.9112 410.457 75.0645 399.036 74.6983 391.595 cv
74.6983 391.595 li
74.7562 392.772 74.8012 394.049 74.8012 395.382 cv
74.8018 402.478 73.5322 411.18 66.1924 415.029 cv
.749721 .679194 .670497 .901457 cmyk
f
106.752 422.463 mo
106.752 421.991 li
106.752 421.398 106.272 420.919 105.687 420.919 cv
92.5489 420.919 li
91.9629 420.919 91.4839 421.398 91.4839 421.991 cv
91.4839 422.463 li
91.4839 423.049 91.9629 423.528 92.5489 423.528 cv
105.687 423.528 li
106.272 423.528 106.752 423.049 106.752 422.463 cv
cp
109.128 419.455 mo
109.128 424.38 li
109.128 425.918 107.877 427.169 106.339 427.169 cv
82.2193 427.169 li
80.6817 427.169 79.4307 425.918 79.4307 424.38 cv
79.4307 419.455 li
79.4307 417.918 80.6817 416.666 82.2193 416.666 cv
106.339 416.666 li
107.877 416.666 109.128 417.918 109.128 419.455 cv
cp
.725795 .131594 .140139 0 cmyk
f
106.419 408.806 mo
106.419 408.327 li
106.419 407.741 105.94 407.262 105.354 407.262 cv
92.2159 407.262 li
91.6304 407.262 91.1509 407.741 91.1509 408.327 cv
91.1509 408.806 li
91.1509 409.392 91.6304 409.871 92.2159 409.871 cv
105.354 409.871 li
105.94 409.871 106.419 409.392 106.419 408.806 cv
cp
109.128 406.103 mo
109.128 411.029 li
109.128 412.566 107.877 413.817 106.339 413.817 cv
82.2193 413.817 li
80.6817 413.817 79.4307 412.566 79.4307 411.029 cv
79.4307 406.103 li
79.4307 404.566 80.6817 403.315 82.2193 403.315 cv
106.339 403.315 li
107.877 403.315 109.128 404.566 109.128 406.103 cv
cp
f
106.419 395.202 mo
106.419 394.723 li
106.419 394.137 105.94 393.658 105.354 393.658 cv
92.2159 393.658 li
91.6304 393.658 91.1509 394.137 91.1509 394.723 cv
91.1509 395.202 li
91.1509 395.788 91.6304 396.267 92.2159 396.267 cv
105.354 396.267 li
105.94 396.267 106.419 395.788 106.419 395.202 cv
cp
109.128 392.76 mo
109.128 397.678 li
109.128 399.216 107.877 400.467 106.339 400.467 cv
82.2193 400.467 li
80.6817 400.467 79.4307 399.216 79.4307 397.678 cv
79.4307 392.76 li
79.4307 391.216 80.6817 389.964 82.2193 389.964 cv
106.339 389.964 li
107.877 389.964 109.128 391.216 109.128 392.76 cv
cp
f
80.7681 398.822 mo
80.7681 393.904 li
80.7681 392.36 82.0196 391.108 83.5567 391.108 cv
107.677 391.108 li
108.044 391.108 108.393 391.185 108.715 391.314 cv
108.225 390.508 107.348 389.964 106.339 389.964 cv
82.2193 389.964 li
80.6817 389.964 79.4307 391.216 79.4307 392.76 cv
79.4307 397.678 li
79.4307 398.848 80.1568 399.848 81.1802 400.261 cv
80.9239 399.84 80.7681 399.351 80.7681 398.822 cv
cp
0 0 0 0 cmyk
f
80.7681 412.174 mo
80.7681 407.255 li
80.7681 405.711 82.0196 404.46 83.5567 404.46 cv
107.677 404.46 li
108.044 404.46 108.393 404.535 108.715 404.665 cv
108.225 403.859 107.348 403.315 106.339 403.315 cv
82.2193 403.315 li
80.6817 403.315 79.4307 404.566 79.4307 406.11 cv
79.4307 411.029 li
79.4307 412.199 80.1568 413.199 81.1802 413.612 cv
80.9239 413.19 80.7681 412.702 80.7681 412.174 cv
cp
f
80.7681 425.525 mo
80.7681 420.606 li
80.7681 419.062 82.0196 417.811 83.5567 417.811 cv
107.677 417.811 li
108.044 417.811 108.393 417.887 108.715 418.017 cv
108.225 417.21 107.348 416.666 106.339 416.666 cv
82.2193 416.666 li
80.6817 416.666 79.4307 417.918 79.4307 419.462 cv
79.4307 424.38 li
79.4307 425.55 80.1568 426.55 81.1802 426.964 cv
80.9239 426.542 80.7681 426.053 80.7681 425.525 cv
cp
f
109.128 397.678 mo
109.128 392.76 li
109.128 391.216 107.877 389.964 106.339 389.964 cv
82.2193 389.964 li
80.6817 389.964 79.4307 391.216 79.4307 392.76 cv
79.4307 397.678 li
79.4307 399.216 80.6817 400.467 82.2193 400.467 cv
106.339 400.467 li
107.877 400.467 109.128 399.216 109.128 397.678 cv
cp
109.128 411.029 mo
109.128 406.103 li
109.128 404.566 107.877 403.315 106.339 403.315 cv
82.2193 403.315 li
80.6817 403.315 79.4307 404.566 79.4307 406.103 cv
79.4307 411.029 li
79.4307 412.566 80.6817 413.817 82.2193 413.817 cv
106.339 413.817 li
107.877 413.817 109.128 412.566 109.128 411.029 cv
cp
109.128 424.38 mo
109.128 419.455 li
109.128 417.918 107.877 416.666 106.339 416.666 cv
82.2193 416.666 li
80.6817 416.666 79.4307 417.918 79.4307 419.455 cv
79.4307 424.38 li
79.4307 425.918 80.6817 427.169 81.9834 427.169 cv
106.103 427.169 li
107.877 427.169 109.128 425.918 109.128 424.38 cv
cp
111.977 419.455 mo
111.977 424.38 li
111.977 427.488 109.447 430.018 106.339 430.018 cv
96.5157 430.018 li
96.5157 436.46 li
97.4204 436.946 98.0464 437.891 98.0464 438.989 cv
98.0464 440.587 96.7549 441.878 95.1578 441.878 cv
93.5669 441.878 92.2759 440.587 92.2759 438.989 cv
92.2759 437.944 92.835 437.039 93.667 436.533 cv
93.667 430.018 li
82.2193 430.018 li
79.1109 430.018 76.5821 427.488 76.5821 424.38 cv
76.5821 419.455 li
76.5821 417.777 77.3208 416.273 78.4854 415.242 cv
77.3208 414.21 76.5821 412.706 76.5821 411.029 cv
76.5821 406.103 li
76.5821 404.427 77.3208 402.923 78.4854 401.891 cv
77.3208 400.859 76.5821 399.355 76.5821 397.678 cv
76.5821 392.76 li
76.5821 389.645 79.1109 387.115 82.2193 387.115 cv
106.339 387.115 li
109.447 387.115 111.977 389.645 111.977 392.76 cv
111.977 397.678 li
111.977 399.355 111.238 400.859 110.073 401.891 cv
111.238 402.923 111.977 404.427 111.977 406.103 cv
111.977 411.029 li
111.977 412.706 111.238 414.21 110.073 415.242 cv
111.238 416.273 111.977 417.777 111.977 419.455 cv
cp
.749721 .679194 .670497 .901457 cmyk
f
107.251 422.515 mo
107.251 422.987 li
107.251 423.572 106.772 424.052 106.186 424.052 cv
93.0479 424.052 li
92.4624 424.052 91.9829 423.572 91.9829 422.987 cv
91.9829 422.515 li
91.9829 421.922 92.4624 421.442 93.0479 421.442 cv
106.186 421.442 li
106.772 421.442 107.251 421.922 107.251 422.515 cv
cp
0 0 0 0 cmyk
f
106.918 408.851 mo
106.918 409.33 li
106.918 409.915 106.439 410.395 105.853 410.395 cv
92.7149 410.395 li
92.1294 410.395 91.6504 409.915 91.6504 409.33 cv
91.6504 408.851 li
91.6504 408.265 92.1294 407.785 92.7149 407.785 cv
105.853 407.785 li
106.439 407.785 106.918 408.265 106.918 408.851 cv
cp
f
106.918 395.246 mo
106.918 395.726 li
106.918 396.311 106.439 396.79 105.853 396.79 cv
92.7149 396.79 li
92.1294 396.79 91.6504 396.311 91.6504 395.726 cv
91.6504 395.246 li
91.6504 394.661 92.1294 394.182 92.7149 394.182 cv
105.853 394.182 li
106.439 394.182 106.918 394.661 106.918 395.246 cv
cp
f
106.752 421.991 mo
106.752 422.463 li
106.752 423.049 106.272 423.528 105.687 423.528 cv
92.5489 423.528 li
91.9629 423.528 91.4839 423.049 91.4839 422.463 cv
91.4839 421.991 li
91.4839 421.398 91.9629 420.919 92.5489 420.919 cv
105.687 420.919 li
106.272 420.919 106.752 421.398 106.752 421.991 cv
cp
.749721 .679194 .670497 .901457 cmyk
f
106.419 408.327 mo
106.419 408.806 li
106.419 409.392 105.94 409.871 105.354 409.871 cv
92.2159 409.871 li
91.6304 409.871 91.1509 409.392 91.1509 408.806 cv
91.1509 408.327 li
91.1509 407.741 91.6304 407.262 92.2159 407.262 cv
105.354 407.262 li
105.94 407.262 106.419 407.741 106.419 408.327 cv
cp
f
106.419 394.723 mo
106.419 395.202 li
106.419 395.788 105.94 396.267 105.354 396.267 cv
92.2159 396.267 li
91.6304 396.267 91.1509 395.788 91.1509 395.202 cv
91.1509 394.723 li
91.1509 394.137 91.6304 393.658 92.2159 393.658 cv
105.354 393.658 li
105.94 393.658 106.419 394.137 106.419 394.723 cv
cp
f
88.1924 393.955 mo
88.9649 393.955 89.5904 394.581 89.5904 395.353 cv
89.5904 396.125 88.9649 396.751 88.1924 396.751 cv
87.4204 396.751 86.795 396.125 86.795 395.353 cv
86.795 394.581 87.4204 393.955 88.1924 393.955 cv
cp
0 0 0 0 cmyk
f
88.1924 407.56 mo
88.9649 407.56 89.5904 408.185 89.5904 408.957 cv
89.5904 409.728 88.9649 410.354 88.1924 410.354 cv
87.4204 410.354 86.795 409.728 86.795 408.957 cv
86.795 408.185 87.4204 407.56 88.1924 407.56 cv
cp
f
86.336 421.257 mo
87.1079 421.257 87.7334 421.882 87.7334 422.654 cv
87.7334 423.426 87.1079 424.052 86.336 424.052 cv
85.5635 424.052 84.938 423.426 84.938 422.654 cv
84.938 421.882 85.5635 421.257 86.336 421.257 cv
cp
f
84.126 393.955 mo
84.898 393.955 85.524 394.581 85.524 395.353 cv
85.524 396.125 84.898 396.751 84.126 396.751 cv
83.354 396.751 82.7286 396.125 82.7286 395.353 cv
82.7286 394.581 83.354 393.955 84.126 393.955 cv
cp
f
84.126 407.56 mo
84.898 407.56 85.524 408.185 85.524 408.957 cv
85.524 409.728 84.898 410.354 84.126 410.354 cv
83.354 410.354 82.7286 409.728 82.7286 408.957 cv
82.7286 408.185 83.354 407.56 84.126 407.56 cv
cp
f
85.8067 420.866 mo
86.5787 420.866 87.2041 421.491 87.2041 422.264 cv
87.2041 423.036 86.5787 423.661 85.8067 423.661 cv
85.0347 423.661 84.4087 423.036 84.4087 422.264 cv
84.4087 421.491 85.0347 420.866 85.8067 420.866 cv
cp
.749721 .679194 .670497 .901457 cmyk
f
87.6636 393.564 mo
88.4356 393.564 89.0611 394.19 89.0611 394.963 cv
89.0611 395.734 88.4356 396.36 87.6636 396.36 cv
86.8916 396.36 86.2657 395.734 86.2657 394.963 cv
86.2657 394.19 86.8916 393.564 87.6636 393.564 cv
cp
f
87.6636 407.169 mo
88.4356 407.169 89.0611 407.794 89.0611 408.566 cv
89.0611 409.339 88.4356 409.964 87.6636 409.964 cv
86.8916 409.964 86.2657 409.339 86.2657 408.566 cv
86.2657 407.794 86.8916 407.169 87.6636 407.169 cv
cp
f
83.5972 393.564 mo
84.3692 393.564 84.9947 394.19 84.9947 394.963 cv
84.9947 395.734 84.3692 396.36 83.5972 396.36 cv
82.8247 396.36 82.1993 395.734 82.1993 394.963 cv
82.1993 394.19 82.8247 393.564 83.5972 393.564 cv
cp
f
83.5972 407.169 mo
84.3692 407.169 84.9947 407.794 84.9947 408.566 cv
84.9947 409.339 84.3692 409.964 83.5972 409.964 cv
82.8247 409.964 82.1993 409.339 82.1993 408.566 cv
82.1993 407.794 82.8247 407.169 83.5972 407.169 cv
cp
f
280.049 152.17 mo
280.049 163.392 li
280.049 166.896 277.197 169.747 273.694 169.747 cv
266.246 169.747 li
266.236 173.308 li
266.232 176.253 li
269.903 176.526 273.255 180.363 273.255 183.35 cv
273.255 185.974 li
273.255 190.084 269.448 193.42 264.777 193.436 cv
264.747 193.436 li
264.322 193.436 243.166 193.511 219.129 193.572 cv
195.076 193.633 168.127 193.708 156.116 193.708 cv
156.101 193.708 li
147.958 193.708 136.371 192.131 127.348 184.655 cv
113.122 172.81 92.9068 173.857 84.4444 174.949 cv
84.4444 138.84 li
84.4444 118.666 96.3794 104.566 114.153 101.29 cv
132.185 97.9843 144.044 92.0698 149.398 83.7436 cv
153.068 78.0112 157.951 71.3838 162.668 64.9687 cv
170.842 53.8373 179.319 42.3266 183.065 33.5609 cv
183.126 33.4399 183.171 33.3183 183.202 33.1821 cv
185.174 26.2817 188.631 12.269 190.041 6.52095 cv
197.973 7.08247 204.297 13.2392 204.98 21.2773 cv
205.981 32.9243 205.89 42.6908 204.722 49.5302 cv
204.236 51.335 202.735 54.3832 201.143 57.6138 cv
198.731 62.4818 195.986 68.0171 194.849 72.9609 cv
194.318 75.2509 194.546 78.997 194.849 84.1835 cv
195.805 100.122 197.382 126.813 179.198 136.337 cv
165.079 143.723 149.883 138.081 149.732 138.036 cv
148.064 137.384 146.183 138.218 145.546 139.886 cv
144.894 141.57 145.728 143.435 147.396 144.087 cv
148.124 144.36 165.428 150.866 182.216 142.085 cv
202.083 131.666 202.432 105.643 201.598 88.6875 cv
211 88.6723 li
212.122 88.6723 213.108 88.0961 213.699 87.2168 cv
213.897 87.2471 li
215.064 85.8667 216.793 84.9722 218.734 84.9722 cv
273.694 84.9722 li
277.197 84.9722 280.049 87.8232 280.049 91.3418 cv
280.049 102.549 li
280.049 106.052 277.197 108.903 273.694 108.903 cv
273.604 108.903 li
274.18 111.102 274.559 113.301 274.802 115.5 cv
277.773 116.031 280.049 118.625 280.049 121.748 cv
280.049 132.971 li
280.049 136.352 275.878 139.098 272.542 139.295 cv
272.512 139.78 272.466 140.266 272.436 140.766 cv
272.329 142.419 273.725 144.118 273.588 145.816 cv
273.694 145.816 li
277.197 145.816 280.049 148.667 280.049 152.17 cv
.130831 .101167 .105867 0 cmyk
f
280.049 163.392 mo
280.049 152.17 li
280.049 148.667 277.197 145.816 273.694 145.816 cv
273.588 145.816 li
273.725 144.118 272.329 142.419 272.436 140.766 cv
272.466 140.266 272.512 139.78 272.542 139.295 cv
275.878 139.098 280.049 136.352 280.049 132.971 cv
280.049 121.748 li
280.049 118.625 277.773 116.031 274.802 115.5 cv
274.559 113.301 274.18 111.102 273.604 108.903 cv
273.694 108.903 li
277.197 108.903 280.049 106.052 280.049 102.549 cv
280.049 91.3418 li
280.049 87.8232 277.197 84.9722 273.694 84.9722 cv
218.734 84.9722 li
216.793 84.9722 215.064 85.8667 213.897 87.2471 cv
213.699 87.2168 li
213.108 88.0961 212.122 88.6723 211 88.6723 cv
201.598 88.6875 li
202.432 105.643 202.083 131.666 182.216 142.085 cv
165.428 150.866 148.124 144.36 147.396 144.087 cv
145.728 143.435 144.894 141.57 145.546 139.886 cv
146.183 138.218 148.064 137.384 149.732 138.036 cv
149.883 138.081 165.079 143.723 179.198 136.337 cv
197.382 126.813 195.805 100.122 194.849 84.1835 cv
194.546 78.997 194.318 75.2509 194.849 72.9609 cv
195.986 68.0171 198.731 62.4818 201.143 57.6138 cv
202.735 54.3832 204.236 51.335 204.722 49.5302 cv
205.89 42.6908 205.981 32.9243 204.98 21.2773 cv
204.297 13.2392 197.973 7.08247 190.041 6.52095 cv
188.631 12.269 185.174 26.2817 183.202 33.1821 cv
183.171 33.3183 183.126 33.4399 183.065 33.5609 cv
179.319 42.3266 170.842 53.8373 162.668 64.9687 cv
157.951 71.3838 153.068 78.0112 149.398 83.7436 cv
144.044 92.0698 132.185 97.9843 114.153 101.29 cv
96.3794 104.566 84.9664 117.86 84.4444 138.84 cv
84.4444 174.949 li
92.9068 173.857 113.122 172.81 127.348 184.655 cv
136.371 192.131 147.958 193.708 156.101 193.708 cv
156.116 193.708 li
168.127 193.708 195.076 193.633 219.129 193.572 cv
243.166 193.511 264.322 193.436 264.747 193.436 cv
264.777 193.436 li
269.448 193.42 273.255 190.084 273.255 185.974 cv
273.255 183.35 li
273.255 180.363 269.903 176.526 266.232 176.253 cv
266.236 173.308 li
266.246 169.747 li
273.694 169.747 li
277.197 169.747 280.049 166.896 280.049 163.392 cv
286.539 152.17 mo
286.539 163.392 li
286.539 169.307 282.521 174.282 277.061 175.768 cv
278.714 177.997 279.745 180.651 279.745 183.35 cv
279.745 185.974 li
279.745 193.663 273.012 199.926 264.747 199.926 cv
264.716 199.926 li
262.518 199.926 179.957 200.199 156.116 200.199 cv
156.101 200.199 li
146.88 200.199 133.702 198.364 123.208 189.644 cv
107.572 176.647 82.1392 181.879 81.8814 181.925 cv
80.9258 182.137 79.9248 181.894 79.1671 181.288 cv
78.4087 180.666 77.9536 179.741 77.9536 178.755 cv
77.9536 138.84 li
77.9536 116.774 92.3609 98.7119 112.971 94.9209 cv
128.955 91.9785 139.646 86.8979 143.923 80.2407 cv
147.73 74.3412 152.659 67.623 157.436 61.1318 cv
165.337 50.3647 173.526 39.248 177.029 31.1952 cv
179.471 22.5967 184.294 2.6845 184.355 2.47218 cv
184.703 1.01613 186.008 0 187.509 0 cv
188.889 0 li
200.748 0 210.439 8.9023 211.455 20.7314 cv
212.502 33.167 212.38 43.267 211.091 50.7588 cv
211.076 50.8501 211.061 50.9257 211.046 51.0014 cv
210.424 53.4584 208.816 56.7187 206.951 60.4799 cv
204.691 65.0448 202.144 70.2163 201.173 74.4321 cv
200.9 75.6152 201.036 78.7089 201.233 82.1967 cv
209.741 82.1816 li
212.062 79.9067 215.231 78.4814 218.734 78.4814 cv
273.694 78.4814 li
280.776 78.4814 286.539 84.2441 286.539 91.3418 cv
286.539 102.549 li
286.539 106.371 284.857 109.798 282.202 112.149 cv
284.857 114.499 286.539 117.927 286.539 121.748 cv
286.539 132.971 li
286.539 136.792 284.857 140.22 282.202 142.571 cv
284.857 144.921 286.539 148.349 286.539 152.17 cv
.749721 .679194 .670497 .901457 cmyk
f
113.219 110.005 mo
133.355 106.612 148.177 103.23 154.28 94.0088 cv
158.464 87.6596 162.498 78.8134 167.859 71.7182 cv
177.15 59.4067 186.785 46.6762 191.106 36.936 cv
191.175 36.8012 191.228 36.666 191.264 36.5141 cv
193.273 29.8354 193.171 6.75045 189.932 6.52096 cv
188.522 12.269 185.064 26.2817 183.092 33.1821 cv
183.062 33.3183 183.017 33.4399 182.956 33.561 cv
179.21 42.3266 170.732 53.8374 162.559 64.9687 cv
157.842 71.3838 152.959 78.0112 149.289 83.7436 cv
143.935 92.0698 132.076 97.9838 114.044 101.29 cv
98.563 104.144 88.0762 113.968 85.1934 131.035 cv
89.5298 115.006 100.701 112.126 113.219 110.005 cv
cp
0 0 0 0 cmyk
f
162.934 146.662 mo
162.933 146.662 162.932 146.662 162.931 146.662 cv
162.932 146.662 162.933 146.662 162.934 146.662 cv
162.934 146.662 li
162.939 146.662 mo
168.648 146.661 175.344 145.618 181.969 142.214 cv
175.343 145.619 168.649 146.661 162.939 146.662 cv
182.018 142.188 mo
182.019 142.188 182.019 142.188 182.02 142.187 cv
182.019 142.188 182.019 142.188 182.018 142.188 cv
182.023 142.186 mo
182.056 142.169 182.089 142.152 182.122 142.135 cv
182.089 142.152 182.056 142.169 182.023 142.186 cv
182.154 142.118 mo
182.175 142.107 182.196 142.096 182.216 142.085 cv
182.216 142.085 li
182.196 142.096 182.175 142.107 182.154 142.118 cv
.109468 .0814221 .0873426 0 cmyk
f
270.48 191.475 mo
271.533 187.604 270.388 182.359 265.462 182.359 cv
265.424 182.359 265.385 182.36 265.347 182.36 cv
212.066 182.348 li
204.984 182.348 199.222 176.585 199.222 169.503 cv
198.797 151.683 li
199.065 148.149 196.656 146.353 194.002 146.353 cv
193.201 146.353 192.377 146.517 191.598 146.847 cv
186.6 148.96 180.12 150.324 173.008 150.324 cv
164.964 150.324 156.111 148.578 147.689 144.194 cv
149.099 144.697 155.086 146.662 162.931 146.662 cv
162.932 146.662 162.933 146.662 162.934 146.662 cv
162.934 146.662 li
162.934 146.662 li
162.936 146.662 162.937 146.662 162.939 146.662 cv
168.649 146.661 175.343 145.619 181.969 142.214 cv
181.985 142.205 182.002 142.197 182.018 142.188 cv
182.019 142.188 182.019 142.188 182.02 142.187 cv
182.021 142.187 182.022 142.186 182.023 142.186 cv
182.056 142.169 182.089 142.152 182.122 142.135 cv
182.133 142.129 182.143 142.124 182.154 142.118 cv
182.175 142.107 182.196 142.096 182.216 142.085 cv
182.216 142.085 li
198.94 133.315 201.833 113.486 201.832 97.3177 cv
201.832 97.3177 li
201.832 94.2791 201.73 91.3698 201.598 88.6875 cv
211 88.6723 li
212.122 88.6723 213.108 88.0961 213.699 87.2168 cv
213.897 87.2471 li
215.064 85.8667 216.793 84.9722 218.734 84.9722 cv
266.35 84.9722 li
266.232 176.253 li
266.232 176.253 li
266.232 176.253 li
266.232 176.253 li
267.547 176.351 268.82 176.905 269.913 177.714 cv
270.859 178.44 271.682 179.352 272.251 180.244 cv
272.584 180.783 272.846 181.341 273.018 181.895 cv
273.024 181.921 273.028 181.945 273.031 181.967 cv
273.031 181.967 273.165 182.565 273.255 183.472 cv
273.255 185.974 li
273.255 187.371 272.815 188.679 272.051 189.797 cv
271.554 190.455 270.963 191.029 270.48 191.475 cv
.252415 .199252 .203738 0 cmyk
f
272.051 189.797 mo
272.815 188.679 273.255 187.371 273.255 185.974 cv
273.255 183.472 li
273.375 184.684 273.419 186.447 272.963 188.071 cv
272.791 188.684 272.451 189.267 272.051 189.797 cv
273.018 181.895 mo
272.846 181.341 272.584 180.783 272.251 180.244 cv
272.541 180.7 272.766 181.15 272.906 181.568 cv
272.957 181.691 272.997 181.803 273.018 181.895 cv
269.913 177.714 mo
268.82 176.905 267.547 176.351 266.232 176.253 cv
266.239 176.253 266.246 176.253 266.253 176.253 cv
267.5 176.253 268.793 176.853 269.913 177.714 cv
266.232 176.253 mo
266.232 176.253 li
162.934 146.662 mo
162.934 146.662 li
162.933 146.662 162.932 146.662 162.931 146.662 cv
155.086 146.662 149.099 144.697 147.689 144.194 cv
147.312 143.998 146.936 143.797 146.562 143.59 cv
149.582 144.453 156.301 146.108 164.001 146.108 cv
169.905 146.108 176.386 145.135 182.216 142.085 cv
182.196 142.096 182.175 142.107 182.154 142.118 cv
182.143 142.124 182.133 142.129 182.122 142.135 cv
182.089 142.152 182.056 142.169 182.023 142.186 cv
182.022 142.186 182.021 142.187 182.02 142.187 cv
182.019 142.188 182.019 142.188 182.018 142.188 cv
182.002 142.197 181.985 142.205 181.969 142.214 cv
175.344 145.618 168.648 146.661 162.939 146.662 cv
162.937 146.662 162.936 146.662 162.934 146.662 cv
201.832 97.3177 mo
201.832 94.2791 201.73 91.3698 201.598 88.6875 cv
201.598 88.6875 li
201.73 91.3698 201.832 94.2791 201.832 97.3177 cv
201.832 97.3177 li
.749721 .679194 .670497 .901457 cmyk
f
274.635 159.025 mo
274.635 157.948 li
274.635 156.599 273.543 155.507 272.208 155.507 cv
242.272 155.507 li
240.937 155.507 239.845 156.599 239.845 157.948 cv
239.845 159.025 li
239.845 160.36 240.937 161.452 242.272 161.452 cv
272.208 161.452 li
273.543 161.452 274.635 160.36 274.635 159.025 cv
cp
280.049 152.17 mo
280.049 163.393 li
280.049 166.896 277.197 169.747 273.694 169.747 cv
218.734 169.747 li
215.231 169.747 212.38 166.896 212.38 163.393 cv
212.38 152.17 li
212.38 148.667 215.231 145.816 218.734 145.816 cv
273.694 145.816 li
277.197 145.816 280.049 148.667 280.049 152.17 cv
cp
.725795 .131594 .140139 0 cmyk
f
273.876 127.906 mo
273.876 126.813 li
273.876 125.479 272.784 124.387 271.45 124.387 cv
241.513 124.387 li
240.179 124.387 239.087 125.479 239.087 126.813 cv
239.087 127.906 li
239.087 129.24 240.179 130.332 241.513 130.332 cv
271.45 130.332 li
272.784 130.332 273.876 129.24 273.876 127.906 cv
cp
280.049 121.748 mo
280.049 132.971 li
280.049 136.474 277.197 139.325 273.694 139.325 cv
218.734 139.325 li
215.231 139.325 212.38 136.474 212.38 132.971 cv
212.38 121.748 li
212.38 118.245 215.231 115.394 218.734 115.394 cv
273.694 115.394 li
277.197 115.394 280.049 118.245 280.049 121.748 cv
cp
f
273.876 96.9072 mo
273.876 95.8154 li
273.876 94.4809 272.784 93.3891 271.45 93.3891 cv
241.513 93.3891 li
240.179 93.3891 239.087 94.4809 239.087 95.8154 cv
239.087 96.9072 li
239.087 98.2421 240.179 99.3339 241.513 99.3339 cv
271.45 99.3339 li
272.784 99.3339 273.876 98.2421 273.876 96.9072 cv
cp
280.049 91.3418 mo
280.049 102.549 li
280.049 106.052 277.197 108.903 273.694 108.903 cv
218.734 108.903 li
215.231 108.903 212.38 106.052 212.38 102.549 cv
212.38 91.3418 li
212.38 87.8232 215.231 84.9721 218.734 84.9721 cv
273.694 84.9721 li
277.197 84.9721 280.049 87.8232 280.049 91.3418 cv
cp
f
215.428 105.157 mo
215.428 93.9502 li
215.428 90.4316 218.279 87.5805 221.782 87.5805 cv
276.742 87.5805 li
277.579 87.5805 278.374 87.7524 279.107 88.0483 cv
277.991 86.2109 275.992 84.9721 273.694 84.9721 cv
218.734 84.9721 li
215.231 84.9721 212.38 87.8232 212.38 91.3418 cv
212.38 102.549 li
212.38 105.214 214.034 107.493 216.367 108.435 cv
215.783 107.475 215.428 106.36 215.428 105.157 cv
cp
0 0 0 0 cmyk
f
215.428 135.579 mo
215.428 124.372 li
215.428 120.853 218.279 118.002 221.782 118.002 cv
276.742 118.002 li
277.579 118.002 278.374 118.174 279.107 118.47 cv
277.991 116.633 275.992 115.394 273.694 115.394 cv
218.734 115.394 li
215.231 115.394 212.38 118.245 212.38 121.764 cv
212.38 132.971 li
212.38 135.636 214.034 137.915 216.367 138.857 cv
215.783 137.897 215.428 136.783 215.428 135.579 cv
cp
f
215.428 166.001 mo
215.428 154.794 li
215.428 151.276 218.279 148.424 221.782 148.424 cv
276.742 148.424 li
277.579 148.424 278.374 148.596 279.107 148.892 cv
277.991 147.055 275.992 145.816 273.694 145.816 cv
218.734 145.816 li
215.231 145.816 212.38 148.667 212.38 152.186 cv
212.38 163.393 li
212.38 166.058 214.034 168.337 216.367 169.279 cv
215.783 168.319 215.428 167.205 215.428 166.001 cv
cp
f
280.049 102.549 mo
280.049 91.3418 li
280.049 87.8232 277.197 84.9721 273.694 84.9721 cv
218.734 84.9721 li
215.231 84.9721 212.38 87.8232 212.38 91.3418 cv
212.38 102.549 li
212.38 106.052 215.231 108.903 218.734 108.903 cv
273.694 108.903 li
277.197 108.903 280.049 106.052 280.049 102.549 cv
cp
280.049 132.971 mo
280.049 121.748 li
280.049 118.245 277.197 115.394 273.694 115.394 cv
218.734 115.394 li
215.231 115.394 212.38 118.245 212.38 121.748 cv
212.38 132.971 li
212.38 136.474 215.231 139.325 218.734 139.325 cv
273.694 139.325 li
277.197 139.325 280.049 136.474 280.049 132.971 cv
cp
280.049 163.393 mo
280.049 152.17 li
280.049 148.667 277.197 145.816 273.694 145.816 cv
218.734 145.816 li
215.231 145.816 212.38 148.667 212.38 152.17 cv
212.38 163.393 li
212.38 166.896 215.231 169.747 218.197 169.747 cv
273.156 169.747 li
277.197 169.747 280.049 166.896 280.049 163.393 cv
cp
286.539 152.17 mo
286.539 163.393 li
286.539 170.475 280.776 176.238 273.694 176.238 cv
251.31 176.238 li
251.31 190.918 li
253.372 192.025 254.798 194.179 254.798 196.681 cv
254.798 200.321 251.855 203.263 248.216 203.263 cv
244.592 203.263 241.649 200.321 241.649 196.681 cv
241.649 194.3 242.924 192.237 244.819 191.085 cv
244.819 176.238 li
218.734 176.238 li
211.652 176.238 205.89 170.475 205.89 163.393 cv
205.89 152.17 li
205.89 148.349 207.573 144.921 210.227 142.571 cv
207.573 140.22 205.89 136.792 205.89 132.971 cv
205.89 121.748 li
205.89 117.927 207.573 114.499 210.227 112.149 cv
207.573 109.798 205.89 106.371 205.89 102.549 cv
205.89 91.3418 li
205.89 84.2441 211.652 78.4814 218.734 78.4814 cv
273.694 78.4814 li
280.776 78.4814 286.539 84.2441 286.539 91.3418 cv
286.539 102.549 li
286.539 106.371 284.856 109.798 282.202 112.149 cv
284.856 114.499 286.539 117.927 286.539 121.748 cv
286.539 132.971 li
286.539 136.792 284.856 140.22 282.202 142.571 cv
284.856 144.921 286.539 148.349 286.539 152.17 cv
cp
.749721 .679194 .670497 .901457 cmyk
f
275.772 159.142 mo
275.772 160.218 li
275.772 161.553 274.68 162.644 273.346 162.644 cv
243.409 162.644 li
242.074 162.644 240.982 161.553 240.982 160.218 cv
240.982 159.142 li
240.982 157.791 242.074 156.7 243.409 156.7 cv
273.346 156.7 li
274.68 156.7 275.772 157.791 275.772 159.142 cv
cp
0 0 0 0 cmyk
f
275.014 128.007 mo
275.014 129.099 li
275.014 130.433 273.922 131.525 272.587 131.525 cv
242.65 131.525 li
241.316 131.525 240.224 130.433 240.224 129.099 cv
240.224 128.007 li
240.224 126.672 241.316 125.58 242.65 125.58 cv
272.587 125.58 li
273.922 125.58 275.014 126.672 275.014 128.007 cv
cp
f
275.014 97.0083 mo
275.014 98.1005 li
275.014 99.435 273.922 100.527 272.587 100.527 cv
242.65 100.527 li
241.316 100.527 240.224 99.435 240.224 98.1005 cv
240.224 97.0083 li
240.224 95.6738 241.316 94.582 242.65 94.582 cv
272.587 94.582 li
273.922 94.582 275.014 95.6738 275.014 97.0083 cv
cp
f
274.635 157.948 mo
274.635 159.025 li
274.635 160.36 273.543 161.452 272.208 161.452 cv
242.272 161.452 li
240.937 161.452 239.845 160.36 239.845 159.025 cv
239.845 157.948 li
239.845 156.599 240.937 155.507 242.272 155.507 cv
272.208 155.507 li
273.543 155.507 274.635 156.599 274.635 157.948 cv
cp
.749721 .679194 .670497 .901457 cmyk
f
273.876 126.813 mo
273.876 127.906 li
273.876 129.24 272.784 130.332 271.45 130.332 cv
241.513 130.332 li
240.179 130.332 239.087 129.24 239.087 127.906 cv
239.087 126.813 li
239.087 125.479 240.179 124.387 241.513 124.387 cv
271.45 124.387 li
272.784 124.387 273.876 125.479 273.876 126.813 cv
cp
f
273.876 95.8154 mo
273.876 96.9072 li
273.876 98.2421 272.784 99.3339 271.45 99.3339 cv
241.513 99.3339 li
240.179 99.3339 239.087 98.2421 239.087 96.9072 cv
239.087 95.8154 li
239.087 94.4809 240.179 93.3891 241.513 93.3891 cv
271.45 93.3891 li
272.784 93.3891 273.876 94.4809 273.876 95.8154 cv
cp
f
232.346 94.0664 mo
234.105 94.0664 235.53 95.4921 235.53 97.2509 cv
235.53 99.0102 234.105 100.436 232.346 100.436 cv
230.586 100.436 229.161 99.0102 229.161 97.2509 cv
229.161 95.4921 230.586 94.0664 232.346 94.0664 cv
cp
0 0 0 0 cmyk
f
232.346 125.064 mo
234.105 125.064 235.53 126.49 235.53 128.249 cv
235.53 130.009 234.105 131.434 232.346 131.434 cv
230.586 131.434 229.161 130.009 229.161 128.249 cv
229.161 126.49 230.586 125.064 232.346 125.064 cv
cp
f
228.114 156.275 mo
229.874 156.275 231.299 157.701 231.299 159.46 cv
231.299 161.219 229.874 162.644 228.114 162.644 cv
226.355 162.644 224.93 161.219 224.93 159.46 cv
224.93 157.701 226.355 156.275 228.114 156.275 cv
cp
f
223.079 94.0664 mo
224.839 94.0664 226.265 95.4921 226.265 97.2509 cv
226.265 99.0102 224.839 100.436 223.079 100.436 cv
221.32 100.436 219.895 99.0102 219.895 97.2509 cv
219.895 95.4921 221.32 94.0664 223.079 94.0664 cv
cp
f
223.079 125.064 mo
224.839 125.064 226.265 126.49 226.265 128.249 cv
226.265 130.009 224.839 131.434 223.079 131.434 cv
221.32 131.434 219.895 130.009 219.895 128.249 cv
219.895 126.49 221.32 125.064 223.079 125.064 cv
cp
f
226.909 155.385 mo
228.668 155.385 230.094 156.811 230.094 158.57 cv
230.094 160.33 228.668 161.755 226.909 161.755 cv
225.149 161.755 223.724 160.33 223.724 158.57 cv
223.724 156.811 225.149 155.385 226.909 155.385 cv
cp
.749721 .679194 .670497 .901457 cmyk
f
231.14 93.1767 mo
232.899 93.1767 234.324 94.602 234.324 96.3613 cv
234.324 98.1206 232.899 99.5463 231.14 99.5463 cv
229.381 99.5463 227.955 98.1206 227.955 96.3613 cv
227.955 94.602 229.381 93.1767 231.14 93.1767 cv
cp
f
231.14 124.175 mo
232.899 124.175 234.324 125.601 234.324 127.36 cv
234.324 129.119 232.899 130.544 231.14 130.544 cv
229.381 130.544 227.955 129.119 227.955 127.36 cv
227.955 125.601 229.381 124.175 231.14 124.175 cv
cp
f
221.874 93.1767 mo
223.633 93.1767 225.059 94.602 225.059 96.3613 cv
225.059 98.1206 223.633 99.5463 221.874 99.5463 cv
220.114 99.5463 218.689 98.1206 218.689 96.3613 cv
218.689 94.602 220.114 93.1767 221.874 93.1767 cv
cp
f
221.874 124.175 mo
223.633 124.175 225.059 125.601 225.059 127.36 cv
225.059 129.119 223.633 130.544 221.874 130.544 cv
220.114 130.544 218.689 129.119 218.689 127.36 cv
218.689 125.601 220.114 124.175 221.874 124.175 cv
cp
f
114.777 233.687 mo
114.777 238.382 li
89.3028 238.382 li
89.3028 234.669 li
106.883 213.205 li
89.6011 213.205 li
89.6011 208.511 li
114.223 208.511 li
114.223 212.224 li
96.6416 233.687 li
114.777 233.687 li
cp
.725795 .131594 .140139 0 cmyk
f
131.138 230.202 mo
131.138 227.458 li
131.138 224.192 129.381 222.628 126.747 222.628 cv
124.085 222.628 122.356 224.192 122.356 227.458 cv
122.356 230.202 li
131.138 230.202 li
cp
135.584 227.87 mo
135.584 238.382 li
131.138 238.382 li
131.138 233.771 li
122.356 233.771 li
122.356 238.382 li
117.964 238.382 li
117.964 227.87 li
117.964 222.024 121.505 218.841 126.774 218.841 cv
132.044 218.841 135.584 222.024 135.584 227.87 cv
cp
f
157.425 227.129 mo
157.425 238.382 li
152.979 238.382 li
152.979 227.267 li
152.979 224.11 151.387 222.628 148.89 222.628 cv
146.31 222.628 144.416 224.192 144.416 227.568 cv
144.416 238.382 li
139.97 238.382 li
139.97 219.17 li
144.279 219.17 li
144.279 221.503 li
145.596 219.719 147.627 218.841 150.152 218.841 cv
154.708 218.841 157.425 221.777 157.425 227.129 cv
cp
f
181.733 226.141 mo
181.733 224.027 180.361 222.792 177.645 222.792 cv
174.021 222.792 li
174.021 229.462 li
177.645 229.462 li
180.361 229.462 181.733 228.227 181.733 226.141 cv
cp
186.234 226.141 mo
186.234 230.423 183.023 233.085 177.891 233.085 cv
174.021 233.085 li
174.021 238.382 li
169.575 238.382 li
169.575 219.17 li
177.891 219.17 li
183.023 219.17 186.234 221.832 186.234 226.141 cv
cp
.749721 .679194 .670497 .901457 cmyk
f
197.455 222.792 mo
193.832 222.792 li
193.832 229.489 li
197.455 229.489 li
200.173 229.489 201.544 228.227 201.544 226.141 cv
201.544 224.027 200.173 222.792 197.455 222.792 cv
cp
201.627 238.382 mo
197.922 233.03 li
197.702 233.03 li
193.832 233.03 li
193.832 238.382 li
189.387 238.382 li
189.387 219.17 li
197.702 219.17 li
202.834 219.17 206.046 221.832 206.046 226.141 cv
206.046 229.023 204.591 231.137 202.094 232.206 cv
206.401 238.382 li
201.627 238.382 li
cp
f
224.868 228.775 mo
224.868 225.126 222.288 222.628 218.857 222.628 cv
215.427 222.628 212.847 225.126 212.847 228.775 cv
212.847 232.426 215.427 234.923 218.857 234.923 cv
222.288 234.923 224.868 232.426 224.868 228.775 cv
cp
208.347 228.775 mo
208.347 223.067 212.792 218.841 218.857 218.841 cv
224.896 218.841 229.369 223.04 229.369 228.775 cv
229.369 234.512 224.896 238.711 218.857 238.711 cv
212.792 238.711 208.347 234.484 208.347 228.775 cv
cp
f
244.129 238.382 mo
239.492 231.713 li
234.935 238.382 li
229.831 238.382 li
236.939 228.611 li
230.189 219.17 li
235.237 219.17 li
239.656 225.399 li
243.992 219.17 li
248.796 219.17 li
242.099 228.446 li
249.262 238.382 li
244.129 238.382 li
cp
f
268.304 219.17 mo
268.304 232.371 li
268.304 238.217 264.818 241.346 259.219 241.346 cv
255.87 241.346 253.154 240.357 251.288 238.766 cv
253.017 235.472 li
254.746 236.872 256.831 237.585 259.109 237.585 cv
262.293 237.585 263.857 236.021 263.857 232.591 cv
263.857 231.41 li
262.567 233.002 260.701 233.771 258.424 233.771 cv
253.593 233.771 250.849 230.943 250.849 225.729 cv
250.849 219.17 li
255.294 219.17 li
255.294 225.455 li
255.294 228.502 256.831 230.011 259.383 230.011 cv
261.991 230.011 263.857 228.557 263.857 225.153 cv
263.857 219.17 li
268.304 219.17 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 /1 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 16.0
%%AI8_CreatorVersion: 22.0.1
%%For: (Teneresa) ()
%%Title: (Zan_Proxy_Logo_Icons_vector.eps)
%%CreationDate: 7/13/2018 2:05 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KB6UAup[IeNY'%L3-2%PA@#7@SYskFb(P@T;6ns5ThK*$$5Pm5m=KnIZPb4C[=N@2@R6>oCmP>7e92_.93o$[#'`O(/E$C)W
%4?+CX$oj)B"qMUBs8A;'Ellj6BarK0`!Hd%P?p?g5kgAsO?\]loAY3]$u\lKmE(G1a]22OZ]^OcGX7Q<L=CEZA105sE.p#/YWOT:
%@n?/aHN<K-o>,%)j4ULV%N--,o4$o7:,J.JNpg4IL+QGb(l1EoSbG'?X#CZ)%^ZYZU[qG@56RnLX=T!a"/N.=9<.nd<-JP:p/6Gq
%7H!)38VQ\R!.D]!3Ue>Ri;p_*qbrLAEKVk.1+/#e*&GO-0HN"/!&T]@!b$!i'S\.FA)7cO=9A8Nc@nV/FD?,/K,ott7V3BQ#5eL?
%O9k^a(`)W;d@KUdB"%ie9F$-e]p'Td!6,!FE/2=S!tGONMc9*j8V'a3_P-4BMh,9NEU5n%_^3KJ=E2K%>*S@.%i1:Y@ERd*;Jj:W
%im!:C!KeWg(KMAZ(-3uWmT;<.jVc!LFPr)'.7Ae#H`RX/8`1tXN=eNkNWfi+M>>F`g$he"<6":'+l&g;i]*SB6i8(s!0AfuW](4)
%-,PCU0PDS"KIoFj[c$`ei/>o1)V?BQEJBCG+C?^#+=@ndlZ&\U-NoZa,k.c=j[?8XO<BE7KTm"#`#DVQ$d\fH]+:8PbNro^+<\@s
%Z:YleDn-3PB1AGV0SCYq_4O:AAg8Fj][3-S?2Qt>5SK@OPT"Y<GpRt[\.NQPn%Z#iCS>@*T7Dh[;4*=6UTX+\?Zs"*Zrf\P)mKV/
%U&ePB)!pH+,Kg#liW/o#G?AINJ6msL4*EGa+0]dt^Y8&Hm&r6nbI1tJ"HqFm<*JbK#AaQY[@na!D*TiN4bqG6+;bi57R+C!rLEhi
%kPd<m"eB!WTUa8c^9P=)<]-tol"REF1F#AZ1Mo$BhnTs2N9[-/#ft0_]%R;(4U,^gXXk"*:&rfj?)SUN%nnoDl:CNtQ(Nu+6Y_j,
%H<Nus4O<[gB&)S'L86ekqM'_InFP3i>b>M(?UL1<S[p*AqlhC9S2?b2;4jfh)<TX8>Q6=tXM.PcatJc),DAAJ<(m<n#ln"*\`Zo)
%s5.:ThmEb(\9L\Ll>=J-9fSFlc1+J'+!?m&+D3_T0SgX)^D3XF%g+A+M/2KT<642S2ZiN%Tg%FGG+kDBE"!s[6bUg)=en&6aSMXQ
%?k`;m[GUP"rr*9a,Y)UaQ4oYr#M`e,@)!S=Qm$DL^$-sJJUrP6Sd')#0I/`0s7Q$Y?fuq=Pmf$SE594f17cX^,FcQcJV/RTLE@Of
%<"L$[MFrTL&I&K2!]Qs?^GIo*WU/MlV6[(:)FFai%K[W!E!4N"6jK\PW,r=D$`1biK:X0X97QsF5J_nIUmM)[r[X#-+:,h["MmA:
%+bD&(&1*J/@t)9*s+5^B*s+sbT*-0+q(r"d!!``@#R&46&Gun>BQ,4o(Gc(W73EPf@"Uap&-)jT+9dc:35WKW3$:$*_+ZOM@_jT%
%,C>"NOF@fBP41+m;IgUb1cUXDTRok2,D1ftK)aelKu]\jclmq&!]5SH6%^Bckl=6)O&'I5r;f.o3MhL#K;6crWPT3H!!H+6!*#&9
%4pi9k_D%]=KoU6t$Rl6Y_?1$b.^['BZTf)L9-UANb!G)(UqneG5Ve^5*&B(Kci;s>#I-6RMZi17*eERLFINC<KoQ^*_AJ8m,WJ[m
%">euW_?2Y'rs0UO#a-i**ge"bl%+S/4r+hnaS?EI*J+%F<upQj>]h/E5`=iU4M,]GQB(U[O]ji0MZZd1qbAddfssMu1``G\i1PT;
%#(_R4JH956do\R;NXS`BW6!(7*JT';0SP0<(_24MDuh*bR9CF8AO@>SUdM,rrrT3mKFNZ$_?U"<&.it0*W[[N+X"?>*"E.;"\/b:
%BaU49.L?U3#mqfJ6KirL5Y:tSMaFF4+X*][dfZh'5m=JI2!ANW1dhDM$NQ;:!&Lii(>,WD0L89<_#P(h&3rSai=%"18HLRML]O'C
%1Vf*JJ<>JsJD:,2%H<,Z%g'!E6ekN5Odtte[)A"*iWnNMN]8fS8K&L7^mF,P0B"?u+Esb5'`ir`R1te2"j%>6)$(ADJ0,U85PX4c
%"&oPt_*Si4?18"'CRBb]G9B.Z6'sN\>W2Yg<WXOIU`g!V2NWWE2XA.'1k0#!8I>*P,(`cR#]K:o6'Uiu!=\^X;,2nAqd9j5rkTKQ
%i"AM5V@A+S)IS6_k+[4;V`i\AA:!2WB+AlnZA2r4`VOE]A61N[l@&9mL'[Qs?S5W8C`Rq"F)@:l1ZJ-LQ_F]]^I*GQ/p]e0+EFT@
%b^p\h%01*>A6*-mI?*cPlj,lg#%&E2jS;7>+b,7Z!OueJ,@PR/I!*g"W4*3-NSu6`W.2=;gt)OYNZUQ<%SYj:#>Imaja)>X#;n<Q
%I?C:[R.!*"pjUj@r2YI'J+lHbJ;PAIU?c]S\k(XSThYi09@3R1P0Q"#Ib\S)phoZ4NXi'3OBZ(Q&'ZHD'<sFRfhn6pbmWX9S_TSk
%^)ns!@_plrZl"YEMX8@d:p.j?XMF:_\<0US3KP`Z-;[$JY\L@3/XN.)73!#\h1UWd1u\+PZl.f9a<>`U17AV%D413sCQ-cY3fT,"
%a74!eheho:`\+$[lM#Jqmq$$;V/$m0_O)&U=V,]abQ@F@22<,bM<'gQK2DFhUb5?Z2OdVPl$=c+7F9oa"dLG]<3XlG/q9f9..Z*J
%!FM;_)PX-/mbim]V/h>[_C:a3Uf8sc9'*W."6)]I9&QMKPK`8^d8.=..@9qLjQNg#Vd/YSbFN[a;_E::jZY1CGi1+6Ek7&eRU"-*
%I"?*/*t\aLc[eb;aaRaqHCsF-s.#shAe#$AJ%sUK*,:9Yadk9cNC2$DkXl!-i;97L`D<j'eLtM9qhtSsbX@URAsCfBm]b_`*TGYt
%@hCeL1l6Nld,UQUHh:&/eDoJhQdG+lXLpt@N`am`Lpj).EZEQe<Q8j%_D>Z`hm"kE7sYAOrKb-Ng\U/-#pW#R5"4AgQ@70$_sea3
%WR+*FNW.DY:-=jEL$u[GipILu?c;22V^"pS0%4FuD+5U59Ah1er_$ce/Z;@Mo]:R1ck"BiJij\DmH2G"*N]%@a)i0M8&h68og)k_
%kYLO=).QVLDBtS@'ntFmXrI&5j"!j[c;=d/?Z&KoPD,$LT,H#C=ACJh?hW])ZQ+a4!Hbi*JQD;+4W"aoJ2<[G?OmVF_ko_\[2SDZ
%=Qtqo/NT53_"U>$,B@gSaNAhk@?8PeI_q9g]N>#`oAt<K?-$\,R?M^i-0?;<DuEA+pK6!gPZb936;AS5[%h!U^?0\<d9`>Dq>@Bt
%&3m;fd@t7AX*f#OF7Aif*Aec2,+nnZ6Q7I?i0,A.rm3Bhp!qYKiEdOc$H#S@-@/.+#.UkQm;R$"fe8Y(I]]GY3bULA-StCRa)AC.
%Ik9Fj`,Ql:\uW`r*afn,11LQ-`kI&pqFZg6l$:Y=AA%n#):2Ge9DTCQ>K<8]n`]]gT$mC4$@]po@!)prTe"-LI(EZT`-?U>s6uWJ
%Ds<,NO2XZU=G?Z'ch8II!$.!X3V!UdC-%7#WBN*VZ$`,(d5tq3e>Uu:fpAYb3[P>#:Z)"#qk?l%NKr4Ll[:g&c]9C90a`]N:?G2;
%F"JDAFYk.=%l),aD:4q2k*\+8hi(TJ`^f960Z362XF8'S^@!%$oMn]>1BTaQ+ZskQ0P!Fi3[T99,/%dVW2UeuNSD>TK7D%`.Bh.S
%->J<QhfOjsTrYbr-^Tm7^CM@\o^QV.%V!0Kne<*BW8bf:q%]WQ-Y$38pGL;[2e!XF/"/a.f7kq$ej7sjFC.FqKTV9m1"1#9L6F3q
%h+PY^!o=_r,)[Xe*L(\-*.4B[*kLL,qk?]<V3(pE0qY[7)ArGqk.=["Y\a>N7b$Z&'Z^B"dp5ffl</Fi_"L2%VIN_3Cen-b1kj\R
%VW]/!UM!d`"_qCTFEK3cm;b=mDe1T:kKJMqEC4#L`;QT[n-(^^o7Tjh;%=d9CO`1G.!g\0QL`!,Y=-bq%#:u&?ZII8l(rsO\J1n=
%Q'S0.frjl/etV@GTjr(*VmRol`oXQCjaT^kNmuuXetV@`$AZA3j\*O5mB<l471V,nibcEj=qpm!YSKZo&0ADcpekm)g0\PGMB65e
%`Prqq=qk7PETjG%<S*tP^X?:"4iA=uf)O#uRU]T$UMDDF@5[a=QH-[aSurf7Vi`sQbpeZc+T?%-p=Y'O[=9?jDl1pR0[2a[(_2NC
%H7DC^SUU:H@G-uoq=5nWR5rs.ce(,GACkq-i+1G7G3rhlNl%r16u_9&Y'mEkNJ3"2Z>(bfp><;nVdSmb"`#KdG-Yl_Bre,&&Sg`B
%If%JoU4WWa3[K,P'7_GfqRd_D-T0>gJs.+De7_EcJs[^[@l9uIFA:A=6l#(&U9XaBX+dS/^FWaRRIAB`4S*f2ZHS:hCmQ)T^T2Bh
%-.J;njKu';k>eb`)X:W)GPmrY87T.]c#3)IS'mfbV>2oHIDH@u^<f=t\/nh6?mcYN*=A5BnI%FPlt9-'Ga,uPGS#73#4O8Q^4ZH\
%i.Bq64QE`^%-03+^)U<ioX3Q?pHM2jpTm%bf8IY0AeDdAErM!?q"L!orR^4;%fR&USJlS5p:2a`a+=HbnB+/B:ApnMgSZ2cc)<]r
%/"iZi2pe"S;%Ej6g0<4/K*JGh5YEs/&"<bdp1gg%F/;Bm[-1bh!T.D<062)_aNAfka:W_gh')g7qo6rBQ)!o4Iq\Gm0B"1;E?aD+
%@s^%jJPK#;S`YDto=p&@s1=&G#7jOp:\2?hj.635]p.S7s*L474jF"Aek8d0^D_[E*p8#MoE])[#qW)4P!%"b*bYT<_!<;E3T&;U
%mqL)Adp>t.cfD[nM8Z9E&I;E,H=UjZNkNC7H53?\F//4Nk^?>$S`P.UTA?=5>d#d_!)FPO/#n65eJn2t2<ZaU'<qp#%)(]0%"@-C
%n'F5b<5$&.;pnCfWBtd8'f'(Gn5L_rQ,ud4Z;[1X$^\uLa9uLm<1-F:kbC;'AOfT/-*gD+Lq0)grPf.+.n<%:',<oIUcGW,Wh8ZG
%PsROSREQ1Z30CUT2n3D/B9<"R6;e%K/.[3oXIlJ"pKXReF/TXIJg'&Yf;>@/7&)Su7?:C6oq^b\[LIg=1%XiNKPnAY7dIPMbsgpE
%K3<+W;&*<MAUhEm.ujK7eK\AjGq'p'NJs8Hm.K%m6Ska?_TSqJE[n_l$88<oMf:/YS-gqL6amHH/5"l4>(o98QW)l)O>G6^iT1`,
%Qi.)9?Y>qU_%`!re)]bl.nF#hUPZ2G..*p1oM`S7T9e`Kf`X^Vccmg/cuA3<:$A;0co7H@ZXLjfZ\^gWVLO<UiHrU0paV=f`ThK/
%iAB`%:<rB[NUic)a4!dWLZ'4K4#%b[F8TR[Fmol=^I(""hg!k+l"f\%oSIQNmCm\rI;*%tqOcH=W8;/J_EXrbe9n[%noa:[Fa>P;
%?p]I?J"0fbM]t5d2KWYe`P;9`/NkrSGhX\L3c+IKGj?Yt]+QV]D%PB\:6U'A3aY00rYKX+T,HIgR1((haF)O)AY1`b0:/Bk!R.iR
%6N?"*\sB'biV)C%E5*H'qQ.DB:ijF#OlO913lo\^9C4HudRSt^TQZANm=26uES>7)Mq'Q';]XnSEgic,@t_Q]*CC>HV`Mi6B"H$[
%o;=XhWK(t3,BKkpSE^q];TJS$A8!`nCB`Bmcd1=[H0NM$?@*nPD40@d"A[:sEok$+"O3FncUpp8Nr<`sN5T<sp1(t"g3R5l(&34)
%2A5:1-b$K5ThEKaKPPP>Xs^69T_Cl[>=[*(BQcepZNo&p19:KCqke.beA-i%6=8R8J)QBAoGGQr5!p8;47+irLWK=\q[?n>*Uh^E
%"[/!6YWjVOibh>66H?5W%/$E3#]*k4SG#S/3$tuFP4huTq9695J#`"eR#%jN&"NQ;('RLGTBN7'm.'U'?"q0<P\NGWOOpI.W[BV%
%8di@T&T]c:^@VtXi6/h+ODnCiFVn$`Ma4);[>2SJW3R];$HnI5&s&SUnOH`>LSFQtMX``.;Z03>I\6/p.@3-XEr3<KVekdcc(2/N
%<GG:^gaS`iDe=&O_Z$a1c$d^!<B@Qh32L\oFRB['UI,Aal.d_Y4/I!_CC*c#gj_5Q$\"po:)>WTPKnIC09FQF,N=s9*C`YF-O?97
%aQRX0?Tk%YC+h0c&O`6LACuC7U[nN_,C'aRdI/T*g)opnYJ_%@/$VV(^5ha[4W@quV\m[25YcTSI&+_;m6T6pS.`h8S!1TWFHq"q
%q)bdX8j.m_QeW`>^Q9N$Uutk0-jp4I.(/9^<B#DFj-tZSEp?Yl;fo66X!XO"*`HFh[N5,>noS\]149UC8f48rH0`Qb<q"\-_!-:M
%<P?Z@$?MN+pI3UsI9eoHnC-![Ha_Ts20#ZUm#+%J.nQOnfO`d<hI0Um5:*PK7#(-]dN4BTdf6&t04+.frAo%]q8!Lf]&j(WOS]qu
%;TFe[/.[3o/9e.&pI,]MdX0W1k>-e-Bb&)f-%-H4mQ]A:A->M'-[;0/S.9h:]f7n@moUF3]&L9n>7NWcRs"E<n`os&VpOiGgAM7D
%]2-+>q+kjNI;h[K'GMQV:iqSOIX=TM;gWK56.)#LiIA6=b+J5c-QdXaG5ppUk\tnOXZ:Co?pLB5M3f8%Zo1rfU;;?32!D2JK0:,)
%*LZ+V$YG5"I"*t,+t*,?XKJ](O30iT0BaIkGPl36OEjU(17Vr^k2[KmfI.iQF4=]a&)B82U#F@hUE3Q!3QGW#:l`=Wl?=X(hg#(5
%nJEdtVj@i6C=)QbCrc()`uj]f;+edYH3O$Zgl^g-_(5rQNc.F^Sbq1^j3kb.rQ_m#\rn;qQj>WYdppk9q3g(!LVE$k],BN]B\:/5
%Xs!n9e$7*9;)kZt\6I[mU?SU44'iKAgBQuJc,A3@pqH#/++O9H\:*YhdI34Vq$NU%G]Y2H#JWpOT;sa7Kq-<ck]tg/CB"la1@aJW
%f):Q?*Pi`;-fWI)2[OFQ!=hrdO6poa,pl6E?u-<Ze8RQ(#<p:T>!5\CSgHQX/NW`YqPtM#q^sC23H:,QO$ajp_P!ZG/2JlL^"$>:
%>_:haBVS?#rj(?DX\![kC=eKoN-HcRAiPY#nVC?935l:j)7*h9ZK,=.LS,=dmN^'iR??"Lo-T.nPkct6qY9]8"p\N.pfua&'QLK8
%8GeCB:Sj+HUP"lFd6)p$E.1ho:J38=bS&)`e:UQ2"Na!nENGQGFlk>E6K`si<:`^!<C&-KM]0q6I$3l:,P@>:s10,DCE_eCQ(NTQ
%$@4E7kRcP^>-&kr:8GUtb`%o1.iKmH#P<#f7>#V<`UH"A;uGMeZlo^f%t%.+r=,*A%YJuZ+[EtdGQ%SV)Z>:&B_B_,>mEe$$oj!8
%J++SF`D=7`qdJS)/]r4G+h.[)YrEBq)51D6-ggOs(`E5s!J?.X+=2of!e^-)SHJ\L-^]iRMjJ&/;gjB>)&/2!<:h:F^+#!bcaTF_
%JVY=(\tP7tbd7VIC*^nl>^NFR;&HO0BnAU:pkh&Ee\,FC!?20P`jQ$nN?*+@!M"0t[:nt,qqlm3L'%/D%aP"T7ak0l4M>-WcJRPh
%%:02;G@:;EjU=D2mAdVWq?W0MKf&S)N$rV?1*ql?'2I+Ki,Vc2Aa!1l!u^m5#.?9(gmA4jA$Fi]CuuZuWcXIW?dLbafNnT??JLTq
%r*TN;3/6H=Kt[[Wn-f"0$3n?aZ/Nkh"0m5_h!ij6Rs3s-UR'uo;<R\YabST>nH2;2l(pp>aeBMe;RCrODi+D1R!kPmE)5V'[QT24
%;(g.#&%K_L"pg/KRE1SK4EqP8Gr(e'_'-;FN*qn&0n=eN_m(<q,sX`T_7Wke__Dc6.Sb9,(hLLr=9+`G.AGL.Z3OT--4ejI68oK!
%:M03J?oFXmGm<?Q05@grkD!Jq@5b#-4*qeE*f@.Uioqc,+^fH/LlkXZ5R--_Iu)$nfCMo>E57Oi^Rl^%n-i(M5r+D5!2jbFVa%!c
%prqip`t+O#6=D\V]i@AjmV'8Un>n1I$?=T3UkT50.0<#hK^gajL;L_dn-*K-+@o6(C4E77(*m$N9+kPNLbnci+@hbOr;B^)%=;uZ
%_$PciPi2-H\=qVD#`0Z=7]c.?6%fd[@(8F[PQ24,i;i-Pr.CQ5_B_U)&HD.*(]_auE!g9#N55@a=U!Q`6suZf!Y9ioiF`dOcC1j^
%(JLC+mW5p5$#jKJlIJI#!Vsi:$7*gY@f?2.-1J.<s//Vd=3bPhR!(MBZmS4KA(-AF(h7:VAga6L^n47G+`KbJ0A:AJ]D;SZkOk2A
%<AVArMcQ7adbJ$gZ8Ct"Ojs<KLf/>-N=,a($TmOdk.QnCIi^bR5\RdA&d[E?Tfle-DV'_k1';Y@"G&.B"CD_QqlqmV$Y6-[b#aB;
%*JCH/J#?-@3`EIf&hQh+XPi#AX"MZD1X^UdK[1Tka>a'0!Q#n4^dC0;'1iso#@RQ1W/*ng"pU:<LB9Wg0<+sZ]rCILJDbq5T<G*6
%;YQdcORFEuj:]eH^Q'3+P<lCE+T2LONFhl:AH0PiG&RD@3\lCO#jWM(r*G=)69E<TZ[+MS7m38k*X%$8*+\:Vq$^(]8_j,P+6pl?
%"!J(#K"*aq'>*M_q:MOlMaO1R<dE2jV^9D,fI4"1\KZ(-h2;J6B@^u^R(*289P'b_&se4^,Hq1ImND?\A7_V?,-KhMRIDkR`nZuJ
%9m"LI$<gk-@+kWBO5kt?"U9WPPHgh"N-Z/7`u:tpGVYlIJ^'E@ag5dg9(/m^4#9T'M8GVq=[nf'g(ZEGC,$I#!a\+d1Jk;(LQGI=
%DBpGjfP;.l'pnOqS"`Mrd[4[]QPjcsis@<[/V+Kq"p3r"2^>I7(boN\.Ts`'ZrH;DlkC=jKu"mCn:ZFCD[;h8C"/Ifb;Y*CdLE$[
%<Ob'ud"*e_F$ka^?9_#C"qUOo7dpS0MUfgA1OA=;caMq\@0'_jQra3hemk-Xr!#<:r!j;Qq7HFhs"qImGfUgjXMXK]p@A\?VlbV>
%Tu1DcLqlQ"+;gu)/&MHR+lKjh&.8FU^B9%kd`Bb@HNQ'RJ_e,Mc!ZWu=WLFOhe'mS^e"URaK2'=kBf2`&t(&t5j-#hB#`iLlcD$n
%lHFVW+E8.XOHBaJPXo:M?A2m6DW]jTjD;WO9P;?L5;n^YcC"2UCcS%FckBP9e/1bh7IJ3T,@iLl%r,!O^^]:n_]%kZN.gmiR)k#R
%.&[UT$oVo=1LjHB8DJ1$0:j)i1kS0r#4>Zn#o2`rTKSEKFgp+/\=fDRWuKn%gfjGh&5It@$&f`6m`btTj>qf-5M"g_`7:m/9!%fI
%2)Ns8AOE?4a\7WQ3ViPW+oNSa]]kgl:,/M^N)X.@C4@_>*H!Vhe6!j+PNfa4guWJFhcVWk1-5O>L&)o2e<V7;GN=jW1+W%\JqQTm
%Kh!_MMd%YEGmm)Oa%bmQoBHWD#-qC%#_b!r#\*(3G#Z*Z5Qp3sEBb$:=b[i.+]/4dN8l]*22lk"J`?I.Y-)GqXBlPSi=FhrY,GO.
%8uiYA1_O=eO*"SR(?2NTHQ'b'*VKVK(N[79@e^j'T((0[$-W(o?nSIngJ/;d&9Oj34J;<!$.$r;o9L,"CZ)3>=-jR&?q;pg);JO2
%g'eLI>uFlq/SH8ZXI)d:_5a[t?l9EJ?I=QYkhharTjA5m6F3qQ@+?$I1j%mnac'cU!%]3:D,;-E"UN<`c])%ZKU0PI)k,Rc/H]:J
%eItns44OVXj6I!RQ-`?:^Tm]o`s%G8brRQ/b!oi,B3olbSt".N)@^IW-#)!i^uT*[[1TjU0Ud&Sg'Cdu1[Tm)#m@^=B:1YNO*Wq#
%'-%5PCX=6LY2"'a5CgYo)roYY)a\cd2hV5O6Mo=1l\b*RLq.Kg\8D5V9l8I6880[l_%7@.!6aqb+KC2PW(ejS:?Go/O]$%I7=8GD
%?:[6Kj:_'D"$(Ss7Uks0TP,l@f0[*)=TE]XTPJ;sYIZ[7Zj2e7IF@M's/tUD$EhS]=9WkV_A([)!Nl')@nS\&aGi6G&O1JQ$TFa\
%"2*QFosd?mOVoTD2Jt4:8Q70:gWXN'Lk[SY$!9=tL&dPTN$&F398&s?/5&f!KPuEIYm4JUolLraQ'V9XK<FH^:XdZU$T>upHqKdM
%V:Vp(.YLb)08+LM0*MnL#c#S>$LNQ\hgDs?\E&9\I2:4_Yd=No/f!(.CC7K9(tq)2#!j9"/Gg5OTfqVpGMFsF"`D19<ZK"7/@.F:
%7EDu\LPTC_cSn*1#Tc8STX'%]"TgMk"Et_=V5?$-Ud!.C[2%206=CO-J=T[SB<@;U,o4`p5d7#$6-Hd`iR*fO']MGX^<7iJ!W7fO
%<!dVpe7&C%EhYB<1>iD-o&K%Mp-t7)YX=OYZH[\-f@dSdRcu(4%dLtpB@e']&4u+#Q"_ZB9<tk]^on$eU(s6IZFE29fKI&R_QaP'
%$PUm*/<Z`eS;>$?(<]*IXNT<Qd\!Lq'!jYl^];U$&Gbs%<<4qCWR_ND<I82)\cgg@QJ'+/[\\&g@5b1q_"a@Qnb&WhYrdXbi2tc'
%q!ill42c_4<Dht#4DUm6:4lE].;4?4;]AujZGBte86D6a"#iPYHhn<A.RR(FC]%GT>a_Gmoq`pC3DYD]hU4c-%=$H;A!(Qb(q)KX
%8q--=<I@,RaX?G<`*$Ta`C,fk4nR#>P9BVQ=[on<7Q%F&&LFWd&nZiA.npKi3KAO$U:Ac""#FJCFsdkuG;<p:efiXrVSXZO]:*5,
%GhC\%b?I%,n(=\0$R%F$!>*[i%(Rnedg+kZN48Ec!"7i4A/@X<fEEG#MY.;ZN*Ng#!HVse=k0q6&k5,fA0mT!hWPYQPt3RnO=Quu
%\6ARA(T!iP5nc=d["FaT^SRQcb^2EDSJQ#5>fN+rdr-,g[_TdA1?d#hKj5FA?M)Mp9oB8@cj\B_\*c-/Yq9>lJ4o/ET'c3_9(gkG
%pdXVc%Fl,[6@J,%M&hX=;#bd*Gj;h4iQZ&8g:ro@j3AEH!4cIF'KWgu^b=CNL4`fa$Bgmu*k&7YB!SDB&8'YLGp%lh6QgO"C2mrr
%8&4F<ZiIW[E8"WDY0nK?lulJP`+Ll6%.fX5mGQ-'r]Jp[GP4I)p"U#[)n;&kU%R6'(-so)DJ).LA[E`;)jG3!5MBN1J_AJ=TM?00
%['g=NY':Kde^1c*]aHD7%2.83WM^Rk)/]_ZkjW]!_U^UWj<mn@hD<l'8ES/P;N$`obVk(_NR#`XNs0f5D]u(%1K24]+CJ/7%Ln#o
%V3r/0aRO@%DAuUVecegH08Mj$N\s/Yo7#-j1fsQ[T&JFaSk8<(hu:=l8-\=s<aVf4e/h39V&=Ft$l%$H^"_()"h9PBEGmi+9(V5h
%[K*Et4$1Xe]L+En.^@Q@]*1iBT4f*5\'2sPG.g:_UM5@b^jO%mGf?=lm`-036#P3.(*P,kM-D2Z"='of$es>UXQm83;;*q($Vg_<
%VKN/)TGMKXZR^^E6Ui%dT5Rp#20:\S8ao0h2^qIF,^VVcarkQ\0EdOc/SU^M<uN!8?"#0p>9>H=gYuUa1lFUX_seVBE)o4nCl_Gq
%7+-SeAm%S6")S8]U(h%r`97Q0e7UhDaDS?SYl?\!PM*r1fG6!TA4`%9;4EM,LrYhiNuN/DZ''C3)FG1TRp,-[8,(cede<2-/<8TJ
%X8sRT>h:JoWt&/"UheV*.*5@<VF0^:i&;#&;Y(QY9abep0qhc%5Fq.r2%+_RVa31CqD65WA-:%fR'kYgk3.HTV?RT*"KEY<XFR_s
%g/^4!D8Il]Qr3;cERJ\%K_dU/^.8?D%$Id@5UU9P[Q!fj+LL^TQ`)pI0%6RNd'd,:G($9k3V0m_>>g`;QE,#0X\IoeV'QsN>IiG$
%"3d]"?'DO9'o$a1$)4=djY!p_AB.s_I6*JK`.n/2TUR`FD3D=\r,]u&ek1Stp3U(J9Z4f%&+k+j18;eP"BAGlmU)7b34`pQ"7JOc
%]FE;UjCZP*f2MKm.%"V?Cnn%#UG4P2<t!-InKAtJVgXiRE&>a?`)s>%/XoE4k`sODhI/lhi3JZ)<"a5=bEecMKIRLrIb'r<NIUm$
%@5L%%dRL"\Ahk:l"VYQ-'J*fF58J_KNKHbff6J?`3>:At##2f'Gjr[m%6dIZ>Va.XPTF!)&0R@MIJIi40/adGR<`T2$h.dCrCm&T
%d0o`UU&[+ngCa4eNIK<LC]>6!Z(#.]kB*[!h?DdV1&/'Ud,]"Lg'rKj+dAslZOF#7i1'TNhO[;Y;Sr`hU94^LhO6q9?T^<ZRSC'H
%#Q/iLIsNkgnII_Z_LR\d0M1n@,5S98'*`k0K>RjX2V!54r?*3(EBhoe@&E:9H9uuWV$j1cl17m=`eS*HAs,mjnD!r*Bq7\adTtV(
%-!d&9?P1m$5Q.7#1]f;`D!Vi"]Y@.9c^l?5gFZb/n\[CO',)Woi-JqOoC,:]N1QiK5E*3d@fgP's.P!u6[7(N%\[t5W16gm4VIj?
%bU1DH<th-X[tF8U5cUs]$I00l)6bOkLT&W(=7WafLFFK*am8dlaT$YL`H0.V`u87L>Zd1-T/hFJAG>d]?<ugj+I98>pWd%7R=%X;
%+rtmej+0k',\k_C"j.d#=iGuQFmq[-L#+)%T$:>-ZIllcEO!]C.oS(ZM3!QQjiWgn=/>k4df/dS2^fB"Y.-#\;_F%:&\@C*N)Eoa
%"".WXiH*eDAu,kbo@V;7'9T?iJZm^K"fUAnI^@IpE\oFT<\c8N4e[cEjt7LsG?<3+^4&];4*_cY0$,JcJ!(=G=qp(^\pdh!kAf)r
%quRVPFBnmV9*/Ck)#LIHL?Rc5>kGN=.9h]?H+^"rfCS?)-d1WHlG-.boEQ#k+%ER=pDD-t&2BV7Qg[CRqCVc$=%jKk(Bk]Me2/1"
%L\&JqFBmXO(nHen'+)9+\c?9@^%N9;bFGsJ+m]GZkM]\QajCL49-,MB7]XpII>Jfcmdue7N,Z1`((+`[2-(#M/[.[JSC)f%58bK0
%\mTUqUL'_]g6=G*DdRFBT'+>0dG+4ON4p>L1Le8e[1S`Rf'#'9B1Dp^L,9+:k63*p2SU.Z]I=adM6c"Uc3>n\OW3>]1"o)9k8@d\
%43AD$(FmF_gK;dh(u[)W1?(tH;buPQ0k1sEN7mJd_K]c459'3ZZ.W7O9P@pmYr%GA(G:KJC*iJklP@__lhPS:G_=i0(iLej-KDet
%c57XmYs(SII"+L$?a'9<j'*bl2R[L=F^sT`HtM_gi[&)A?tA<5MHq-UObXIB;"<\,+76ZNU[0<[9u]:O0q$)(ZH8Ol>>=hjrJepa
%]"gu\ams&\b"U=Ga3-i#`Y<f]'MP2NS)"d<N1Na`)fomhL^tT)<52HmARC>r;uS)hRnD"n'iUr-%[_#/ouM5"h_n.=(hi-$k"V^b
%h:OQlL&c?TRO:ea%;9-_*l")^ePI<]O_m%Qfi/d6bgsQuhsB9)G@jXA]JS[JLQFN0ot/GA+X<E$hkFCtUA"S":1"_ck0#fO24*_8
%0m!$`3acj<a#rJhZbpC($'.emVTO^,[T=Q>hhg>S5[tkc;LPl^V0cjPb!l'Kk"bTp>d(^;)&=g<T*:35_mAiRoA_B.*#m4%C#!lT
%l)-[WA_15WXQGgXB6W3'md/VN><QI?k,5P'\_'+c]Le<nZ(1DhN6t3*TWqVfY=]S^`:e#`YF(H+P\HKGr5oqe,dD7CP3ZKL/`gHc
%@B!2^K]U#qhcjF__2"lYcB4Fek$-@km^@mO@tt@mD1g-AeS?1cXT?QY[771kP;U2(G(@T$,B&Lko)2s,D-5UKlf3,jAS!PJ@-t58
%-gN1/kI"&IN]W_1](=Q:XRG!]\:*o$U=[e*>I#X[D#$]:A#hf605Pj&I;F8$oZOZqq;AOf9DPGZ*[EA2271>47_?,K^:0;711H<X
%LLb`Y)ni_IJW7#q7Wkd1q3bsO4,%[rc6k?p/glQ(LFpWV*PRc=lC^bG\DuRKniCe5Bus6F%Q]XI6L)kd-5_XN0&D+l*$9PVkd7-M
%>Y_Kqam:9[dN?bmbJ:o=ks&[Kf2dHB4p^MU'83X:c2m\1jHPA\PKVqK]srl[cu_]09eBHC%I:U.ghGVf=2#JVN(L=bhTI(G9/b<K
%JAuGERZhV5S%j!9H\<bj7`oc>8m='_+'tsrGPfXWE=Z9+4-++*(jJ0/\B@6.4LBmXqRH,2q6&Yd%6jYPDpNW=cbNcNHR?Erbj.kb
%Q+a!$`Hr9s0gt%RhV.G2\#&[P02oNoo^[\JmkY^Vk<;\Df(+MUk+F@b\U='M,-p,#GZ/k[!HAPE5,te<b\j?)1&m5YJ6`;G/67k5
%B'csm^;F.+rZF*#LiH)E?34eZr6"!9@s(9`cSJZ@^C_jqDrE,G+'hoc$-NQD'1C(,,2tqD-]4nT#NFV)bn2(tTSSYlg#dLSlQ\V3
%E4l!F_7(A5PtDhi0B'6js1Qni"\a+T%%mq%jHM/+4/]02_Lp#G\9FOd!VYJG$:t.P.Hh[0j^@kD1'M`uPU1S7X#P]J:Cdh^\=F>u
%F=&Z^&H6iEAs9qifr3GjA;dqgj@B!]8i`LG,SbKEZI$MN?AnR-D4DG>*DpcR;?o7PEoeoqIX*p`'iW4>kV4-l$?=&'He;Rp&7L/B
%<l7Mpm5TKal(<agfJB2rTlYFraZWm!,$C*AR'2EQjFQ]Z,?uIZ#&'`D7:(cS;RpU#S[M,;7f&qqmG&Fm;458gc7upkGb.I>F6D)&
%4+GP/SfQu9h8d!lkMdX"M`X"\fG2kRa-sJM`Rq[3oZ,duU)8rf>;,NIU,*m05*hlJ`5gZcHK"Ci"rHe[n`?K#/laQlX?1hRNgXk'
%=3:7N2!)1ml?8(?d2<G6[.3g#5l6rsNm;_fHLtM3Y"QOaR"!J,5'TkXY:%4uEK#arf4<0s*/eYM5a1bF3W1Cq.)f,-=Y?M]Xk[di
%m!dAS;jAj^?)W"]l'K"GSK>P2lPZ<Pc=N.^V^$9SCnrkWF81j)h7ZJ7W37;g?Eo-PCo\aQ3Ffu>b6:&&f3I0P"juC;/F@KG_rVF_
%Z#DF?RBDF"bPQ`8IQ;N@]tCsSN9=o1j#qn`e5#,__`>![Qk3>Q3,<[PlAbd9Tmt8*MtY;W</`uShA/DO'*cI?P=tV2peZi*$+M?]
%WG\K%V>fl2HeErhDp*,QR4:.5326>BN#Jm)<3Ld?PF8>L]:eubC3]`JY'A.CBI3V7&X=`m`*N2[$uAq<c^:d/Ms![>.DO$W`g?,S
%3g:@Qf9NSr!mk1r?)46-pJnKPL&[^Dh1g:n[GfY1U$cEm2t`]EeuHJc*92e$o^$=G)AhRrC;aFmo]0oU`nA'`h^"hOOdjC;iqc,\
%6jL3;f,/s@m`3M[?#/U$cB515!1H!\f=e_A$s?8J@Q0mh-SJi`mjg#;oY*74[i\jnB@K<Fjeh_?njJ-PN==EeN:]aZNt$;$GT:<8
%V'io+3M23.hWn,'[2"17`7i5oP_FI3IVt/*0?+g3'qfi/?:A$N2qR`NMpUC]f)S1,?Rs.:mOLdfDjoOPRnPVVa/N\J^@-Ah"S.bc
%e-I//]fsPTjt,D9AhF_*GKaQk>%]2Xl?+U\X&`H6S_ImPFLGrOd$8tdd'W*OrmV^@H)<s?HgdNk2C<U%[ndJl:r%[!2>3DJq,F`P
%oj<0T]9U#*8U&NUpj7J,TC5eFen/hC$-'^ZH5,aJIDaf'57g79nEbsOf/Jg>DKJm1Ja#7!D<KgBc`Z7(\<i6c_H+B,\4tH%5^FM.
%r-@Ec`'6q7G%eH/`eTEBqJc4%A.'WO4_u'KD#!V#mDECbS+=]giR33'oNUkW0nE?Kj(c:'2ATQ;!^Q>hHA`"mmdc<.2#=neR..iF
%MG5I`P8om+q#B?3WlKjZ2ehnPl>g'6+#2ff5.Fc3^2]oS;dt+CT!\_UX)MQ<m]QYnjmjX._m;XOjr7Nrn1lrb=aHoR6W%:b&pm`e
%0iZ0V5n!A&U$:F^eT>uG!X[.;#R]APH6m\IWnIBR\UED1@XW9fho0D/k2'D5>:Z:U6Hfo9Ol"/]a;WlX>Dcq'dM[=OR3Bh;`(_jj
%%U;CocaIj\S@#83L+%g.GT^D60Icslm^]U/7.f$q9Ur`8;F2iG5(Fsl/K)MF<'a:Q0!@p)o)Mu")-=JAp3LSh2-d!'"$fDRZ^(mi
%R$6"f0?M#)`skqTOp$"[pK_de4NXH&B6VIAhKB.NUq9a&[B[+q.bpk<YFhEN7`p(YNE$E(GtFM:Z7h&jj;kh[DTa;@cZQf!%H:I_
%X]_'f].\@B9\&PUh.0kfor1H/M'HriF;ll],gJ[aV_eN;/Yud#Y6+K2rIF.(1$K"XT@%eBH),QAT'8oKRddrFe]tOSfCi0.d#=RF
%(;JCb]Q1d'4RXVd@OKIrD8G!4R11s&h`+]7>O!`;EQlI",'W_riEcn_,]C5tGsp9UKJ(fW+-6Im,$O3Jq>_DHI7_e\[Vb5cQ(pO)
%a2YWcS25cCRr"u1dOjAsARh]$5Lt[1.3AWr))'%s*]KSLWTm<RiLsdRV"3^2]8SfkKW/EAs$W=9<(_CXS_nU^,"0WPK%c3F/:aNU
%kqp:dGp;^ulOdZ-4?7ABSuI7sG"NVN@P4R,bdfTHF?PKm%1+]#U/hg25_HI<q#L9MMJ(85hp1[G70Pm:cFbU.&J%8N8FSe)MT7Mj
%,(7js9cL[%SOYd1=0H9ok<0%:<Kb09)??$Rbe*AMkQ5X_eK>PF5j*a=A@dWM%8-d(nr\<<duF"3/)Bk55;EXW4%ka=S*T[hF>HZN
%qJDY'T!ca`KCD5?TW+7_1UsFUR(7^YR*<+:#k*q`^((p\Km9eG3?,=1+l0853f'W*?,ki\S"k2M.)D2MRS4B=h'N6uKks'iq_s's
%q<e<D;CKVC,T&hFgQ`JiYH-G`-=+mm)69"<Kh]D)c4ui$ZY:IV@YJ1mI,ltVBdc`bKLE0jS*3=-Sud!SAMdDgT8ii`BS>PVfe2dQ
%jlf]F9kn)pCU]<EWBOI3bd=TqB:9Q(2[173FP[[b,BJ$mEceX<,FLXf]OdeZ(;8u142jmqJ24-uqT#g2='h*PCoU\F@<f'-aeh,:
%#@pCbN'f5>PHh_gj.oo]hYFHcNidC)(4lV^CaGVk=BL+>qAe%>Y\rMs=RY].>T8'3bIOmW'b7jMJZBNW7.ZSg9lUe9,1Ge%WY,e_
%rc1;+P`8e#5c8B--tHmjXRK>Z@I62[S)srW/L>%)DK^bVrN21TEA;f@BqT7R,j@d$kTt*cGp]!e?/G`@k:S=W4QjdFiteeRXHeb"
%K7TYJ1[W#6FbToG$I:,4gA5>1!F$GJd5?C><5VutQbX<h!`Z;jo[:^63df:XA^P,jbs[2i<`5cT#/9.bSCVeK[_4<(KN^:gF;Xn2
%&7C#Y/5WHVCZXhT"<bKfan)HKG657B'/JuF3sHOII0WaLrlc+<Oa_Cp>!_5P4-2EH"DOZi`Cj##4;2h0X,*49F/6T1apC_(048*G
%?;CqtV*Yug1Q]+`q5ERi\V@S"DeQo9Ga9KmB<NaHQRX<>[lBIk4GL,Ca9D"?V_7,p?p(iEP6-We_4O;4+]IT"oTQACLhh5mL2NVn
%8AT@=V()8rPGNl&FH'rtN\_7-**R"]&'q'7\<7EgC=/,p"sR;i,;JY9I""R"J\^\Q;4gZ4+>of8>3QHk<1t1Q$SnX]cUC]H$T+fA
%<A)*_Do.B\cBng*X=l@Dh%YQE&KqquDCWH+G7#Qb^$,-Z$$F273LY"H22`'*D]N3@K<[0E!6rYo-oXG@/K.-4+BC(8,_kMdr'X9(
%;<J^cJ<bea!KD"1]WK)GF;fRse"pGXr1$C57e+hK)\BM9Ve[G/X-,Q@7[%16KiY!81QKBh<(#Td-GHX]/3l"(@r-kI3Em]ND-SW9
%-agH#?!Y9-)k2N_WoRc+B]BKZ7DP!&oELS;cF[2LRh8(gVpo5h02]?-fraPX<hVfaLEZ_D3H%$oaVlA_juW?!@74T\A_Qr""6sHW
%%,m3RqPF\;S5tN[olbmHJ+l_Z@@/+`[;N/R!m]eM`IH6ogYsWN_!qH,nlTp,^m:Xa<(/@%CWh"3.6!cR-rr4:1:R"E1Z.=T;oKTR
%87=B8;SteOL3\Cae,Z]=;C-7+(aLrW,\[?8U#S^#h4gX)V(D!US/"kdYY:2fV%7N3:+0LL`oHIkd`%-*J/V.fajRRorJ%Juq-h9C
%o%BA5o%?F`17mSI29-n(;_[:))BX&IQ)p_$Af>e$QZrV\<#D/Xe#J9jW+c(*7T7We>.Ph;h_m>W#;9HTFRec;`mE2Kh,jkAWPXPA
%R'8t*JLc6Dc;P,>p=*Pu?@bG'=_[tAUSsXu[[?Jh96D=XI0(R7js-]*j*nl;ZoqXA9U,SrFgeXg<(NOBLu6[HD#4+5RH!'p?aMo%
%oK_X+_uX*%D\Q4;#dANE7G'GVE9mGFU+%M;e(266i^#WgKnFW]kAa`T(p<i-2\<c)CoP/7+m%bDZ,h%"Q<CV[WXOFMHaAWH);6q?
%3)hQY&-/e\1TW?r'\T,$W2_4K3JTJpM#0LLWg>hA4;R1tEc.Q8C3[N0;h1[(/,RnVLXWd=WXH-+%"T#$5^BcnCSTp8-&7m\>%WNa
%m5j(:ETM`$cDCn<-_mUa8nXhj#V/C2p"VUTdP!*IqVj>E1S`&2@0mH31D)TjTD>'F<4c+#?<7ejRYTkPZk+p:YgD!'p"O<:d@"9B
%aLkp"W5590`Ce,#G`bS$(+4pY!?@S.s4J6/`H0;d9YOiG?l6SrjIki@JUb)>:u2JZb.K&+7*N0N0J=8NOj9'/TMN+M%"DO37:9$'
%!W2=T4Un'ee4Mjs?Fqh-R?&5?#*ju[+&!frll291YL)rIk8fLU9I(60`\8;91^Gi5KOCM3FjUA+dk:LF"H@Nu)OOWWk*5sa1o*fd
%N40GI)k0o/<$R"-.GC=lhs&,io)LI4GV&`^n:U.6HKMY^[F>6CBm`tFC<6oK#Aq]7=P]E@2>/[<+h)5B7Zau7h$UCZSSG7k#uoq+
%'^2Wnb"&f&i$73<5J/u-S((:E:pjM*WH#5nlm%h5Z&+Zu8_RD7GgM>6\^,#PVX,]gXX4)]oSc!;0($93->"g:Z+`F!q?C(P9m`4"
%a/8"k/f',3T1BGBETku>_NClaZ81r7!d<1kN6=e9<A&)2I8HTX1\4*b&\7esU>=!n0+kb@WgcoQ\!#a+>HeSH^%f/8J\4C1X8Mc-
%'XNF6?>bBMI#OrUEM\=t%+8AfR,L%L?#5a"$iJL+?YTSeGB&p_@\]93[ulCKif%(i:Zu2<I`f$u]ON7FRT;4kQ3"4m@1ss_Y&<Jn
%.09)rlrifV\NM*^_@sLao=[Q%f2*9BqOJ:[N@O3jr):fEjJLu@@E\7:[MeK0<j<;-O!,A)Se3So@M]j=GYRBuCY\O@QacDI3AAZ2
%:2?AJGd;K9lr^fQ[n:pTdDju'_G4H`P5GmW!hgJoP4;*)+V>`MnTEigE+j%f-l'</S=37[,gtqa51W"@4_ZJFBZm8TE^2S3%%cNI
%jq("l5Ia+WEm:@F;]D2`=[KG6Z1e,0:nDcsXu-h6lN1O];I$:S,pHJ"6XGlK\^XXEp0o($Ou%STSTF1rFM;%]-3JIF]JfViAg;7A
%fQGbO\1!%aT<n)F5b8I](Pl:XN#'b'DRsJ0#uHbh2[+dYcFIU\#mXmS>ulK]pN5g_ZS\A;T4_?Aa741PY4O<qYb'CO9s_5;.!.Ub
%?Jjj&.U0'^1acp>8LIcd&h1Hj:NW@?2(ja07=O*2Bj0#Tb!nrWag7Vc)H(TicDKeA&3D60YWA.G],SS3R8N3eGX,m[1_m1d_L]2W
%&<N<u1dRdA?skVKn;Q.^H.W>l[)VLP+E8GEhk@H#,L!`m%5p5Nab=9`_/s`9HOe\Md5m9eQ<LP?T+RMXrX,GK)*tBTA3thGZ%/-U
%!_rBX5mHir?F1<\6cQ1.j.RsO`<X&N_AXq2FjcghfY'-%!W$C57_^_B/Zc3dP(gAo:o1Jh\IZ[W\up_\F>mI_dk)q[$('Meo.8.I
%9W3]W+uE+!i.PM!.cl"P(Q7H?-&*YIl^hnsn(P)[\n7CjlCAqTJqf>FAa+H&[#BY%4MtCS9G(WS!:IMLTOIMjMg5seFKK6)\U.5&
%a<iUO#mPk.ar6gg*9=Xhn>7l?1s#\$o^O-$C=hp]4-Tl4C/D+?l*#bOAI<@uLM581+4B-Io9D>*Y*SBVb;]LgbT5G2plgbiKi1[@
%,OfO^GG0jYR];iU2#)9_3;7Y<S'aJLCCV,JT)hp2^TMD8!?JBlD_cL8o`At;^</*&E^-9a!#k3Lcpgqe,md)NZ*=bn<p7?;\k!5-
%MGp'LD,XR_rUZh(WrgN2p.o?+!KItYB'QqiS0dnB!^\]1W.<u-p'$7;iXEdRBW;`bct&l@p/_%Q.cHANDB\=f\4I5P"Y:eF8FU<<
%1<P@+\'oUbZ>cS9<F)Z8+L4kRBp%S^9:FS"O#u1!]pK2.7iI6Nos5NBi9>Q'gf4tZJi*.`6W<2S'gO&t`ufBq>kf7kk0AJ%:snT$
%Q**o#Liiq9'[uk$-NQGt*.fg6AG3-A$#<$7Q,ks:FJ[-NP'QYdcN9)&=R`^S/`G-a"0Q(GHc[s[GuJbIZDr<G>gcS+ai2dn(iE*V
%%Uc+jPle,9$6;gL#mTtKq#SA&r70Ro,@gR&g?u;uad>d,-:s:+JV79n\g*<14Ts!.2o@$#hlDTU^2km($[-k4cDTfiR4"G9L+$NR
%aO\"DL:RA_=#\(*V+nen1r:!P*@Q>RqV'U*5-mDje],-ROg4g_mX.GTB%2@8V;6r4]s]9@[o[#E--\ZHRt"BF</aPO]E-N,KbG5<
%n-"-X]fk2ZNm4A)P[iAnn+A9-iEk>'0Hu[DMS-OcE(7sW3];H-a:ElU!(.!-2Be%:'n(0P-cp<J!XSGhb^Dfugmca2_TPH<4b#=@
%##32Fh?(K0GK7L^4T!2jX('V+41mK\ZEMHpCf>fQA.pl0YrndO,(5jtRp"TE"l;<!l%]7*G:rV,C-6-4%Jh^5$X1(U9/\_<1]'%R
%gks4B%SI!8#@.3-V_V3LVt5s#>tp8&ASE>><te0r!tX#3m1_?I4#pZ;3qm:>b[WT(R?o`B80-oC4UZZQ1L#M3PX?3[@9W>dC:mjK
%ZKV[TVDk\E(h3*4ZQm$i4DMcr*(8+9e$*D[aW<-Zogtpb=:Cp+`bD4"VI\&9L$NP1SOg>i17_?oL3^r+.Jn#HRS\;Tiua;43jFEU
%:>3ud)>?eP#js!nMio^P(\#Gj*+W7N_c]O>mb&LT]D,t*TfIQh#'6q:)Vgqqd'U(q"6SC&23[%mjTPpG/qCbjIO%d_js=$eg+Gal
%3[\jG*?S,2)gBkbgHg"2?#unO`\+-c5li%ejR#I(7NNah.8c4m`ok-6d^%HEhC.1p?<jGU['B*`[J\,XX=?/L'CY^]/j;<_$P@n^
%$>c.(`:OtJ>l#CJ^Uk'%2Vkj)<GLY*2)<%+.pm2X/_00"D/]tJ[++>c"(O)V$QkNB/fCXa?ap@4da\$.'LW;PD0`sLV.BHA`5^o?
%/SE13%d/*NaIqtH]]k$k*)r]qjg.XmjmJdQ$$X>,o^pL@KqmOYJ_^'!NVnK&6si(j\ri_U+>`D87,6s6BRsd%Mr#nbq!E/[&Uh2]
%;PSUA:VZO.#ZqnAo*O<U2./JF*MA5D3M:XH9$O#aS/+bg]LH]3G4!,C;27.>p[1Grfh8iCAeImZ`[A9p1#m;_5LS2PB7sN=d$Sk5
%+CuCY5Vd<-b/&,!"ns[R3`IcA;_:!,R:fa7d=@QoDd0WAjQq`Kr+KJgmh,NBj0SHW4O6gM('&r"prs`]_-U-jfk-62_/8tVDB(?_
%?0q6cULCOWE,r30_5:jRQPqJroB0^Cg*IkX6Y+2HonN<IHD!CO:5e^<Bc;D#@L\:;)WX(tQu:,XOB<C7bZ-Frdq;/T\9TT4.l/rZ
%foHoE1(l^_=N`_Z?J]J-O\h8"F1JRE_Se.j_+hef^ih\^"eetclbW=XF%_>E#(UN=lNm"!+:GE12J_6thJnL*B>29cliA2QY-%%g
%/kt&JfY.22NV8]A1o"FtJME^Gh?i!AH;64h7K`F3BCC#;R^!njh%mQkNX[FLm*@GMI)i\RhT=LW.tH?F5(9YE>j%U:l'C"uqJ#`\
%i2%Ik="FA2[dN32")WkLE(/)0@B3(_bqCsed9m+rOh/a:CFH@#=(,%>ARQjkqk>cTdpUCbf.='fkIbd>L/2Um]</QbrqbP.:mpPd
%DePuI!YFD\3X1',h>rnQA/(S,0k9;["PipSFolR8[G<l$5R5fN4)X.dIF81sSJ=V7%BA2m.gF6[E[(*<[FeZXaGog_2nWo\5,t*\
%'*N5XV.U`,*(WP2)u[m_2.AOOO'k_ld;5c<'X;3g'=A\^**[_V`&7].9I\]qTV:648E5FF)s(kj[;4Cnm8C91E-?%C0r&U^WqYs`
%](a0Bfj5fbb_g&jVJW=pQ8EEYktuW^K9f..`WM4fO]IIrSU,'0STH;=+XN(.l:noj)bDU<V!ku<JW2b+W9rMP&G'l,3k?W]GLG0S
%]?8q'TRGb(^kdT@iZCH+W-lQBak:3O<T9dYhi@]&P3fJ&.Q]J89nWu_6K4S')nS\B;RC^j*=YG?lgEq\]Pt.1YqDNk25Hl%@!0HX
%_/5RedlY0!&6JBtKCb^5O>Ws3;iIe0n"$;ej1AT`cAh(<c7%a8J9J*=br>D@#`U6DK,C]SG<hL`DPhkEiYAG"_lP5oU"c<g@cS0n
%S_]Pl&^#Mm,k@]gLl#/toQ/HCgpLdZY4pS!N#/k(kXfN\NR#O.\Fd/_`[C(eWf<=oY:j,5[X?;Xf!\+RI@a5[=!QF^?1[kWpl^o=
%SJAUtp.+`Pat);B)`%.9/:$<oc-3+BJ&qd;1[$BM2j6KS7W=ijfu:`+6DL8=[J;gI=$67I\Lqc(50W1>HX%A8fakh0Jb/2`It$@&
%rXE.hqC`b-1>NE&#++IUN(J5uL\UcsiJQ1,^<toSN#=cB)k;U9]&J?`UZ:VoCioD3E:'dn27b,s]$Xft:E)H!RD=3T#<TdE1o;8E
%!Juo\TQfWdi1fcXpEr?-&G\j,+410LB_glO.X'KUi?Y*F`a^US4h`BkMI@qT\idb!Aqe:@D+8o%`6s_"LIO0ka4e%eVFHrV_VW'c
%1'CXVel(/^>L5mQ))!MMgXa-ilj5qPUGJWh@@SV#b*+T/8[^,]l\KWEJoWjP3cSA"pgbopH)[Tnn6=^9K6mtnXCHZLc`rLq)'V$W
%Z%mkHeYF<n.Gq"T;3F=%OQJ7SrIA&TJO:PD1J\%T^D*-Hi]3cV6&=,?KlY,miN8r45`VIG?aLc;m_ou4\r?FdF_+Yj`.=C`Nr]n+
%EIus7&aXF)L%XP^9Wqi(cqG#VYPeQ#$gX;Wnfcn(?qn&M)WMu!@[09(3'a6-mU[MWTa.'lSsugEm7\@8_CA=;]P$rh=m^Kc'qe\P
%`j479\HZ*_HkqT__jdn8*hKWQ,C-tb<`=/Mhs+[ME95e#Ej;-;-u!.u'hX%_(5HhHk;H1f=<.\5hrne3"d;Z)IS3MGJNEtNg<`=7
%i_upYRr(Te!Y$X",HO/F>+&s'02Of=DHjLPi[([gB(2\Ho52GBl=jL;@\nJ.\o!!5l&BFkN=JgC\>7AOX41qC^0bo!_CF6u&%Dhp
%+Ir"U4/M!rP8eak^p7D8C*QbX[RZn=L.#Sd<\4.=P$MILA$\;)QGKMid_a.73VV:qAun"O[]t#@@1u[$2R;"a0h)#uZ*,S%`Dn&S
%XC0:8&$ei1+4%2)jhW*@k8MoE<g]j;"`;sC\YZ2o7KY/TV?WUXWts8C<d)312dll',ZF[eP'@eHC'a>Zep>j.f>Lj'l[DM0l]VRS
%2]X5uF_7>tj;'E%X/AICI3[<IgSh$,[GJZICMgqGgfiVbLYW`dkF7lEnlp";M=]A3XQ+n('C0KkB9Ej-J7\no($t@_R,3e0*7$HK
%Y?tTo@XY3anscjM$Om]_56O&N%44;pYSW/jCrUeo4s!bA+ob$5c+I\BYTeS':9J90]8RY1+)\:k2_8d`)S5L,N/8?H#%3F</?hGt
%a?iUi<-(ZLbO8P1*lhcIE?_K;/T/=.VR;)j3?pB!l<a'Ec1_`!?>.4?BRi&hY.6[2)Ok3$03g$7)M.L(-s2ZDG^e<o\jbj1DM2-*
%$`joae3`7[1NHFb$<FZD'<,BQ^l+d!]BC:@Y20^js&gUI>fM(:MG+CA\-`gXX5o-p/'PrA?sL+Z_=pK@MD]GA?/`"Z@,Dl[^LNZY
%\JfJk05mqq6=^7-EV89/+5Ua<m=W4$1=<`Aou9S$XVq1I*3?<m1ra"^=_d%J)8_lLSkF^_lIAbhF?`^M9`S-M+*lGM4[_8FDq\:i
%bc>UBWetMdR3o"rD9^g.Y0dEHIC3)>7Q%@N1_is$Ff>BQ]!Pe8hako?Y3dIHEr1iSMnVujihjf^eQ/A-RPSd_^hqd_Ma'.*]sG(n
%7d[8&kt#XPl4VS&/?dQkk3_VXFaU06F`9u!Y;NKb1rDU;ri-,%3cQ/LC0iJ'JbZq@eb5qA05Y-deS*2l41/t8B'=8ne\#'./kl$U
%VU7lmbRr744a;fp@a5kA&USW]WiL+k>thH!]]UeH!Lh#4c:MdPoUTV2ZVYqreVhI97=@&OY"b*Hs4Oe1j`.0%NpS:'LnW]W4NcQY
%a]l1kglf;^neoZ1;asP+quAM4pBLQb_K/kT4'bLqO#pbC_Ir'jA3+"-`Rmir1:?2eLl*Or(9;bYc2kDQ*CeiN\"Po_8VTM$VU?r$
%3Ae$m9_3^bOs)-2lCQ=cI^>)n[2d!-R5-H<ngp2H2-/<hdC[uF8t+!`A,^0k(/Q4c4?R@f"YT$[f>NPX]2s,LX8i_%U@$4d"s,g?
%XF^59$>\iT=]]&!=KU]h<ls-0CNHT"1GMNrNdmQ.kN(e#-*3+39rrl_0gZO('EOS)/.f"H$WDsb%BL'ng9d<S;IDL#=@S6I$Vd]V
%[HMPKH>`@i@RZu:[Udi4(W@hl=CI<>=;k7!4N!5o9h,7sCT5A":^<rZFYXs(KHn_`YF5:1$J__MZ32*4:ShuE3g,$_BA013(G.K=
%bs$dhWi>9$na&Z6g)4Zh0sf5b4+3VZia.#Na7`8<=qZ?$$M$&<G+=WV:"iG`naPYn46f3rS9mj1,K=7:CB).?9o[CTg]tqVrG\*W
%.0^JkcS-o]",Mkp'p,8L+YnR>?_:%sjr_!r`+*!IWm'GN&5>o:m+r'cZVKCW_+uS?==;B3K9V=&C7J9dXBJ%P2JP.M\W7JW((9th
%P'Ns#&2s2q&C,(b8Vs,g2B]hI2ds>6nr*(a8i728Sp6YKM^s`nj#[+*p0C8GY>JS5Pt7BA#DMAOk8;cE#XhZdff4rQ3JC4&$=QVU
%Z[E7[9[b_T_BqS)`\2I5C20!aE+e`)];meP1*?0?=?h^[ITjI+cQBbV#eDlVg]nG?j0*.C_?p9l&]r(4i@"H/CkWiZ<X>?!4aP@(
%O0ARr7jR\r(Y(X<ob`_6&f[s1+kk/Sf?Bc&)VoCGgrd[%I7g&RUO#+KN%9(!Q[5C+j$r#L<n27T,+g%(IrX3kn)AJmBUtU;RRUr<
%/j4<]<NgNp!c'Q`!GHB01]Nr!lr,1GD"1i^M7G'?0fEq[/*Po>HF'/fE0##$b]]t<2k#\&gfbWFjGg>r\7.6#RL:sP*c5LF^8WPL
%NP<u0(!sK4"u'1Sm6`f!1CD3jmO)4/du:nWE&[]>Em5s]AgPu=nGm1LSgeP!e`d;UdREhU>sJCDclUKl[.W!"fCNmZq?Em\EuR1V
%ca>#M1)$Tu,N&:IU9cGhi`[Fi:2[\m6e#cdU,C=>KI"eb@='E5;XObY+NA\i[sG'6K=lbt3QRE-Q/Hi);s=dl3k8h&^$_bJpqkg-
%mYePr9>2ffGgB!!g7<)/R`,>#\$TYYq=*Ve_sl@%(bTA&dm.DI7^+_(,E(D5>a[/"`33Egpra:)FjdM%qWN.F(N;&Y:!I<jJ#9W/
%m7GSNRC4?uq]sXZibr>\Z??%,e&H-BH_\NelrK-bZpup]p6j"tnh\s.:!9C[n,#Qpd5TMKc0?`bR!tZR-LX1EoVU(n8XiH`Dd^oq
%?7^M^6#5;%5h3\XA5HO"HYVq96?-cpd+B<p?LB]^H?t2*DtIXmg-++t%j3_j3jTfKr^9NndrlUZQ.4WdiCA6]Yibnk8R@WtD,^G4
%b`4<uj0_=>`/E.9Wp8O#>94-#ApZ7D'uRB[ZH>?B,3gV,W6E=f99tnj.,C>G,Pn]Xm66q^ecg/bJf!+76h+cO<nh?rnt.W?)_%</
%"TX[nT4Ij<f@QdQ21MqV]NUHsHQGp4hW^k5.<fP;@p6l.02bPpj[188LGbP;WUKk(r7\7:CK1jMr6eJd9o58&bsl:=T7mNaAS!Nr
%.f74BDS6gnTpPn7fCZ+4LVcY,<tU#F*pLs1L5"aI?DCm^F_a(?#%"\813"_JM-QBkB$K';+W#B3ZL"PlkuuR?[ad]p0ROGH6IJi+
%$Ytdr-]1=0!h<bLfYj-l\$hJZ];gK67U_VVY=G.F6)4tpWJn\l8Ra^(:/"KO]j0t0_P!h+\3%neY(YJtoL9)_,1i.Jh-'9+8n>9]
%2>StD.,/XEd,>e!LhY&8nY_1aCaT]JD5S!_f,Wd_`Ea)>EH0MFrY.rDAKRjV*SbB:/oE5VT/6`:=J31dr&4.YGF/cJZg@KE"^59#
%$g5-<BMjSC/oY].,1_rESI,Xp<:C6@`Bmj.>pfK`^,hPTe*c\=NmR^$.P9kOQ3r)\6:9k^42nHKYKLDX#B.3ne04UcQ/t]g^G6u.
%R>/(JEDnBG!,=kg^H0\l>!W3F?.\m4?b!AKV--:TO@.V^#CMQJD-r;k;eS&Up?;lc(XQ529;,@k5O!XJE_k=+iVhh2TdD_U=XW4+
%Nj2GURW#TOd_N,"h5#TpPt(^MG``'?8UP@;jtt'5)Wol5r3CHD(%4G(^Wj@GXB;s($_Ulnqbu'?dgCWAq[M*c[">BK%S>F2cu/0H
%KS)?*q@0d@W1be!9(&L'4qZl1W'SUZ[OKO'8Xar0Ec^S&>t6eWlNf8?[Al8M[p^c\VcIoU.<SqiBHFEqT#FD)NN[.WPBpjg?rOO(
%?0_Z9`;HURJr38s9oY,BMf\bG)>@TVi8C`=RJIfm!*`TeqGi^PM2$2WW`WtHdfLB9O@JC2amRC(1hf]#DiN@M>ME<T>$[c/bs)7:
%?*!r:SFbskTVXY_D?%\EC78oJoI#@eGJ>g-^Y@fh2bKM[s*4:;"FR`cW?0dVO.VC1=%7(^k*I#jM>i"MXeCJ5'E)^W2:Tu+8,oe.
%:$8HKiI/j55(@Cta3DnL-,j0_O3R?#B6`jn$OsKF-t&$VY4>aImEhZD#o>(0)&>(g2<"_G0&::mq')$RYNPYP%t_9T+7=:9\K2uU
%R&3O0G:0%k1qf@:n>9c9Rqm3s^sZGZ5-`I3+@b28.2JD<Ct27V]H3;^XE^b0=1cqR9&k`gI:oisQ"iY+d^\D!C!RnEDJi\`V^XAQ
%kr16^KrsU0rn0%#".SkR7>n#";G7*bU\**1[3cZT#ILHX%oA_CcD2Q5em`?NKs!V=`+"!tkGOWb/f\+Y=<;<Q4Jm`bI3P;FH:H6E
%\nQ9D^1N<FgA_L%ilc`7EPChdnt?6d^Z0=JmEb@*(n7.IS8\;2I+.$If,s21r[csabE":Tr8W1ZTB5rsjjD&>I[k?RZ[;btms1FA
%qm1["Y<9DkduX*;J!LW1c#7ltDu6kgMA>mqO7TKkWLr:A-6Br$38aE5f^&.#5P[:rao^cA(V[FlPD1SjZJ1T'ja^/(8L0P-W83o6
%DJegjp;L/W@U,uTh!s0#G'/6!V[?>e$-DgSCqPs3=pa[s)FXYL%k[`*X&]R*)d'N+e)0a[;`6l"k$4)(%I;YU/\@#jdSNO.S\=tb
%;PgqH9:as"oa+"8o6CZZjbK,AmZn5d>8b2`:VQkThOA[iNB;K^msD0aLBIZ(,h]FK=gf2('4<WB@gGXE\sWZ%k<<hPB>:Ip<0Cg2
%mt![s`B!t+qLi2qbpq7KZ!h5'Kcd/T)KB],j7dj'n(C(o*0jaRm;D:44b93o`Tf,9C=UMHUt*3_e]kcA`')Vp]+b%-6r`*`g=``q
%o''_'qNmuu/k:WONU:)9&u-T9DHb:#"Nmij8H`P)9tPmH/>]iYh'/faFpEnaQ?g27D@,e&VU=Qiq_@BGpE:6+HZLI<GWarpZ)-o7
%]:YtlJa+3KH?eRI1'Y$gdFP<?<pS;pC!]5p(+:*k#^iYd7iE-8k>,\*Nh^j(kWk1JO(LU?^<u>pS5cAm`t\Lool,p);u"'groS$i
%j(aX;3tkPDrh5@s0mu1=2PpqeOZ"g:UUG/qkP[AX$-+tkX_36^m_+CR;+s`JlPu\-;'Lg1MEK<-Xc3\8)*'Bh?A6s"3:i1cbp[%6
%b!d6e\2r38NQTi!3ABVOikfoJT"eA8rM]G%_fts_\a\H8D=Qh*h\)>8.W/$0bS\aIV_]P%nW(<-iBQd70=gUQhk-<!pgHCM#?/>V
%:*+4g@hbV-2aE2DL]()L>l8c+)mVsY<^uQM6.T+6CS_(DCc@4YN*=Y1+YP-g[]dcNE8=Qa:./pJPXaO)5\n^Y6?)1eB.rFqUt<nq
%E?sW==JOBo[iOZE+]'D+5uC`bM\VSlq>%)aN?='S]87?=SPL3jmf.ViFn]B0Xl!$9UC2sHnA$+a,1tIZEt0D)&cHOc(fiUCeoseW
%$/$%#2jX0744m?QBW4JAicYb]eD:V&g7'b)]!XJRPLcJA\M]B?`Y4j>p>Tnq2gk-.aSA!+*'LYf[q=WiUtSq>62[J-hP;airSuj_
%C2`TfG/_?nXhB9F3&+<Jf5GLq70h*9eMBGr!X?QS2iaZUS4fI86=[2`rfr1ro^,MLYp1.N3Kl.L?[oA%[X7!Y:W3"^Xm-u@I*k`i
%;3+JU@+J0Qe+-&1a^&)=H?,Sj2H4(IK6mL<\TV7XF@sqX\NRm7h&2s]PgD]TA2ttFnJgj,37:5-en1@Yej,2*h5NCT)<Vh5!oAtI
%Z?eD9mV08rI/2J@o;I&c_ioJraLn<+$Gu%>)jrYP8a@7^f-A:F(6NlUODG-a:#HH7)4;<:%ZYF?1>glt7d/ib;<k,8H24b8FNuEm
%0D$%t4&2SiADUR`S12oWk!aW,KC`[qR2:!UKCbtI$UI&6$j-If]c5/+Uq:>>F$aXuEP9l?k39?OhOZEQNOLNbB_:TL@CM^i(R'Qq
%@md<GZIIW'#Dq"Kp<a>o-D8Sn8#2sHZ1=sT/O;OAWrd-c([DGn/iNX.0Dnom.Gsd1O&*CLloCCpCLf]\1tLMS#mm`YaqaclGCLJX
%B@UG8`=,lAm?sb2``CZ&+Q?it,Hd.R2Bs1+j7GPc43r(o^>lqd^M><[Y'(2Xl)2m7?>Z^T+9\hrFq]d(IhNT2%*)Si2OZO,ioHE&
%%aN;C/4fL(bklS&_HcOPfk3)JP(!:=(.#7Qb"RCt+`;-D6*ekaoKfe08g?m8/^a7T0X>>j<3VMb&j#fKFCB4aE@l/PTD)07olKMk
%3[cY1edbIT85NW5De:)UkBVVU!rc.bH-JeT,=-T<AC"B]jZ1cB3NT34ncC0HN6</).'ElrW6I^AIFZV"NgK]n]A[fC)-4`fnS=J\
%,)_N>Rhhb0[+6bR=Jt&MeZ(uPe#P=MU:iP8cPe[p14c]PI58a3[<Bl^kMlHd/fW/^DoE)98\]/fiR?Q;eR)gbUUSt:R:>jj.u7ND
%p[Q8dVhYL=B9.Q2ma[47Dtb;[]>(t_rp.GphW*q`$S2=no5aSI@rl!@^9tX33836G>/(MX(ES"6O41Yc%F)"P;2%;E*<C+\(1+Bb
%Z`>-P\kgXf*:1.Tq<6ZUWja=g(*>3$]<^q./HG3a<scS#ouQ)I$G1YteK4&^Q,jKjH@=BcluusA-G@D&hCbr.FM5\&G>Ojb'mtu"
%d*=mEITP0-5%s>+jiZ[<D8C\lm+EKOpZqN\^DF)b!oUe7"oE^pr4'.9e]mpKaiEGM@)%o.^r?W*gO%biqs&q)FfnT>E:GHnI*gI1
%K>rI?pX\tt5FLP\.<PdAT3gs9Uj,&hn_G0ca'QK`5;a@HThKF)p'1!arZ"/,?.n-oW,$=t3X70B)p\9Rc[Y9>#;Xo3VH9sKogHXE
%=ju\,O(%]!;^-:2Vao?Ljn2N10pSQp@80j1YOOs9^T\:8CaNJgDGSLUIPs8NWiZE*B6Pr?Be&F;:&+nV31GckWB36MXl'W0hK03B
%7!43G@kt^4cF?W=*Fh\jS0ts.2blgV@uC2!mCeor?sdZ)Pe!>^?sed)GHCZ-!rGmlYrOB051@<]?udToO4`#q("elD.WKXX1p*2l
%YV-aA#E(M#^qPZUh;\\4V.@.#5gLXYcTZJ.Wm=UpR0E;\lo[#-R6b4f9"N#TD75"DX]F61#54mfqR!Ufe%i[3bG02<1C`\Dm;T+4
%@.M+IfKC1JqW:8sNLCuo0/iVEe^1B"qbhc#(FO*l5-WB%@DbNRQ@XI`VWM^-kNi9IH5MQQ&_NG-lC5beNFWgF>-u"pIJjpulG1,5
%<$-P>Ae`maMX#!@3i<MT9/R8MXNVro0,<$(MHH9%YV3ss[u7a0#PRrt]H,NUg<9Wq;S1H<h*"J??Ri'o[-ZJW,/*#d=q1:+"nkA`
%C1QfU/$LZHdjQ)R/fc2Vb(pAYmCtU#auRuq7bo%a`j9kWfT4\^@DirRWoB@+QK,1h4feANWYI7oMI58;qR&Z4-Q.bKZDH:N23Q^M
%P5o`i[qjL[*Igb-4aRn4lPjcr;QH-Fq"J*p*d+KX0r9`Obte"l0ujD8e"4LT<Fi\4hte4I9RO,E*]l9&n,aVFZa#GgV&(_ds#7Ir
%L+3*l(N!Wba3hm+H>,BW9jRZ-(N!^]^Rd0.mAYI0qa4.Zr/Z)EFk$HW+"Gf=r%CsFo^cr<^\An`StkWOdIE5Jrms6@h=o[Q7sSEj
%P+RZhRu,r@Dta]YRepkW8,iJ\eF*?XOGWnWe`H%*qE!FOH[9mG9]$P(9liM"oNZ;^lE4O8Zs*fa4o<2[>3Eo1SCA/]Q`r`gJoH$j
%2!r%>HQdJK0l_b;h>6nq#,<.3^GP#@#m8^I'I4R:eOm7#bP/Q>X-IG%NtZfJ:HMIjf`YbZ<.ZoFlE^po*U&E`co3XQ3dWd7m\)LE
%%ETL<iRB_1B,^17W9K)2YdrG`2cQoe7_?lunXb.1?IX5s&2pOmMMn+R"b#0I26!h5``D<tB),n7nqX`j.?bRX&?OOf`l)S^S&BK7
%4&=M_YWEt;SDoRoGP?G$S4?R;%%7"'M$#KQ$DD-W+,,HH[M*.b]G[M"cjbuqnBHM*fhco87i*Cb(Hh2]N/F>H-\PsJ?Uibodi$u^
%7,>VgM;g\=Y5>+-F@YT1fn;2U>=)EU^Rk1>7,>VLXST;Hs1I^O;Yk=eCQu"!7o%bt%?2lX-Wp&GoNte\3H!ZfOP#NB=rcqa<VN]?
%SYp,-n$=(<;gi?5lQ9%]5NJW>en,Zaqt`f.HUi8*^<s[jRITRcVmV-gms&IL61_+A_$iH;Yb=6I(3D@<U$:YhXb"%sLZl1d;N2%^
%JLZ8BSrhu&hd9PjD;<0)9?E"SaEOl?I=+5-+B:dG(Ik:8D.PND$`&C-W0t*[>fUm@JYnU!T4$(Ck&?+,qHV>V?"^Z\?[IGbpQ.Nq
%f/Z;O<=9C#3:.3OU4PnM8C<7qW@1K!R)VPZ7gpW3KO_CFKOK'\EofZ#)80um%4br.h7i*]prqtP^O>-[?VHhe/#cO(en.kioDMJW
%#jGcWl;^)g^"WPJ[2b`W[ggrLNk!ikR?M#\1FRule4$ST_\,%)H)=]8&7Y,%Y<Lh=P](KBhg2_Pp>jf"Sa.ee*aem>DFLRtDVWi`
%L<j5q*O?.*cKsbM#W0CtiU!2E+=-IEonTp++>WEKfr$Lk;pA?FRdSVtWu%bV]K$uOeK,?JqYT*F]X?@-0>#jPKdb8"Q4K>>"<q_#
%2tjg5&Fhi#n+F]RQVUMmWbuom\sr-n+50?9/U,.Sh(RJ,o6t!oc_",(DB8se/h^L[oslA<DRm(^hdJ8I&Je(oo'IrVCZCMlF5lW5
%]=,enK8s8V/B[J=`:a-OS:0)=CUG7;HH*W^9_GFAH12[.IbMBSg$\9l]l7a'iO>lU-PI-hqr60!e9>spF><QTDeD5%bhcX<[+XKO
%PtU"`m2?=K6]\Fb&@!=1ZhG^de*RY@b.W1.73"W`<ip/B*1E(7`q%EFlRqLH[6)+&ThK0Y5;M&RiOIE%VX8QI\N-"a[o[t-cO'R%
%S"*2?%m5U,<jYj*WUJeb3F\s/NUglP+!0%cENAaPbk^b<&^I&_:K>OBCbi1;$ih9f#>An<>DJJe!ul_`%;XH-Z'$+k?t8&_D]OD8
%AiL5agdX%42:QCX6diA()r7mXS!uS-N["n_FmHo7K7=tIi/=uT/iKgeEe;rf5V;qX2bLe?OZmX[Uj$O$g?pNYhf!_P7XD3hF&Kc7
%`4joIk?RlWo\)tbe\h]=Vl/b6`t]n/WQ!#/1J)]%2bQa=E,S&`ElpiOZ%!elf2rB4_nC__@,--$U&%4UBQteMW_R%-nMG6/ceAnf
%]eW^nEJ^Ic\b7&(*FOnGoE_D\(JRmC3br<Q:7Fk&S6]4-f069^0Wasj!Pa'=HY?EZC/mJMc7$+X;=u:liJeG934]),C!(+^\m"DP
%"5Rm'Eu6/1XgM,[Sm\"Lh/g_-)];@,etS/.J<%0R,ATW,1!QD:h7dQ^.-=QeGPjd[k.R0>,dE>MDf^Z(0I/@i6q9A6A(;q78aICW
%R++Lt%nURt#E<uH'\>?78E)&ffIEC1Y#aS:,kd3fCc]@j'p@3n8`SEDb`Kd(.7qH&Nf^&,Kd;['8P^%`\=n],S6*!u@<g6"=L#`g
%"$IiQClDhWEubQCAlu,GB/?;LV&dM^"#J>s.ot;eV#Nuj_S0cs.>np=e^,Bh<p6-_5?k4n_*I[!.bVX>j)B<T[@3cH@K3E0;\_E:
%@=QC6LQQ5lj96(+oriH(iRm0*4D^MBdL:MrDY8+u(mWXOJ&0%j!5Q,_A@9:+LGOe]S2Le.>gMXA*_+q4<:+YMQZ\dK*k8W3iS9e$
%AJ=o.-8\P_'g-<#S>g\q=cS=_$%!t,+//!?X5IE1[DTO=,q8[)4R>8)URbh?(-Lpsml?#PLN\6s&NbsS4__aMmV7MoI+m3V&'#3A
%Ro(k'X`c\@7aSp.iNsu7B>MK7FUG%,aR?9Tk`8!TL*h6L6V2T]Jqm2R&LD?QHAu.uYhP4V/mTu:r.9^[d4s2dd2F$hodk@?mA43H
%%CA$!_*bf&c"`$9HUCIi]a>h/DOT)c]6#s%0&CTa_o]gVAeo<BYNO+r/ip!QN^X,_$6G41Vf:(9LLD]Qi(!;D9N^e''%?RX"V9?k
%=mrX1NaM:[]@u56:'EP(_8DE+c"m_.NY*<kZhrCRG1_SIodY2G3NG>E_8G\ULW&U@<C8"6;(iNj:VjsJFUG#rGj&=&VCQHe`_9M(
%YZliqB[nI^Gh=TkVd/3l-Rj;-S@,D@fHK77=7EG`q3h,\GB@eJ_8G-oVPYkgk^t*YTtuj`Fn1->h6!LNCaLWVQu9mCYG^pS$47h4
%p#+=sLMGA;.X9SdWZRWQ-80VrXTijbB%hil;&EL_N()(Hj96(+V0fd4;\_F]QL=#1S>tLUZtOk.0#oPgfL,A&7DZlJ@AVEh4RB4o
%Lu$:Li8M)hC5:LDAd/DLdmV%+B^hhBU>TIh`Q'O`oE>c]^lnQ<M)^u(_8C06";R]#)`iD/Y,QTsc`aZ^&]ThR>u]R<RFu.7nQ*<h
%H7SDHR1&:LF_HFm2R5[oentj)r;Au77l$)[3)t9-]ZTQoeaKm#WFk6c?VAeQp29BEY>)HSmmO`e]c.6Y_k3j)m,uCmouu2p=F#%5
%0jB/,WRRP*<7f"HSSL.hg!\K+oqPUG"[Ds1C[^!?2`5P4:G+9%I9F:goj]N,s)<2Rm#U%.EoH]M0ipTQgK:O0s5#ngkMD8T`K*eJ
%?BrJp**%4VSe#]L:)AfH%In?%iMS'TO!!2?cTXNV\QeuV\odN;ij6m@Z1IFP`t**<](Ge*"IFU"\\@_/a$KO]h!)g[H$A6#h<Pjm
%q9f^tmdF49D_D(hGkREtpA3h_mOs<`?@28<dF3fcb1hmZp>O'@Pq2dL7^fdKHRmkJqrh((6_8dPHMXdN3rN2E]D;'b>PVTJo<W]A
%lFr0LI(XKBII5^<&*l#0!:Sh<e"<hY5m>"!CmpjsnZJ3c%M.jLUBf]8WgEjUg=u%+)_*D1]=>C+]TlYR>S/jP?ft3\q;Oa(>X'h]
%?9#KFp?Bc@f+u,mY4%ooiWGQLc[J&a3/6qR>;f`/iV2V]E>KVSmX2tZabA!Qa,ePXM^QOP]DjJDk.aF<858OO2@84rH>*8'Ooh;6
%`2+70RQS(XHfsMIa`FO:])Cd2_rpUYp@4Q1oj:d<D63b"^:[O>rH*P`f`lr,<po:])kW`dJ%`BG(Z&q:oCRfT=-jb0b#^cl&6nti
%mDe8H_C<cGo?4W%cct4jSfOp!5(1-U5H+tHs#bg.i`3+=]2lR(7F<Shs0W!T%0sY<,e[Lm/nbU*?K=bXF&pI^IT?D!04HoHU-1HM
%X++G]`IFn#mFA34kOu^jg"uS^0"Y&]G5&>.S^herpQkMkhTT%SHp#2alIjs!VSB0]*SNO/?D5+NXrOuZXO1Cf/Pk.Tf'+j%Dh"G9
%jQ(MD[XLJP_qg4bHa<;#2KX/.ro/PiG/"l%l,S1$E?g)P@PQbIgZ.d]*4rcXm8L`Kr?39oB]JPGXMFZr=Oj#`/XD_3,u\mt%bXm3
%[!"<^:Y$\0l:ZSJr?eW$KA?CDK.#<M.D0rf/?JXS6p9R'[E+Zc"NUe.akEu\lPl1aS',2'J%5/snDWBhrM.,_41B,\4S$P@)&0Nm
%C-NDPm8_eJbPQWf->YHf*jFqQ%u+.kP?Z#0qhlg\hRopRCd.^/ps8BOj80_</,.)O^%qVMA,Dn9ofQH.nWqosp/mEUmp%O%H$Qi1
%pP/&tfS3Jtft+iscW&rnha"``B=VH*MeDfEI"S'$qaouUFt\?-lCT`]oKNkHE;*_BqadpMAS)m-8^8<ci;R4VoTI[1m!N!l4o4fG
%cIP5Y>M.WA1t>+&ji&]ZT-'WY?*0IDrQ^ue7c=^CQAfre:W`XW-ju#\moo6ni-XSKQg_c%^/=oUnSAM\b2#i%^JisU:[`ZB!/ndO
%*pgReqI4eaV-;a1gV*3c19^&J01C'TrfVq53oGotY.WLN=FTouoqFP0]meH?)mH.U^6N!AQrqLH-B(B^YEp%XSc?^Jm^'#;:DN-,
%\?f'Lief%Vhlj(fgpsiaqsaSJoo#m/34;mA5!7\NF6i2l[3(<6L2hA?ZY?n_)#C'uXKVEXR9RjZh<ZLbJ&(k$^bWfR^&A>Q?,m&I
%\q)[6=s;uVP"lG!`XqBbF?U>i3!_l9bjH8dCD[9e54FG*>CC7Bo?$t%MIr[aIWF[QPVC!hK`?M5nN&i8n-bnulNoVaU.MH"<Gr:+
%^UCf[6X4)=I_H'_B']&VYBqFX<C`p6]"e43e)mou<PNI?X*E[Q12P;XADkr=<OlF"79D(J_]S;\_M[DJdF?$p;tWp_67Rl(^2rV_
%[nJZ$07tE!o>Slp2JqJM(gsRq.oD]22O46jP=W3sCh[kAF*m>N;24P+>Ze`;Z<gWn)Jm3=[MDoshHg*+jXYO./Z_-aHZNV4rPHI+
%Pm:sI_f$VKXDRNDn=S`peN;+O(R@im<u4mRhH^,AnL54*cYHhHao/7jn33=ff"8-[IQ6I&akk&*iOdoA)de)r^Y=!ZiSf^>a-Zg3
%g:@#OhGR<ll-./4l[&`S6N"'F0'"D25G%b\)N#oUHen[6n,00MnG/-)Du6Fcp't-tcYhV:E+QQTGXj=Qr;GR:6d)D+>^1<u-TaNd
%Fm&DhlH?NTA$DN!He0Y2qSCJ7kJ*Y&`4'sIX/R0]^qCUKB05(UVlIj/+r1mO/:k5)Jkj9mnkn3<$<M2kfl)t$ANtCQDV_q>nRc^;
%.,Ks<p$93$lT&;mS+^_jkL%,bNQ\Li*pa:V^,t0Mqs)f-WJ,7rFhW.4YiEDrs1=J<mE*2`h+2WFV";Un'dT=sbK&JUMW]Zg<lHS7
%p<rHh`hhLTJ$qNm/NqbB^].*DnRHWgF6D\PIt$hQI*T4.D%/+of_J%NBFfU/ot2siqjUq>h!W[DX)@d;q=RAk[,?#mp\BNJVJc(R
%I:qFpooA(0c)^eU5JbjQ?bU^?$gd/,cINMUXMlFL92dKM3.#4FouHeMd*s3EgUG]dekUdZ6LO8qe`@6/GqX';0!&&gD\n`>q5d-S
%f*AM<cSP@q3XfdYcj',(#O]k>0/1MU+7fcLlY1ZpHF!)5p=5XZ#JV<5m(S\X55)_aP7sG=d5f(Aoj."b'8GOj?gVV4>c6/]>l=)t
%i<M+2::JO&o$E,q4^Hh\le;$FF/k_/WI,3hO/-jPQ[SdE*L2_9i.6a[R#.EBnL$F(M9RANm]e+?\d@Pi3,Vq:VInbZS'Hlf.n8sY
%oHu5&jJF%Shbg`f.[6bDB\QaDN%+#Z`SJehn(G_Cd=]&X44dPk>FV\N/m[+T\bGF7k.Z4eGN8/4h_4Gi^3P43q#(-Y,)Uskl_hK5
%\),qPO7qkF`O.rZ]_qZE[FMC13.8q%>ebM.d]qK<B^;&KCOf"q.m^mJ!kUSlF*H`<QQJ..5CI^$q4p4QUuoG]Z2Cm,E2^A$4ZpA2
%fR8$mjs.#mfnXY+hJ<;K^m)d,h[F,Q\*M"%`EW7bXh'(3:g:1&p2rS@j6'^3Li&)W2<i&>T<Xs'i6!iEi8<T7QZ%:u3(C*+ZY3pM
%F>q[RPWbD6\KKu-:V:O8ER<I#n5Wu$H/Acqc=V*7Ei'8poZueB#*dA_WT`ImZmXq%@RTsKT'BK$kin\-0a)YrOkod((0+[>mQOp&
%TP:0%5OSR%pp7uUQn_qcb[l+D?FQsGj&H>T&S>uqqJl]W`Xh1-2tudjl7nD?l9A@YeAH;"0)kIbQ*jt#e;J?WW#h['_i==rf5GTq
%(Jb8#q0Dg-rA33?FT1%?V4Fs51A`lr9a<*IY-SB/*F#D#BJ6S0A!5_@]%23ApATJeHgB.7YHN-Sjb9>SCYSg;rl=J%j/JNC5th0C
%H]/7]@e5#q\g@8_`D-!]-n<"*FfkM1;B\`ds5i!n42BP9gph@sP9MaZa&q(Z(2&>Z2XZbjr^k^Z$+!O![<@P9RHBD$4*+G1msEA-
%S8_8m2T88*$%p3,S9m0Q,tlXm^,nKt,obm?iB<\"P+b\hgbUYQ]q@Q)U%^):jm(,Y#"l\C$S*ls2AT=WMnOhpKB$2*cO1,]+9-`k
%._iT'G.A$m5gVbJ/AM(o!gCh\I**8VDUgCPXXnQPK%VU<;_/G3g2&VbZa(0:+O^QRJgn[l8L<WC1`E?m)bIUWY;q;u@jQ^UPdZ#:
%+'WeJftg1,>(YS%Z&f%u6/#^$IFmQ<j%5_@deK#pgX5S_eu,LJ[Br/l54.\1e%NfR`H.8Fp?FHK9/"Ja"<$TP5JA[i@;5V2KicHG
%*uuI^c5godb!5HbE>a%NphKrI2SX5%C\qW;k%'_=euLHRX;Kj2ileZ0O3^#lT8-(ZBm![p6ZjWW5J6c;oC8#ohtH(!n>EsP"ng@+
%<NSr8Ra]hD2tpD>Z/==uq"4CAhWF"=Is]slr(4<%ZM/G!l5T%jHh_(^7HFKJh07*1TABI#RHVu`5&NN05Q&pbG6Ko(m-YOrlT_rW
%Q4!QKh7#N=+5VG$H?aB-m-^e/Rp#0niVJ%0?^\7:IP(P%/rfp:a%;C+15FuL_90OA5PnDe6r*sSQGA5D/7`u9mEg>%+2*r?O*6R9
%dsQ8/p4[GNQ.sX_gBu9\p>bna%i+'05NM8p[Z,Loi\l8#^]/q*VrqEm>@\5"/R3_o`C[:0oX!]'*T>#QTPEQZ`OEOj%=[o6DrZst
%^][3-2*l.BmC0cQE.KTjfdcLtgcJZ]DnQ%1_-pG8(q/t/_*4Dm!WTpOGm>BL,Uf$;(4L;CN@o*2]6K-E6iCJeh%GVBhjT7[XF%1K
%hj;)?$q_YqBDqDa-[0!hBAaRZ_E(Ld_;7:]ppRo;IJZgL?G(=1oAe9r`J:Yg__^9V6l?Db"#]jc([^quoX^\s;uD#chVKoeGu^JZ
%`!/\!:Z6Zoc*"qg-gPa>b/-6P%V"6I!Y"6*a\[q]KCgASr-UnjD7uh4nGCa![gl7MY#W4HXc'tR*\8n276%r/07K]Om3rY`h<P-u
%QKC6HMf:hop![/sXl\;T&bb)jcM[Q-^Gk:;ZlTFBgJ+=%o%ka8(te;I0#H#L4)Kc3K%"c(Og>Q/dKceQ%=04&)SdTEeV5]^1rUTA
%e;<@)-Fk#P>'shV`ukd*8@Cf[k!Tm1ag^(N4jcZJ!"Jc7_VCWj%DGqo>+aqj7;#QbCrU7#M4RFgcatiUr".XdU;sTI)c6_0CedN;
%Q?4FEjrd,5$`\b]U;sUJ%6B;i2>u3e[PS[*Y@%.ue[BHP?;5o3a$8J89D-TY=N<3T&Uu];/)dElk;2=_B=>SHke/LMpGMkdfcS%H
%n*u\_m#*f^PIB94Uijms3CO+r8aEuHbAAVD`)3?YD:tPgamT.K.hrIg>'CqHUlB_>bt2.5-Z-_W[%4SUd7NZ6qo_,Dl%KL,Y90,9
%f[%$8!uI_&H4hEFd@\\76%FrfEuZVq37]4H7s^?1J$I>Q":@U>l'R94SFhq5M<s<\'4=N.=34%?n]u![lBbmRGmQs)rIrdKbH!%#
%6U8BoK\R[%+RGe<Ln2:=.c^_<%-lRiTI`<4r:1cc_/?;6]I7n"in!]'N$DW7Oa/jbb/@QP])\u3-&fZnk^*TpgqTd6P/$TEX#Qq9
%'C5ta*LNOh^Kbsac"e6.FA4<sTt\X/Q^08W?X12+J!'36]l_6m@KX43^LJ(_&$O[Dm1%,i8?CgY@HN%O78@:,'CGY9`X7/WVZY)u
%db\p/XneenC\Zsi@Dd4$[s$e<#)@Rp?2H:iB]R\%YM(gPIsV>_=Z)B$rL7S/,(Lpb>-,J'*8jn#%ncfl@0WMU=8t:8Im2KO.a"Ce
%%3:)43*8*/`%Q#fDQ7T_o?0$moA1UGMR\')G5:UoO)j^Gf&u=777;@T?dK_Tf&F%M2GK$Co&4np4g<p@guOZXk\$Jl]sPKKjS\+`
%gE4Vnh_uWqIXME5^1LTQ/qVA<+62IXk:X471&$g1FHbSm=5B_o.S;Tq;Z$?H3ZK+0FtN$P%aR8V!'FBV7i3h6q/!KGnpOK@Vuq2(
%-N7QLp\fjKmu:2TI<mXKlB83=X"N<`<9'H@qPV6MmAjhYT+78.c?n+>'8VaW^\]-Y(ol0g]][n=m-S#bh933sotr<C07EVAiQ9rA
%?1Di#hf@cQ"-[[qs2Uq`TfSYnoMGO5[>s4?C?1j#ohW3'Dlr5qaN/jZi/$%l;*#]mo#q$qS\NMLI&rV-cc,&6k8Do?h\:sP4BTIQ
%b0U*/mQ:\ZlHnkQf-ad%D)Xp,W:h6*a+DSj&6+#5Vdi#*(^Ol49emK+L4Q"$23a+)SKJL9g])V;mOq]YE_r**3FB(l*9;7YkLUgT
%rd8a4n+<4_s*UA=fBDe\?gF1?oDH_^j)9:B-RXsNrh!OZhi</83ViMermL`@k+h=52lgENjQP@gao&/YF=uCk?8EkD&/CYk,g\^>
%8G8UhlPlJicT]!f\FXq<i`b^JYfujF@U(@d/1]=9?-tB*WuqB;#[S!nKpCP^*^NcTcGEb.LOgL*REUO"X-`D#b:@Asp:cg<G]p_4
%3]&#kIdQFtc.29,Df+:4IpT2LY<3cjI=!E7m[h.ARI.ZBHgu@LlK6VAo.8ZYJ_[YO=Ea$06cdY\XL!*YqtK"g4\b!lfco;3j$[aB
%pZl%qCjuNh[Q"27o(XiKmpjjj*4"s`_MMpK1F-j2jA;&<o%qJiF/ba\>%7g7a/^&jVVeF55<n-.f-a@V[kgR80A,>mB.rK7SO:s9
%Tqs/+/2k5AIpQ=+=YDC4IJ<n_XT%CPT-lZ?L'r=B%2\Sf]/+Q!X4c*K1dqSm(pUZ#cD@;G:")t@504f]G'cK(n_rcjjD+NuX=`<,
%8@l@DD!p-KN6AVKQfd#3nTNi2-etQ/2K!oW"??SP3i;7]VNY$Hb97*>,?JZjn/L'&q\u,L3l#j6$JWJ+\`a>POLY_^7&<H"4[gae
%hcn\pa4Bi(Ms?p1Em8.Y\*j5G^4,7m-W%68eim%c'8Cs4?OT)1oZhV9epHMa^89\e>)i+=p=)h5p:M[[B-Wa]<=eB[`nn^hPK,aD
%O0:0<VW<$jdTeJpiT'OG=`_;a*"'PiOE^Br4j?g]XiA&"s('riC%%[,q>9-qAbFNQgcTfLhm.%j9r@XMr?8X7*=HZcpK''T&(`Ya
%!K#LZ5G)0:o@'baB9;r]2CC$[iK-8EF7P6u$iE8r;=ErN3+k$UI$$Q/79m3]Z1J!P)7s8%4^WYKcHEE#=ahUQ=Ah@(k4Y]_cP[b^
%rPmOgqH#LC<;_'RGB*H4jmqZiR6,cam[V`7"[@M+Zcm=C=Fk\`NASiZn0+>_L#uW$?8*e9]Ii:=\G0\)2u(HW2pQAdSiql'@gQJ+
%>OZaiLGqXnDp-`SLMh+>;-tlo@[l4?oucLMg2`/hm:Ce>h0]:O^F")b=RrGD>dBt0:tuKr9o5:R?0j3hR=J8/peURT(Z,FOIVp^L
%0k><OY_kb!ZFK6#4T@:cWDW[u]sNCe651NGHRiR]k=j0K`IQaW*?>1U`=p.>>q;7u.&S/sCKFU(TPkc]6r@$Qc0]Z"g-j/iP2`e,
%rG?MHM/s"qQfd;%Riu`uY;a]<]Wo/M0uu)MrcqFl!a;=JOhUsUao:!8=Olif`dLUU5)I[#.^c'Te>S\1[u>L"7?Q]!Kk7XG/.)g8
%9IuspAl2:OAmcMD2N(=Crum]UDR8OH-@VP;A[L2CC838U[Z$5\0q$NHg2.VueuU;PUYU^Ao$C<>7_?p>?Lp7TATX_nFuGZ6mV?5_
%oM\s`]?R)!Bmq^3K0\&emPN6bBmLt8;';DcZ&EibO>bE[?lA>iMgG!]Pa9^:c*J'e7_?p>.APQaQI0TVBOIF&`\Q7b(@?#s)dsWO
%IKQ]tG&#36[op*2UlB.-m9\SFH$2NtBX_+Y:YI?NU\u26VQu/(Rmk@OcZWM^qjD)p[Z#B._-Z9W5*jTYk1SEi7_=`#-m,JGQI0TV
%k[]`r_D9h^(,`+ckq/[dAl5>hSDH$TD&,"Os62,1h.BN"A!kt*g2.VE:m?.HkRZ=$]38aghnM>;1nbF\ZqBrgpDeGL#A\2f(GV'W
%Y^oBn/%;njWd'UkV>/O;B`B-+J!tPA?G=Ra4`kV]BeK'BY[r+%*Lb"N)L`E3HaW/,FLKeUrPrJrID"FmA?*>RY[1P/ac(PkYFkc=
%A`_%q;gIbe\@YnX3F4HiJmU]FYWBm-?Bt60CW'Y"Q@C!+EX@%nC$+:NX)L1n%8=duQT)>J#dR?r9<n*a#r=gEIe?b)F4ab^4>9")
%&"n,n<`hilG49MSRX@+\iKP@1*pVh2m,7V*e+gQ:k9!uQ?E.F^GPV#@pBs9GTttR%4^6P[4"^#KpRaDs1-bO1VDGQl=gqO+pj)R$
%(^oKf=,$HakKqnRhf*GS3</WoAiuT1gQ17Ym<h*=[/'4]lO1>nf/D!=I0FE@Rg\fQ]*+T]lGU'LC@@f$!\2dICL`8G*I#5d^V"c2
%;(n`O=sGI_'+<U+ba;M(m2jtMK3CYF6a]0@W2S9^8@@%%cJ#<69JPt"Mee\8)tT"U`Id9uaD";'(45@e;,p]9V7;pNm*bY:7H]1E
%)+5_[kGh(snLGS9A0D2PE-ohX$U7nHVFonQ!l#9(/3[j5WAD;&gC)dZD0EWJ4>SZI<&Djh9T=m#OYbp811OckA.6%(WlM`>Z'NP+
%DqpO4S"=U59V[\;"jEPC]3gVua]$%='_LVMfC/2'8TCtWo&64E_o)M$E]Wqr5-P!QWW2)OCqd"6=]*!7bN904L[XF*>/H?`q==Fp
%C^UL6S#=#Er]0iJcaU*5VuLu?&n92U%%l>1RD1S^^HPJ$?_1V&6congkNZ-lBP]h^JKE&6Q-F6aJ"H\4\\EU2&,4S'"skeB\sUeJ
%3R<Ue^^hX43=JCU=Kku-OU`Z7?`AK&CRLI<r:<9h5gMa(pj_70\("4R.d[2ZkLod(q,_L?q;XL.bD0iT17*Vc27f)d"WLE7Pk/5`
%3+m8.<XKn&Yi(-b'@hI_1Hpn#SHDtb2)=iA?<$#Oa:R--%2:fE'Np5Z_kJagXK$n26mW%_e/?*h\=ct8]3,P0R*1')KUaDQAW..Q
%*j$NL"*(\s((SArn5K%?OHjpY-!"*Tqfgf*0uj=@5c/iS]1A8PPCo>(l&B/+3`=4^.PdlIdJXf48uP$">ZQJTkS6rZMUHr[ecSt(
%#*uhnKpbA\^FEW-7A].9]>$l*#^7C1<*>#-0H]A`#;\N*Hr*eFVp]E*)s!jm[]9#0bdUad18\8U4'@<2*WdE_H/iCWZD7_H$OT,$
%\l,1BK2@3m+(t<-]%Ln.%r=4Y@N_\h[hWZe6.5"\+ij\fl=^=KXdF$+2HJt]g]YaYDq.<uhj;\_X#?LD]d_b;C3:ojp/DcU>A%\!
%^4F^a,$Ge!5iK!YEBIZPmSBG>>9AT'SPm3c3F9_"k3;sBTaB=++4N'aJ`711.R%>L'Q+Q3;BLF)ZKUH*_G/[b==jbO,Z\"*Ko#J)
%JX*1Om8_(T(Noe$D.\m&%;KUchSYPco]5>i__3CXo,g^<O8f6q+-nM)YGmej1\EUfFa9t+XG/jY7%X2Z;#bb*_q\U7>]m(qh0c4$
%XPd?s,ANF0!Xc)28]'I:RTD;qMAh+NN^BaQ55t\6>%`O5Y.9oQGq%7uAE(oC+W)>:"famil<%)-Id:\,T!s%?XB&7sUV%41dF=e$
%l:+%bIfg;>g7%p)8b55Js8R?300-eS4T?Dd@3)^OkO9:@5)6n?LdJ-h>%fbj-:t&m(MPpi^R9sW6OQi@C2@?OC5m((8[#CYkpSGJ
%0dY)a2Q!5&fYV`P)k34TE^LLSg5Wk8P'UUWe'W)M@QFjV9h\!ndkh1DWE%.rm%U6ERpWpYSJR.hC4c)Iaq6Y[.Lr2)U?ssu$Ao_'
%i!8pbV1tMF`"*t\i:+nuQU(N,TN8uFREbe6luZPgo+i!ESJB8j131JD,Y"3Ui]K03R9(*/O1]cB,fPNScV'";5,_(S'"lS.o7<(U
%ElSmD]]',s5B5LlOdjA@X]8md!o[`_cP/@Oe1\`o`bT_L8t;V:`PC7ZOQQ_;o1Io=Jhr=ih!mZ6_sOq;`q$DZfMhAjc`88b<#m2i
%Q,6u6^4>Lf<'lB;HhAc-<N%jM;Lj<ec3s<I!(+c&"l[D"-a\Ik#n#["!B82>EEiW!e9r)pCd]k1g&TrbP"2hc<^nZ_QIg9tnKkuU
%WT1gKh+u.tJP7)PK'?!>E,K+5182.gXple5,%`ekJu`Njf'7bp6Tg"5ar!f5=-T]$8S:T=334$g:aY_L.Z0V8U=M\1j(*;05?9-5
%W4SM'H@q)QKBh[k&t7qIA=*-cGUZe?F:3t?ajg8X>YUZfl_-Sr\Y;D%\<.ChTcV(^etD$;E]XK!*Y0lC((q\a%(EB?RjbOERDCV.
%((0`K!jMqA;pAAa6bPYjB,TkJLJ+@-I82S/(b,o^=%7b/H4N[WC(DR2$5?g)!k(Jd9k@>AR8d-gF]Tb8i!eO)-sfB6;.a!.kH\W`
%_(3@kYc7_^>aQ:!c>!dqRHn!dM@#Jm)'iHs]PL_J-jn4QrjJj!Gh"RJ:,KsZL4:l,#\@R,F6G0q7?HfU_X]0M*JUY)#cd\-#n7U6
%=@csH1Kc1SP+/R)i+>s"@C=(KJe8^^KSU%@-l(WS=od8(\_5k<QI=SU;3^o_.-r-+;"[\T'-`!>"t_6(.T;\gZqpgBLLX0,\[mm!
%*^`pDG_6]+Wu`gh:C(%o(-qt.g>etM<1Y=_b"CSGC41Dd=u3nX#'$f6Ba(f*>>X,[6O<lXXN]Vtp+&sVWm#;f+p/ti5fJ?`o8McG
%2_kjJqCK1*hFaKVPsQ-J26I;3&9]A0IRFl=J=66WPaZVAS5jeee]cMu#kLB&?K+:$nl&.mRYCK(T-egZ(t(dj+*3/A>(KB4CK\RD
%COI$6NR\uA/jWpkOr0RM!$DiITn07L"LnL@\/UlAi-Qb,=;88V!")Qfl%TpZn^?Dpdr\%.nsVL']j:so11XRM&H>UsP>a2ac4q):
%oMl'd4jt39D1>lW'XZ2WIZGMN?T\"*P;`=h&#6pM&VB;eX^/gI#J!0%0rk<?cEj#GXF`K@n17\]:Ck]ZG/U[;35t7e>mn!4lG4n?
%g2M\'CQJWWQtqfR'%]JK=E8-L"8G&S3Irb]!bjVWGZHTTAI>GA/FA0)2Fnjq)BOg(4bE!V:D<@OoHUL+OF"+TPk21;R!O[22ru$(
%.W`!Wh>dOEDXSO2H"fNEjp"d*Q`c%D1tT?=Nu,,1bSd`'cMYA?Q%d_[oB;Q$3'&Ar&",`9iM)8r_bk0.kf)GXoG2Sk:p7"2EE%6W
%[95A+XgMW1Mpfc,RQX(DXD5&=":s-`K%Iea9?iJI,%e@qoc+j@Po8;SprA?(q5Xaq'NS@uQ/(/MU<n9+".EB9#RpK#Jd6\"a+:'r
%V:c&Zl[tk/+.#OS.(<kTa'%P-lJiQa4A_dVcj8j3n/n\iV9BBQ#P,0ZpdL0"fL66RDDB`R[Vp^GN[rR+"s*f*>6.B&,"DjM[:50?
%,FfSHG3[lpnFS2":E@EcF?5FcEXf%([k_?^QY'b8B?\F!C(#)FTV*S#qc7@N>prO:JMA:`Q#2'QX'gVdcLB*)'Q*$gS;+&`$QWX?
%2)+pqiK.?QE!CNBUI_,^O?*l^@6gjp095$m=fFEO8j0tdj&QO!esW5DZ:5E>q!X[7L-hr]e?Z<HAoX'nR=k-YA@AD7oNMKQ\m_eM
%;D$'DMo.AO;(QN9oL#IB+dQ@*,s9$J.h.sOC+M>';N4/PR\41Vp&pc^]J/\W%LaG^%5>5&"Mi;<*.dsc/G-u?9.nC;2k]-t'e%8J
%F1\gtR8B]R7_Y2)F'BSW/RYaW=(_4i$gIrGX-$Bc`GpAA.j2u$L5ea^hh;8#&sBX,eS\!s_D36;7ts7,CM"H+`PHQmEQnm7_cEk%
%)W][-Z0FhV#fh1/L=[11b)Sc-`e=GIHH6Mn*\@aLqVbUSB3p&rLDg]'KVd&,+UKV)Nm0<j/2YBUMNGu%ip+`t$QuC``b:*!d<,Rh
%*G65Rd\o+SBe%m>_hFC[dX`?nQOQ.(1Wot1M'lS[AS._cd/J"5JqW/i14s5TmoTdqXL)**c?7/!npk\RYD$_ZK>oHMIOl<j58Mfq
%=YW`>99$Xps+VY[/i>"B^ju5(Gej6%*0b(#`^:tc]o@iI(mh>&c0J?k\Rf#dBbuDNXOn@=Mf9MjROBmb6t!g+pr>(!;@!b;&am$p
%%[d`fM-t/89F/J8G\k/)'LHjCjR!-J[:JmN#@)<Pq>=!GSuJE514Rp&5C&P>adb1))95]GI#hhg'.d%EQ"o?kdS*i-SP-5:8N&<B
%:H!LEQk-[HTYZD1`\td:[rKS_eiLp+2`^TqqLslU;A_r^%8@_8+a]Sl):+]V0M,->+Vncie<H\^##C%[8`?aFP%t[,Oof*^1mnn<
%P<s"OTXC"FP^\BWG](UE8V+HApeD1]8Wg_er_G!OdTV>_%7ENgO]6/(BgGWHPGE5q9bW^igS>QHD;(WuePT5dPh&AOeQ5=2=,U*1
%WBs8Cg=l4?.32_mg"2r8Cap$\lGcl\A5\PX<-bq:8)'9-.CEqh8"3KAVH(A_HK(_u3N[aJdoE:[gIW-)S%_"a>Z]N%f4GM'720es
%T@DQ7\pUR=f>:D-+HWlKZrn90-AePg,%9_T,&Lj._4`1"-qT%aMfC(Xa@TN^R`;$r4&TI+H=:Vu:#f4,N7G:\2/H\jQdN$kH%T;K
%o[^Cu3I>,&>q]msCmYZAr=^n?-B4-^Nmd-`d*H2l]6@r?(\jV'1r5U/Rg&-em&B,7@?n?g\($5aK5)GAXg<Ro;Cf&RYGBZD;H=*K
%`r,e#7]]LK[?UH8_.C*=9;-4BlF<g?<LA-9<nc>8OJqIPn"`!WMCl"h'rtK?6#`kj\OFo^=r8`d7]k;G6cFSl1K:gdXT=SIGR669
%!mj9X&2lD6_WjR?<(frg$K+5?bQDPR,69DKqLoM8<gKQ">d>\&erNBfLiYqh@mZ]PNokXSXS0n:D3eCsJi\B*7>T4R#'<sQ<\#s>
%3\2c>l#>bK0\6h*8;@AlRrm::GRZ^(8ZTlTFI:[]6&3W]fE4V,YSs!B5&4Oi;+h,fe^.a`'OQ_de1WECD&GJ5RLZCdUmA7$P:@5Z
%4(WBQ2:p-in^uJhisVQ/VUR2tX^BTH.GYO(T@=)]ab#[0."D2,H@EO'Du"D@q!m)0hNd-AEsb[\OO$";S2l$\T9&ef!FB>^#'*OV
%$0+WZ#]<d`l'V+e?tu*tIC)<?`jD\GNX3uRh3g=BfU4d\1=mb$[is3F:^=>J*@"c(Amc@``_"FmQ!2cCh\Hjd45`hkg<'mO;kQ"n
%QA'=";]UK'BGfc7]u.Bl,XlV-0Qe)_]MT\LP(NCI/aM+?n(#lt2+"PFV>X^@Cm;FEs.="nT;dCag41`T\`#Z8XC9(e#!1l$i#-$*
%k-)=DN.i[>@gXlC1sK'YVANZ;73+crR7CHJTkQf+/O*pSJU"g]h[7'dW$4aF3OW/FD_!/n3eRmSR@mA/1@Bm$)obQ'Q/][Q"(/hK
%jt51K9c`\LFCBrj:5nnHCq9$(S+M\!^R=B4@iJA'HIKl5pE&$Zh0a$cR_'(>9R6N?M<XFm:2``3J8HQG5l@)XW.8l99[Ef&R8Zub
%e&G@o_"^+eU^#uIC$:*coFr"5j\f;I8*e<rfKnYELl8TqM+[&ls/[lK-W-SAi_:)^%;ue%]i!,a.j7[<h\:;"Dpk1XJ!7/98+qA3
%d9"bS]uXR_<&E`1N!k`4X>M3;1G-e#,$EZ`EerMnV)bh!dtc;%32I5m/1>B\QFNdp^(&&Y=0.:*$UGc$DOB?o.`3T>egM8shP=>U
%E]tJ1`ghsASVMs%jQkrE>6l%ooTWHd0B)3.'\QNW5p3lP?-Xs#W&$qZ"j8+=MS\<<@.F"Qpbp2bG+DKh=uM0g26^mn>_9f#%W2B)
%3)W8.&8&e2Z!kMb%E!j7,IF55hU2m#j>LsGbdl:PK,V*LboR!IC5I]hT%3+G@%#ErYhF2N-JMe?3mq[s/SK'TbdCI,iqCaM<=uY?
%-J=PN]m7s6c/&YVj&Caf%e;]q\?7d+A6i4,FCYl'*4)5n_sLWpBp2$M_R\M9X$#Z:=EDlV(n[c8)a/DpnjO(gCP*[@f,F_mb88-s
%jbr-DnjU.e+*/,ih$MGRADi^B-,tjoE9;Y-/+2+F?2dSIO;I,S610C0j#^]>kYCn2aIVh6;:#_'\eAs2_^7!]0ctKAc5<MZT`[)Y
%F<qnJ>m\qM\=U:<`#ABsJkE7PCTX7=N0V=jXRR!+oT2soLF[s.;>[NA'mTA=1Ej/$?e4LbFRg3!ee9hUQ)(oQD1usTnr;.lFL5.a
%<PZhLp.AFoX;_#YKTuc-W\j0V$245b"N+q,CC55(J<O%`H0LbVZuL.9Z(ZCOnX@ITXB9GBJ$))m`%b4oBrQm/mAq%/E+@GEFMq._
%8)T4JjEu!?bmbu6Jp/(XV>(2Oo8tsA!(>Y$>(d+\G>,?XrW$%S4oc@Z%tJT:*ru)8cHG,KeDOeuai4Ve=&2u\i<^Xq\j$2rDiilp
%)RS6T(eIaRjBG7.Eg+h+\bcdu.V3Q#J9t`/RVi!0!)QNs)4pp,)"'c(V58?OD!lB("=QQ)S`MUj!l.S^Z*oP9!!i]28"%hu!H\ND
%$Q5H8#=`@AiR&McNOUbE(b;^]%!,=/!*sbi##N\iW[]t1Z*R80;m=*d;K4-;E[?FG8<PKKisZ&WBdb;8=c;bXjBr"q(YbM^n9(o#
%XN;?qO0e>q",Q6KjA'Xn:Uk-i+h>sW1@L;poF,($erWqjWh8lV&9o&.*0^`:kmaA>94N1j^po))dcu5sV6udBk.QX;#'Oilnfn]N
%#qTbnJe2Lm?%tB'@F-e;?@]m@I13%nJ,o?=@uQH!8efl,`TRRU%Os5J!k;CTmDR-KBnknFM7[pG=Dle!K%!/`H41.]!S'Z!@5l*9
%Fc]lR@&V$eGbE"u\FUE!%*t?P;T>V2nj.,g:[3F#^NIhZUfHm78ARQeo^40%84dd`@-P9JY*a*?U"^pmf(jR=<h2/t!CP/(huRId
%E9ESQpZR+?@/ngd[^R(>m,,3%+6Qq9lHc9#'R%g@Jcq4r5\u@3a2mnU+\A5,X;U5@WjU!BUtVc@@eqn9V*"2F\4`T:9<.-CHG!@&
%9\"K('k'_$QulSnQJW:9L19;[naHE0`&j^L8a:kq8u#Kk3D2$j;+^jKL:,tf$QX0cV29h/jtMN)#q_[i]$^d5aFPM:03TMY_6ch2
%egZ#0CmFfrB`ndt!iXm#Mn5XU*gTe,&K#.8N,^hUg)rXAK-3F$qk=0KT_"_\o.[[1CtLb[7d0-ImLh&:/d=]PPub4?J`$J?j5?2,
%qpd'=.@b^K$2XiT&^jnmoiIZ8G5ZKU4Xr%$(TPOs-Y43IE1BTkh1]8)e.WNTEuB]lBVFb7g.k=cW1'#C62]@TBXbe$`SjR5W$b=Y
%nOl9]9<<2U$W*+c?D&rG=P]ethLS?:m0bfPYVI_?YQ55m2Se;!#*;<qg:?&gAk!Q<^R[p.r1MeT[LLh+,Xp.];)0m/`li;jGklb4
%FF@D<br+(Q5D^B6ZnjW,O49P`2R0)pE=K6[_tlp*Gq!fBdVRRC0fEj/e6JG#@&>KG9rhsFqFI`bBp3>\387\HG?:5FXb=7.gQ(!h
%3=3;ndmt1Pp-[k;dK%g,WJ\r($$2HBd'_QNR`;b4+YM@5#6qcHQ*8.J(p@t$".Z'Z@9]F[MAFr4_T:*282O!je5DF9G,25aYm$t4
%=eWj.2Y0VkNmkB21e]FL(6g^*[@!QF2;W5\`hk_p&qY<Z3Q)b<gm\ohbjb['YfaK?K+"e4nsG)@GK)3oJEn,m1YO/]#H59Yr>SH1
%4brM:(4F@KdNN@i@\eJaqk902rL=et5;L:1s/(N%FY[m:N5b%'+gGOZ<G!#!$W2LkI(1qNh[:Un?tGF\a`X)]ItpHC6bg%XV2]dP
%khiKN)6.$]18i.ih9(8K?Z*u+<>oFr$/qabpL%CIWn^Ei!@)(d#Q[99c-4#^3E]DS@AAk'-N.^Rs*['BFn?ui>rJ,s+RPc9I]0tT
%2l4O\mCGj-\eU7g+I=MZ2o@a=Gi6*Rj!.13i&CtO4o1sWG=Uj6k_2oZc<1a-%,1Whfb!dcTXYppD:VE5YmuU:$?)3%$TWcef&Wnn
%0KRegpNOD19.l,E6[5s8>j04GetcFUdP6h0ncL43jJS;GLSIGOb7^':7ZGBp2t.W)9oDW!Lftee'.Ygg7cl`:6jV@te*[lSEJG9t
%d:fj!K$_G`3!KK=93(R7O$3b<i^U6W%)rk:G/0nV5IKW73/RkLX3BEc<`gEIK[d\H9lZuKN0j7uRV>?_JDcp>Qm:c(=+X.\hDEh6
%=J/;So\9udB^'N-9-/N*i2<MRJd!AA\0!>;ePE9W$Aeqd_:R<8^Q>Es4I@oYJD(%>K5`2_`f#(mOMPKc%orsIoXY[On/N:I&H18+
%RPmgS?jqL@aFO4%Of:4iJWMKj4"cSaThMM(_kgCpM$[0+RmOnu#79gAS$_I@"W[Y-6]erag\g9U&G.!N8hi@.MS%iq<o(\,X,pGV
%n-o,lOG3CL-<oKFB`AA+2qp2_NeJQBG_Z-$kf7SlUfe&Q0p!^P""$\%Vj:G?UBW@mrS3fVGP$Zdp;bFQDdO%GKC7G8Y/T@c.7piB
%oba`aXK@J`;3KZ8--7&OCoeO$m/OOP8iRgZ>aljMOV36N`@iY-EiX8;f/2/]>]+[jJD!*h5n%98,ZJ2%JXfcU?kP=8@3_jMgdnS6
%f,Y$/V%S@bV+N0(b(l)HI%:j)[\-_/R7gAXKM:/[6C62EQWiS>?KFed'5^+4AIsW3UZ=-f?#)qZ%UhcRfN/ogY:?Y[DSoI98p2mJ
%Uf04@Gjo6ofG4?JjFPH8?q<Lp6MY%D/C02+\;'ok_VgOL_.;%OEuML2FVo?@X(Eh8h<7ZX$0HPNa.df4D9*c)CVt*1%UDA(#E:O\
%(aQ`_Yal2-k;m!4ar#k45S26G/Jkr-#NAR#!&=^4a;L6.BI+$-@0<@N:.@GpCZ:h#/ek^L#7FAn\FqR1%b@_oCbAfj*\Z/%`/rTr
%\L%FA!??I+(^9Tb+o.LSc,dq9]m[3i1h50u2oglf0fG(O][Jkd_[s\&$cF$6M.!oO4B'Ln0Y0.^0"qs,RQ/=QWI4bC4hZ+pCS%LO
%Op-o5Lgrb@<_"6a.@12g6ntZ^r#u%0E&_5fG"!4mi@jR\(b"CD/sq9=/IW,,"-q+uM+J;!L:h\(l\!?RQjBmqpf-hnP41l;3nPta
%7]q&$[=d5m7ZSp6EX%pi['([/NT0e&:fu+$oP<M="%K7DUk,3a(sa_:fMDu8!_a5lk41)fN::4&El\u!1rpBMkuNmP#tbH$iG^,Y
%'sXu1@b+&&2"2K\rLCod6=K@2AN9].nf9]f4]'/Wn8n^RLG]jdi:3O,P)l,Q2bVn!!0]#E*Y,?+jGNQ.GoWZZJpO\r9;Bf5a<&@E
%;"_o?i<:>cNm:uDiK3E#Y.F+1CE^$BXID_2i5+Q=DCH!>5;O2D\U(JqObn&'.HhNlKZeqfRJE/6k+5TU?E2PlSoU%6#BC1%L?.jZ
%`_;/oBIrG1*\fMkT03ud_O#KVkm=%C<+?N*>85gc!(3J^o?J6o_91mkZ6t<7A5OcA:-*7ASb2&,[So[i/Q,jhp;e_pX-Hih%cq^r
%S&QUV>c0;"e.B^6nY-:[-SR!hjR5<f'J$i)_bu8hN'K0'Ck:R_'nKlac)TZ&Gru9=l7r&7PE3i8C/]j8[136!;-s[j&0%bc_'.i(
%Nf@%6FmU8D\k_m/Kr6`e7J&;;k3%$>/-4ur;&oKHCKr7EXFPV)i4'K&P6#e6I_b#S1,[s*EugF>92qQ+$"sUIQV`Ij?<,*A72HFO
%O>+pUGZ=pu%r/C1!XnkW"2g@nlFsH][jIq>l>r95#2OlY7(Gm[<N(&&bi"RI\S0?r,#d";:gMe4=p8ME4NR/-fQ-c"0R48IYr<IG
%OsG:'7%1iU?XajcQn[PH3+e<U-V+_]S:mU'8o2`qr;_UX%9hu#)")jh+nl.u^1EBO5jo#3m!pK]6PcE?^)3+hM,3&>Asin39S2"f
%J2F9pZ%gKIPnqL_;<HeH$_tjdQ48c:;(4+IF*H>c$Efl,Rf_&A&PSb?$s#e-ahsB)ZDBQ*W`<c7:[f,TUm2+Zfrgjp#GMqCZkPWa
%[uS[;$ig(WO(!]FHd3edAPko>7]t6QBEY4<N5HrXSi["+lUWXs\2nkr1RtO!a2I_Kg%;R&.;7=7Vo>CfqF+=I_+k5;!N"iI`qn-"
%2NFq)gqD6V^SfC1`MMRs7:qNQlE@Q+);pU,c.jHLX&F]F':=`)gNA_iW$jI.6rf@N'XS2cA*gMjd))W;K;bSM.)8O[%j^!e4q=eI
%Gu\&.$7cM5V^s<519Jr@4ohES+)a*Xi?cu@Zt+dHE:SoZ+-*q4X;A<ui''8+0$,2cdS>qZ*1dYlT_#rgm&BfhjAkh(,c3"aJsHg$
%cZ,&u1Ag5\`5ip$<`@Lk>\/V:*e]n8B#,tK1+:(jjV6H-&haoM;r!7f9'Qb&e6NcCi[Z_'/1IM3@"n2LL&B/n/>s9!YF(;pPE>;=
%Pu!)WXdCaHr4?(q_p'=M>/dlT7W<>20"LNPVK`8*0s:2#)&Fnr(7\3/";SD[cKap57Z1,/[MYQ)&G4q-Gnep`FKp?/hE/Bu8hO-P
%TqadoO1mF]!=8]cf+B=e>Qfg*"--?MD]k0)7ugO(OdtZ`G*o;d(eD0*Asqsqp5iKcn![3?TU$X>"BJ(66%1:hhH(g:gK&RCK[$eU
%[$h%]k!AM!7uV5))*Z6?+\EU/VIp;*1:P\O_0!CiOmBT0-tk+$NJdt1LbujAl7%K*B4::5^P.Q37ON-1K$4U^a]dl>(<D=KN^M.'
%)_P/Qi2CoX(q;\=9K,cbB+T2Ce[7*7"*>l4>/3J0AXGHIK9eOLShHI`5F39fKFu6So0HF-<_*3/TskWV!&12lN4[O>$*]:R@i2\U
%pD-cGp@`&UFY2[.X\Ao.Z/_+;:8eo7TMCYZenWfgPU6eF!al.+!`TAlojS_+<R)Nq40nrNOrI%,LBs?k\]RnuNZeMn7%Lb`h&HH`
%=1+>afDl3fBr8#PWQ_1HS,a$aJN4"mdPdc/)XnBheM(b1UTMaWJ2F;ZaJ-[(-MVGK>=37a<GS9YiS4JjDPAk)"G0j="E6Spa*DZ2
%g4p",4og15DddLY3S<<`1.l4^Rn80&WsZQ-k39[o@Bq^4bB7"8&d*R,H03bMZoI9LL'FigA`)Gp">OC[-m=A5&W@(:Cn>A,ab[1C
%3/VZh,V+5;"&NjGb@1n.X)<JSc7Rj+pdLn)$A'<L"(h8OEHk%HJfDqJEon7JYiS*nPO2TDD`\AXUX_7&$a#B@%N0gk=1kYE"p#Lq
%1dZMh3$]"f!X?JlDT$gVlQJWa:Qt;^bk7n_;'==3*>jkGoZ#f[%SE5#=k)6@b;H(q[U'BPpYgXR^I'H:K#"@R^_MaY6D)#;eo3Y>
%Xb1%]>-X7T$E/\PjMHU"e_IYS,L5s\UJ%@#QCSt9(mkaX@tr=2CR\+mW%:(7][.EKFZ7fsA6PpB@6G(*Jse>m=^g.Pb.;&AZXWJ"
%YZO$K"EV`m-Fh1b8Y`-4dL:d:VBDD.LFH`u:`tQ3&hs\)^kOXRi43$[ZcHkh\m$L)nlT!I\m!9=OHhsZD:",#1jK4%IZi]TT-QB`
%l`X_h$_,XM*HG$HO@;!n@jgjtnSK2gb@V,9;(9DDF(oo]*+'jOZ\1t.=G'7'\E+?E;jtn;!O`tHjb#kM@Q='T]jp?tEj><&V)M'l
%,\5KS<=X%Q%I>2_V(^&e9?c?#(tR"eTJ-IXkRj]ZNE@81GsUgqC:?oXaGBni@[(]8>S`XIKOg:CotJXbi1!gTQ'AZBRU_"Z'4b.\
%,C%/(HFs=A:q)AuXD7@bk?%rk=lm<#;9.VZW>S]C$E8^DfGUh;PZ>/q5n2A\OEmsM5!kg%fm(-Fp*dJ`0`6dS\cIcNjd*^pGaZD9
%V--k(2,?>MTi`5&'jG<TiS\3\3!7N20YI-?7]@Mk#C8%%.0>N3OVs/lilmK-be`OK4$Q#ZXi`E!dZgn$>Gln`+O+u0$RTjQR[LE_
%=O)t[pG.nJaEu&$C0ON@M&FO9UpsDq='R,Xp5M<A8o8KCg^-A*)eFE52'4!g0NrhBH`[rn,BKD9c+W6g5qrH6a#%j7R[i1Ki=,e<
%q[6CC=B:o0V6Fbf'\4sGi>TeRpW0e)<MoTofMk[cbLH*IH?gcnPXbCQ895Kh]6n/!kX(_q(Z<`6)(%ohVW%dCJPb'3(faeo_c3(d
%=,p;@1g^R.ZDngIJ;!,IXJsDp)ZVH(RL_%p)6>!Oi)igD>jhYsP6%mo=u-P'<*B\7Jg2hd0JR7VqA?HQq\\*djLV;UYS$V[+G4!p
%:e7g@pMk/nqKNij%DG)$V[_1h9O6[qQ,*@_C2-S`N\UE]OH3hH6oZ_GMP;\g":LS1#D]sKL[iIKiOFEC&86S=j/UL=<&_fs@nQE%
%Btu7$c;<e>51n@l+e_eKBU[/;2,m:q;q49<OTaS$p-7PXXG/+E'IDG12I7oUR&*rq,eo[T%[1^>K'-rhi8tk53,lpb-<]5,5.QBH
%:9`VM?9Q#J+V11X"Hjrr6GA7gD=;!tCG3>rUn";IUa^"FHl<p^/!dN)i`M]:efs=S7DcG,fT\4V,&'u)h):F9/FO&XSeR3S@W\*`
%SJ9G7U3rH_T2ZE0.21-eLP1g7WQo0SIAG@<8VKd+p*H]<8Lnr;2*a`U;,X[KVM/c"XHKTc2Eb/?BpM`%[HZ\6MS#+-Y>#t'dMsT6
%N,AF4Pk$T/k%rS)[cgLcMUnS$2Pn/_k]tp)_J'0o9%2RmPtn9^PKN;O`HY"1?35m[=C$9)m!_P]+"?QI,2]u%2RWNUq`pW*+_>pi
%g*fi'%4B#Ip(-PJPd6Q"XXYn<R"VRgC"$eMJ%BJcO^[JXI[mc3-1+],j&X(]AX!u?UR/H[-#IHmK:K:6[2JI3p:dDL0]EY"/MUs^
%CpK8Z,87K#TbBWG6=uBOJ]`R9rK=,2Yc*]6^e8-o3`Y)^<?\:d>uB6p7Z*5Wme/-p;j_cp@D4>'l:Tusk4WgI%'%hiRBZFUQ'Md?
%=r>l0\Urh'8AIiGENiD@L!M2II'[spbepJQ+Cqo87Aq?bPU<ou4/)Jo!hN&!>:9mVA]:_u(^"fQAS;)S<*G7khT_Lj.#M6Od^5+(
%1nucC(:og.+iBaTej[u^_J2B#<&cD!;!k3#<d;he@HJI6aKWC*+W6SD^[mZu.uK]@_cbM8_b+BOOC@gZ'qPh8Sd]7#Jdc;g/^n7_
%:r'B"<fdaRYUu/HJKp!u`+iVe)Bi(YaG$M:3@ep#4V!Ob-H%2Y6S)lRrYDn8=Ba,Wb\Hm;`.^2Io-LJg-qH-XA?8K4L'AH3Xo0C^
%NZK/RnDTZ@*mKIeNr?`O_d1q7b(n:jfPhe;7bD\,XO];rN+l?jo\HZUE#@.c!IC'b4Frb]62G-q7\/5RrfSKJSqC7C.Da4NIAZNq
%<ns=->(Zom?''Rme^[*(.-66\'W?`,$QG;2I^3d(Q.rHdBiSm:Z#m0;mX8RO%U>(V9P%L59l@p+j7$5`KqtAiQL_'8%[X`t+5sV[
%1L)&VW>h_fQc_'$:fLJ/#9NA(k0gu>(b/?!>\G/ZUjZr4moE9_ff[UbcYTp-G4s!@JQ=!)`CcusgbQj!5]mM[bmX,[@;:&L=I,qj
%%1BcZ7=k;<!&M4sl<9G?iQk.;k5j6=Eih;%6;lI?AZN(LJ)K?K47$=nWo_C@DpjsnIl#W_`tkPapnim^Y!+\)^AR+Pdp.B9@Tig5
%D+mS(E%9<K!GirO#3+N663tdA9TT>Rc#gn>1bf_*^c$KP"S;:C,f);l'iAYTf>Bg[aQgP7>P(lE'Ni":Ji)Jh5bpIK3e8T1WW&CH
%:B+&T+("tA#j?bLcSm>%ckP5n@o*os`oDbtcBr`9+h3&<?rZ4,rWAg&S]rb.CKEP<_/1E7B=<3$_6pnbH43CdQf&epbZa4$G8)lD
%dk(eac=IjQ+:t<5Ncld9_SY`^fF7!#?98sU>8c'fgbhEbaE<hOkNu5*6,Fr[h24tB'hD.<*Y1[B7BADV@&u;rG]YN.,K)S,];$LV
%D\,%8Dc")gNVMqWPTb,SN$"Mm)qG=J2lm[qOjKV-\kDo*OaBr/X\OV9^eKBh#Y0%-0ZL5o;dlD>APL\O<9XXdP",%T^hn/j91+Cb
%DQcKH/G$Rf_=U)]H_ZrGRCs=<a-d?GS3b,03?Rr!3<7F17YbS@a$ACY(u29JS%!0d/s,BOZ-&hZKs_f;[pm?@D"Qdcq\MDmXq>uQ
%?$@!Yp+M"&p+M:bq\QZ+s,Zp]->u:dbR*g!JG]U(?UKW*=ber1KPV9DF<`=Rh[#.\2o7L?::'7<`%%*^K&UAhnVr(3U3Rd8L_A.?
%<7-]0@!j1M*o@7\8@Y=i]>Q1[<f4aK@6+cPkaQ<`C41s.&u-^nGD[CNaW1g$;Rkc-K][jnLfP0'[!nCQ4]DWpLTSqR5=d"&6o5Z[
%r8P9[_.0RRel!Z]N*8TrG[ZW5cL[$mG+!>oL5XdAgld7\4##&I"]q\%kM%Upo7f0[1J2L4SjU.s@3f#dI=nP.V):EZ>"bTW:>Iu;
%$Z<g)i7m%7lh2%*;-46qNAd,frX+gb_huKI!$76EUj*?;WjJIS*WiP\JSd>*";Zq,J]6Y:i#<hp!4)ip4?Nb>8Zgh?mLK>1&_,32
%rXek6SK*635tE[>%J&nsN$LV#1+sd2`J5RD`'Vb*@mM;b#f(9$oqh57!,QSj`gMrf!$=!tcH!P#ES^h<X.-"0cUa%H!9`(\EZ!iH
%2?>6lf-$<Ir?8CIF9X99*<G&L5631(jHU!G!%,o&:@N6N!7_Q'YJV"b]+1)?Cp:<HF@s_`8P(KJlY:4-BM*gbBhtjYQ'];f!&7B'
%dY&YA&3)K/D!;H1I]V'WFG!u+71=o.%fTB[D94QN3>cZsWc'"X\,l9_>?NUTLC[n--IbFK!&1mJ<:u4/q[;T1'PPXs"'u8-NmX5<
%$&l8<?uI2Hg#T>El=?Z@#/[0IBrZ"f:q*+s@H'o$a5Gu_'iD:?UdH8D%b<?ZCN>Vo((B3!Q:_Ogc`)cu2T=p\;4U1,_rgG<g_0)9
%5rOdS<2W#jWmdWNEuTd;%G^.8f)C@sh=nLdM%@9U,5p/>/e[mln)Hr).T[6FO=MdJ>V/NkhC"MG/TBXD+$4C:g8oE)V&3e3#p(ep
%'R.j%IZsc_'fM;os48"ZcbF+)9"j)f\uEB=\l.ro=pK',O;Oqk'+Q3XF]_!Sd-afd<0P9@AY<6'1E<5QlMW]bVOEHWjdI[3LAI:;
%p6,9gUa@h`\f>X>V&]"@r($b"9b#4GV)jph`t7o>;chJq;U3^GHB^=\!%/j/(RBUc](A%3LW_uT47,Fd.h9Y?AQD9/>q3RPg[ko^
%.@Oj6X4&_4-7Nh4276"lko0ZJHgNZYVRmDXYurB7_p)G@9fsr9dHS:2^t^50.L%gi"$6!`k@/CCiMaDC6T5W1WTc%?cLu8m(p%;^
%MA9"ND@7GehGl6]%V)$p@OG=qA=Uu]N6J@\OisJrT\TYq8Q?J6$YA?&Hm><6P$ZD6];)#:S)".$S%/rs37h#"Zoc?FM!PBfRfVml
%\@EI3W=B<69K.ra95;%2XE.hY5a,5Lbq/ocY+f`M6!6PUb\.@u=>L_0JHb'cY^!ea^(IYs^,l[jZ,KpTk7V]!#mq@^D#mTs<C"%t
%(6#`<ipdfZ7d(JqmLniu4^m<#PgqKsNV&OM[&GWkP\XIl)V.Gofh7e>PD7#QeM1KloG5r`8Mb)YCg'FMejsOA9q,RT#2A9$]5,kP
%E$Yp"hMfrrf1B(pRc^?!jboRid^H*MeZ*?C8sm?*YqB`S9A8'f7_+98M]1p0(;I4j0OEkZ#$@op_p1TN(2[Z:KYa?rSS/jDW7<)/
%qFDMrRMM0CV1mWXP1H(t=f5s9C)C-QD('7/8mA%L<Sm.Bh?q[4g0cBaWDmGHdf!V6=$^h"dq?O<J6qB>$o(12.oT2u_N:j"ip97+
%2.T?M&W@.6JCjjGMDG#_#"$J:=UNS#:tuMH2XBLj=G.p"JG-aX+i5C@Y)gQdUu=nkA[jp#3#cmM8*a)@%cf0E+/kZ6Brq^[J-"^'
%+WpS1qdr4B%tW_X\?oBtYJ_WpohhX3jH'N]^WNi.i.S:DV&YN_0VNp8JF1RCm0ph:nl\L($u)-S9O+?Qs/%"pi/nnFRN7GQG(J_M
%<J&U!"L&mtC",qZ\HZqs0K-,)O09?VSibN@*^d;KMWhhg0K@kkpK)o&lRr\b6ZBpGV4[HkY]JrPe1:WQ0bE+NQo+-,em+!K&d:4Q
%b_;QT5AP:O#oFZO!4TFg2!aT>)+/Ab"F]=ta*uU8f`3:-+LiMtT^T"R>&t^E-=o:__eZCq82JV0>'D&pflRi:8$L2hY9k,?6EG]&
%85F=Y%$f/GT/(+Z6@oM%*tH):p/2X"AC8FoJNT8rZNL\k5]Aqmd]B'BEtJ[XcV#;LW8:Ou87@\`f-]Y%i^f@C:q.FsJY>DrJsH'!
%4u2R._::0-2pO9b>Q4g]"HD(L(7E7]:J8cL>"!33TH=0Qh.UN'DI//g8?>U(FIMare5"UeV@;H9PL96V\Q6JalN:%1R76F?4/E`2
%K#ZgCnXoY,P;W_<#=*8f>2$"."#h$Icn*O$2U>0mk\+9llRZne-+Y<(%(7h)m9Yugh4YrYT]\giTE!WW_N]<eT?.'Y"!G)q/SWb]
%X18Lmoa/s*T*SS45@q,F":V`"i-qk$ZgLYO+jfi@B2VY=1c&^k-38`"&DW>4[-Hi)>_JmP[`m;%=H0A/X;Y193&Rjfdn3]*`rM,u
%l)K81*!oDG`PFcmRDO+g(@"lQRSa2?+9`Il70S=!';Ae`.,gsFaR]nXQ50NnY^iqr&>'t(ZmZd)'adDJ!^`u"Kc527_jMtL)q*gm
%$;&AT,To][;7?n6J@11e$/ScfIn!j8rCfh*JjOc>8;F<$FnefE?'S<cN`.1>OC3u<>Ab>]]>;YJ@#Ym\,E"_(:VdGH8R;7lC;>_Y
%JRBtCUju8aF[mUa^?MW@\.77,YRch06,O=UFU2qK&=L?a-qoa2W"&p8\V":[L]X(7@2-S`RN;?JY*8cmmqNL^1,2=&YoANs["dF&
%XY;AHQPJO)Qr./si8JW6lO*:r^t'40m1>'>@QZ1Kj]0IYRW9s:Q26To&Q!icZF,p1TL5mqaLqVbnJ*Anineou<)>@WK'5i5,"LP'
%)C'=]Y@0U4,eFUia9TYU;B6<+:H]d#8iOsU;G(nI!\ZWt6&dI@4\LUR!?8"AFbjl9;bm^&q&pnAr]+Hj%a'X9&lPht9bPt\`3)D!
%>H+cYc<)8M#4FpC3BSluWsSmY4>O\UYbE&:+?p`OU;6_]aqn1G$8A%jrJc?U8rtiKXb7ib*Xm1%+NOf#(8P+;JXOsjAE/G-B5=f)
%4/=HD!]%l+V$U9lAOUPi'+gW9#'P^"NZ_8f_B<t5c:9IP0O_3f<&lWC*)ZtQ<#W[&B/&oa4lkP))$aGZ$%>m;REcu)]mu;PEYJ$l
%$4nd]>YD:J(YC[!Hn2Fb,1G%-G7Lbid&)?//3Rng%lRP*7b70UHT7gb<tHXWiT<mDcl/Dj8@qbSo4<YJ'GQ$"-"j::Y9dck'^!a#
%+$_p1$KKTDPen2';/6D6BSAVRMF,0KJT*J\S<X6DEt(UZMQ(*A?Y3t(d?fIHgd#V'6=[P_>.#9Sr5/]:+;kQM/RDr$(NZELG,QS/
%#uY#%E`3iF$M3^WlitV2jQ9B_!li%j&iFT('FcfP-k$aSf</o2AYi8b_I+^u5_=ihY$f@2WWVcA/AoHNDLiN;8U(a@9>I,+=H,+9
%PYa*=_I,ARO\//CQQ+,ROH:ObW#NUAGqOd2\o*:Y'o!TCbbkmIeJ&3T5uN;knr35XiR4Hffa&]1FfZc\J4H$I8u%RbdUm\Q+XJ51
%?A/O\'Ac38=`#uuf/5H;U`Uo[;Hd$a9(ki!J*pZMkT!M`"IO^U7cmG9E2B^*A^ZT8(qgUIdp7Q5c`p>3,)b-*k&AO,4>a:l"JLQR
%H<:t';BM03$n:/.EGdJ5+XjV4CnikPkWlZ/jtY"f^_9OP-$FkH#i"Ff6n9\TY1Sl(8\sUeGUX$EH'I9-AEl#$;Y(4Ym=^j7-;+ca
%bb4/[V&032!*SN$Ui$Mu(s6uO@6$LLa*`C?)btfYA<g:o%NCJ<#lXX>2)@B8LfLi&P38;c*$,=i#CIK'PS%G.\VWID$da885e\JO
%d(pl0khlL^@r'jU-ih2J/VH`!5`]:s"XMnj<hQI.Zf5(B'6H^/`)=6o/s'<CffH?9;M6fJ*[Nq>"+aCNYq3TBe,h/[.-="JGKQgd
%bcu7l1b\\^Kd!3+r\[B=I])rHT_V8kSDu]rQo#1>9U^YmP?*6_MUMbD9+9-'c6ij`/nEERg`:!dNeE-5;Ohc^4qbXeQXt%!>K?m,
%]Lir#9,V3O`YehY30,lJ:U'*abbUQ8<K@utNh8)i+GjF.l8f"PB`103L^r,!E$&l_.gg2;5$a<h)]O?KW:nHk?Q1u_&KM9ZUX"fA
%?2^&8N*dl-T+(n%3)W7/Sq_$_1>jlZbn,I.%N`2$dcVM-MIoptR",Pse[Tm=e]Kb((VgCYB=c$P<6Sa,<4.6M<T&HQ1:X.qng"9]
%kh<`E'jN`;e=[a%]F*Sn$p.bspB[U`'Vm@<5`uK9%%16,?m=kC56XbFX,n,KFI"Z#bS?48M\up,)SflQpd8"4.Xi##pYeJ10pWt1
%a<<#QQli8-A3Mf:Ae3F\AH@b9/lYr9H-h(p:mW/):3\,T+]`,QJj4mNAKY'>5+(h'/$d&Me&]b>$)A9-GBbe+>5u"[/&^D57X@<h
%TW64>f''r2(d*Dk7qMo3=;%qk$&sKk_u)N\FHi4q0/-mgO;[,t7Q.VSlr]!iBVeWJWh!+5#-r/^/k1g['1MsM6":$+M_+?o64G2F
%?sm*!W@fp/JE[t#,c3@$T!K-HBF-6I<&6+O<'kd<M$kX#$]5"lWcTK+CtKZO:"D7*\H:kh33X8j5so,&MJcB[@_7-s0j)YR(g,6a
%VUJq8(-JQd<Z(eq#o<(T%M&:G%n##4"qLe@"rk#bMUjQ]S:NR*Z6^s2!\kCt<W?b>q8S%Q!RHk$[kbo(T#&5dcer4S=[LJ$iNj&m
%RLBNEp_!cQ%LQP+XPgpp^^H.dcr89U2K;_lBO)fnN;]f5cZ(L$MGn1D'onsq=V/d'27\tT;q&ng1c_BZ5LmVq-$Zd20@sb3,&YbF
%GdL)7T1ndG/KAM_QVI"_%JDcm=<Z:di4BZhH'=AOpj7AD,6$Fl#RNek+`SW-Bh0V?W\h\^UpSSp(o:fBKW(.Mb#7e79$V4.K\JuC
%N!.4qJQ&jd6RHX^?^lXb66'm,Ro9rC=qXU<m7liZW<5\,$W:_nK^tg*9p*k;,W-Yq8s5E&-*;A_BkWs8S:nbW9f80`+siIJ/S_8L
%"tQP79'aD.g9[$0X[O=ud+kHSHu7$A[,*L5?VIID'3`SDG-aULRaRTNFfS(kCeA3,;XCijJ5b02n;G)(WE"]+*nbp-r>[;`Xf>S%
%^a56!.HPc3SiiiID^aHU)L<bE#3pR]@k#BHb!=<_91YEj;W`gh-)8rQ&_]`]i(KCjV'JbfZ#M*KfbgDIZIoea:X_5O0HrM-<79XQ
%1efjO=HPM]ft1-oYpM-54ZXWP6G45g0.!PIEQ&.W<o?r0O)>+]cFJ@I+=XS4J9!CZ7\LSJ_\X,H,*318CP`i?H_C`Ke.e;:(@G[l
%7>g#"ER!gJH`LafhE2!&B<b=4\I6O[+AEua!J.2Cee$VKE"pReMF-ec8D'AoJIhs0j%<^\\L-tlg11E:=olQ6ABF=W)h"p$GpR\^
%.28UL4Qeubi1^4jX<9kk;GdJ:p_m*g_ZXh2MO']gW^jC;<7I@>0]-5iMCP$oMQ(9?'s0ePW]6h!5t+G$JmL]2RD=S-TV<<)8iK_V
%FIT-5Y)K?YcoVq<;8q5Z";MYRC+5sQR,K`pU.'XVTrFtf)F=-V>UCSfX=T</&&r46fVM&O*#VAMA.FPsDR4-e#\.CCF4.T/quf`F
%k+W5[c/nPrUYbVcR!CGl\EK3r_&8:,Ms#NqRliLp\"&?QXW7*$Qs\tm?#H';:7rm$>>X1C-[=OC&+@]765;V7TG@N=W&f8F*"I$A
%6S]eoo:)"3o9H/sKarm.#uh&%0-Khccq]=A7(?53?4ar\:/:aJ&?UgO-;pKH#s-MnaM8&'!oH)d+6R<!L\0/bT+dZpE`9@Hi0"I8
%Z6_GECC8\)OG2ZU:lPhZ>&#&l-s,o[YaBhCX2;\1F&!'B`Jeh;^dEZ^EE7U9Z2tB'8c;uG[=6bZqD]?0]Il&XT]GC^^6_H\.(*Y'
%3I\n7=l@K)c:;J=]]"cK1/u.lk(KGn>DiWWY#V$]QPi+`nks7>CYX2O[F.ZTGQFi"@!QUn1:)9@W4N(`!O]EKIZ88/;@%YfA_m.b
%LR2u45IYM#"tMf]LB4%0(?=:JEKBYY-bmdmkK1>PIPLY8L'FNbcg^*rh.UJ0W]Q1jOLiui0?1cYGfC@T)t7S02ZEY3[i6:MHb]+2
%Bl5mg0_$/Z?I[r+:K@96]!H[I)3k]%dbXl02er+_#Y'IL$<'AHKoMhYGN8>.A3BmC:"^qr'huc3kZ3RjcV5H:MF-PPX,6L'"Pn#r
%LkGX62)c6Q^n>WIa%j_f-,FP?C9Rj$dBtY\%_/nRZoko8"GA"-nnm7t_<dh:WufhJ(e,oEQoR(i3YGP,"WMSoZC$%[bmZ.>j[h72
%f)f5.gJ`/n[hG/f'Dh.\W4+iW-tt'7(9"bYA`3RHYir;q3'?T2!HM:J7hd0dHNI-*4b[sUjdB%OQ?nPu/EBE&eeX0DmKS\Om^@hr
%1nZp&]:+f`?U,/:c6S1(m=dRj%^nFH@0Aq@<^U[@;L;*$;Bl==/Qt[rB$Yh$h&%\ZO/B#Kh/t:tJOdENpg2X&-tGfC)g/A*s"K$Z
%9Dgp>-g+k?Xlnr1/7t;N1B@kf23"3-COe%0kpNa1h5B'H4i5Z36XM3eZA@%cS3bm00j*1Z-q'"P"K"X-$<s87Z.o90^13"@?=KV6
%RRQBZHn&kJdP-8=ModGhcq@45@C]Zn:)k#jF9dR+h7)=gWUGXPAk_/TG;C(*0\gq[dA(#7"t^.X\&b3n(*7T'#=mT/5Zc<UPZZJ`
%3^G_8[FUXDQ+"__$"8cRAF>C[PXFD+Gdo"IflCSX.s!DS$dcP<B9^HFc/I&mQ5m!(=.9Or^'2<P$;Ec^0XqbZUQn,^"CmA5X3A3O
%'q+cmW?LS/V&f+6Xa^`gPLY''0\K:I1p0C?+uSdnF;67LTJ2UfOBSU3Z$.LI/M].I5rm#l7P^'@1S/IuWn1tfE2Ip[@-94M8^+)U
%e(d%bRgKLBkBX_d8FOY%=;:[?MI<(83J0_QFIsQhm^%P`IJ,8fIE"c4PJKEb-8X6*B?5!<7Bk,;g%?:Y+)\C5o\iQYr(.)9i$IY4
%hJ:#S`-[JZ/M"Ea?kLPg?]NlVZkC4"%JLc*AQ>tdkWk:=0q[1Ik$Eraglh5QYB^Eh%-r/E6.MK>a!S:K5fjCU-M*^DZ"UHq*,W-"
%JS[58!3?Md>D`*BMl*b+%?c#Il<(gQ%Hir-dFI].+I&[tR[!.P84b^.;*q.;[T[&CgcF*R!h;'S!m'adH>$lL]nT=VZjY\#cqQcn
%l-t`2s7agJ*%2><[aoMXaQZ*M2&L4A`jBa?_o!%?$;H7=+A7Y#!UuZ0!^d/='D1"plpI]O+db;e\Z%\\i/0nm&,_YrcRCPXe`]4(
%e:So;BJFA3Pe*B!n0t57ij;:/dG?<W%YT",X9H+ZRL*uTRZ-'AbRk(9B?l:L_fVHJ(4a773\0FjH[c+3:BV't!$2XB!!K_OAHMgW
%$ZkR>k8F%#Q<]V*ihT%.[Jk!<8a#h;0e0;N30;\sCjkc":YnUf%k;P]URt`95N6tI49R*&fkM$&Cpf%hQ_N5ts)j+p?['SG4(L[)
%2Xu]i=ejTi(PsOCRqb;]9N)Uk"R?XCAK<3?VfbR%.?1'eDKi':HBXSBV5]?/`TsK@4f?>9WgI6bcYK;E8unh8/(U7(X]JD=QI;r_
%*EC#MG-iC?B)HYpc9EgE3Ft`[A^XP\`+lneH-2-YXFXYgi),GJ<`X795UA,23AV-UU2QT&dpd<I8e`Up2r%39Wd%2n%g(`u$3C_I
%97k9V8IMJ/[T[;!&V4md\j_CBYn'29ni'Yc[HRe1)RrgZ]AZl9&f3?K$Tl&8Su6@TY(uBnZ(C[!K>T3MP<^-q%QaG>&Zkt^>:u,T
%TYiHq!eDtm@+[=4'du8'@Yo[&6KaLfO4n0E(qrN6cU$_m@Kd"g$&-TBXG+I,B(3\LcG0ZWbgUGb34:B1VZX5l?"u0A$X6&gRAXhO
%/;NU@Z(?r?"q;4_FJG**AJF0`7k5$pX$Xsd/iC048p";.UNK\KfFABmgUH*BbP+CZ1T59+h%[a!0!V?6qEt(M0Llq_l%1uJ>]9q'
%$gq4AX5\FtXR#S5$*4cjZ.NaP%8gj2:s+aHYW,'01MV_<S$Gp=YLkfMS'6\605Yf()<Vo]]Z=\Sc$O.,@EO\a=B0Pk)Rc'TA4%pl
%8IIu(NmY(U6m`jf#YCL`&f-ggD'h$k:tnmrk*%P0269?2abC_#P1HUc%BHb.NO<r@prI8:Fn'/\Gs[_Od()YY"0.5S/+Z\3s8T:0
%/(p'FL8">AreJ5_k^c]5g<N0.)B_'$#6p1(,XC]&Ca8cSkY^>?l?401qH?UU'Xa49/FN\=B*8%JEVn_RecWn^Q>q4/YYQ5thahWJ
%V(>eus"+ORO1tPC&UFJ%@+:[=YDbFb`KCYbZ18Hd.5b*d0i1:jZK[1Ci.`5UoN*1@s&(iUg7B0$s5'sc8)G#],t2YhP)@r,"Z8s\
%73fu"p2th-Q![qB&ZM>763L=T@H)R=.`1Q-qlKGtWDpNcNWD`^Kq9_S<'-\5=,1M210T!]\Xit*(58CnA<E:f;5eU34RO4GO4f(%
%;X&!P;'K3n0,P1GFf1::#"-A3W$BOUdC04H'1u+t\_8uPoQMSUc,Cc\$f(AgWD\l`Zb7;[(fc_CcQ]l4U^t?Kj`(s2PO1;i_\j>P
%$RI`EN/CcE25hA%;UgPrS\$m\[YGI6DH]MKI<^X,ftIVI>V\SibTceU&O0cYIq*.9VqRn4c>j@F7]mG:/nj-cdP1Qq*=HT'.HYpl
%=F"G'7Zp4(lZXED%cikF2m(eXe@?`3m`*D)*J/!ojP`g/3?r6r;66C)$:eVD'^(<4Qcr%k^h46??u+qanLVfB6b$ifY[=ud-qT&Z
%c4s>;Q(j/B8hR.uU@lS^&;)#RYJP6GN7G_NPh*P;nXMp_/V[?WSTb<iELTMkd9&u7cS@G<g%g;G/ZikSCdSc[*-*t%.H\3"Y];0,
%NAQROMb7sXg;>HFWVd-?jJ4<c:2rLU`IP:A3iRcbZm2>sP)SnuUphlASM@;^do8^m,Rn@4=4f2V,`P'Im'?EQfJq=4;"41#UuG?X
%-lQ`B6XVT,=ot1E'p:WWd^_6"^4>;'qQ12/ibPQl-^a@+@HCB8)JKu'(R954&cRbr78BV-`V`O]XJ76jc0.ghc;6n3gQY.7,SbC6
%$Z$XpP")*5p?TKT*4:nso-O,-SW!6$6m\1D%IW2[E?2RrD@mBV>j\BB3T?%e_JkMF;@TF^,gc!04Yh'-.:TY4=je<IU3I)JXm=$(
%4WRm\q]-l#NAUj-;$$q6jmeXaO3S>u!a,V'iV"&cJf5h'-OT3nV0S%@koPdkqS8W<+[4NV54")9K[8W\G7S9i:G>D>,YDj1$=n6L
%n!j#<hpL27hqdKpWF4=:,HG@lT57Gk=\5d]Z*.;2E27J7Ni>0qEQ@.?2@@@S2laMZX!cmFctPcpah`%5a^E&.6%'\'rO/]h;Fqe7
%cedQO7Uu"8*]o&l?VS[m6j]SQF@5il#7oQTUS()Hi:"N24kT%>L'-uqN3LoN,SMuN+tW<#Mp"[FXh_'43k[AG?*DrG75<;!j\04i
%G'8YX0W=hr([`:2h:s?9.,FYU(pW2/eeLVXei"Gu'PHo[V!)_S8>LLOq+)mf4T^e2L$G/M3:r57n.:Z5aU.]+*da$+r"q5h+_###
%;[VQ[4&m2qLg!ciVhr/W3e/Hm=4iGIkh?Nocg8`1+Rl.]SH6Pc$ZD__@B4h*V1Y$pL7N9hIsJ5a>680Vgd_nkKi=Q8Tl>:Mm>030
%<M$^;UDsl:2fc?(m%b,G:[3a8$bM7GPDFjf4%:f'\3$Nj0=M(ohO=7r<nj+7b9SGJ?gPg<ggasXG.?E@iW:@a/oC>k2kJZ#&bL/]
%G2oQ-3]Ni,A1hbeOgHY7;-$5Q@*j^jj<O=6hKsGZ!?'hZP!-I,#Xd/<=Y1EhDNr8ho=o&2d2E^6D<Fg@fRNBOE[G3Og/mbqZAsTo
%K2Y1pZGXJr:-cW0CD2SNFXSe1XX)Gs<tX<H1as\[CSTo*B#'+pW2_S"0_u=b\"=`VSN6BI]-cMf&Irrl.CReGR:(m)@GJ7qM^D\j
%4C`iRQm<7f3%r8!4(Io,iDWs\M"p&#0/nQ-WsLB^29)st'Fm):PW[78rLE,4$s"rlCEsG1rNqK7g!m#HWL-VBJLQ-X42;>h&Y;2a
%r]baBloHdXP>Te.jV3lYlo,_)eA\9&-[m4R31/*(lgqD+I$Q=4PQP7S+?j$SQfK$e%gU)=Jq\e-%,AFIY\Yj*/eIE_gOk]Wa1bjl
%VTH$a#qiU^WHAQ(JZ[+1egN!+<(8?;)Agmi4gD]#jE/+3&akgJdglr-+G<l:;,Ll!)R5uu4="VeL:>5p$\M:2Qjbl86-DgrA=MT.
%PA/k*:lgE'ili)2%T-GuDhWbJE"#sEm#XSPA?-l=+p1E0]PIVOr'q`/M=dBp'AXFn_2+up$d>NGIGlGM`TG9VEX%+@SD3*p^gj2.
%*#_.On(bj)$BL!!$\ho+3e'\XOuJ"&r?++-g3h@5.%0F[15=0)Qsp*,LM#42$Tfl]OKa0;m\X+>b=UZ1>^<5[AlU4,C.1lKW3`q^
%%*%R+Pdo1#ANaH`W)fHk?6hZ6A!Y6U2V!&eWQp=%bjkQ#qS11.]`$sVjn[M(:VZp\iZTtITDj/N4FR/&qW6tbo:PuZbKHgHcX1!C
%4^UDQpA-]Zr(6nWp?do*s7GH/IfR!b3Lp~>
%AI9_PrivateDataEnd
